

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 17 23:41:24 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext1,local,class=CONST,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 1.45
    78                           ; Generated 16/11/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16F1619 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  0018                     	;# 
   136  0019                     	;# 
   137  001A                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0092                     	;# 
   151  0093                     	;# 
   152  0094                     	;# 
   153  0095                     	;# 
   154  0096                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009A                     	;# 
   158  009B                     	;# 
   159  009B                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  0111                     	;# 
   168  0112                     	;# 
   169  0113                     	;# 
   170  0114                     	;# 
   171  0115                     	;# 
   172  0116                     	;# 
   173  0117                     	;# 
   174  0118                     	;# 
   175  0119                     	;# 
   176  011C                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179  018E                     	;# 
   180  0191                     	;# 
   181  0191                     	;# 
   182  0192                     	;# 
   183  0193                     	;# 
   184  0193                     	;# 
   185  0194                     	;# 
   186  0195                     	;# 
   187  0196                     	;# 
   188  0197                     	;# 
   189  0199                     	;# 
   190  0199                     	;# 
   191  0199                     	;# 
   192  019A                     	;# 
   193  019A                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019C                     	;# 
   202  019C                     	;# 
   203  019D                     	;# 
   204  019D                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019E                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  019F                     	;# 
   211  019F                     	;# 
   212  019F                     	;# 
   213  019F                     	;# 
   214  020C                     	;# 
   215  020D                     	;# 
   216  020E                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  028C                     	;# 
   234  028D                     	;# 
   235  028E                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029B                     	;# 
   246  029E                     	;# 
   247  030C                     	;# 
   248  030D                     	;# 
   249  030E                     	;# 
   250  038C                     	;# 
   251  038D                     	;# 
   252  038E                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0397                     	;# 
   260  0398                     	;# 
   261  0399                     	;# 
   262  040E                     	;# 
   263  0413                     	;# 
   264  0413                     	;# 
   265  0414                     	;# 
   266  0414                     	;# 
   267  0415                     	;# 
   268  0416                     	;# 
   269  0417                     	;# 
   270  0418                     	;# 
   271  041A                     	;# 
   272  041A                     	;# 
   273  041B                     	;# 
   274  041B                     	;# 
   275  041C                     	;# 
   276  041D                     	;# 
   277  041E                     	;# 
   278  041F                     	;# 
   279  0493                     	;# 
   280  0494                     	;# 
   281  0495                     	;# 
   282  0496                     	;# 
   283  049A                     	;# 
   284  049B                     	;# 
   285  049C                     	;# 
   286  049D                     	;# 
   287  058C                     	;# 
   288  058C                     	;# 
   289  058D                     	;# 
   290  058E                     	;# 
   291  058E                     	;# 
   292  058F                     	;# 
   293  0590                     	;# 
   294  0590                     	;# 
   295  0591                     	;# 
   296  0592                     	;# 
   297  0592                     	;# 
   298  0593                     	;# 
   299  0594                     	;# 
   300  0594                     	;# 
   301  0595                     	;# 
   302  0596                     	;# 
   303  0596                     	;# 
   304  0597                     	;# 
   305  0598                     	;# 
   306  0599                     	;# 
   307  059A                     	;# 
   308  059B                     	;# 
   309  059B                     	;# 
   310  059C                     	;# 
   311  059D                     	;# 
   312  060C                     	;# 
   313  060C                     	;# 
   314  060D                     	;# 
   315  060E                     	;# 
   316  060F                     	;# 
   317  060F                     	;# 
   318  0610                     	;# 
   319  0611                     	;# 
   320  0612                     	;# 
   321  0613                     	;# 
   322  0614                     	;# 
   323  0617                     	;# 
   324  0618                     	;# 
   325  0619                     	;# 
   326  061A                     	;# 
   327  061B                     	;# 
   328  061C                     	;# 
   329  0691                     	;# 
   330  0692                     	;# 
   331  0693                     	;# 
   332  0694                     	;# 
   333  0695                     	;# 
   334  0696                     	;# 
   335  0697                     	;# 
   336  0699                     	;# 
   337  069A                     	;# 
   338  0711                     	;# 
   339  0712                     	;# 
   340  0713                     	;# 
   341  0714                     	;# 
   342  0715                     	;# 
   343  0718                     	;# 
   344  0718                     	;# 
   345  0719                     	;# 
   346  071A                     	;# 
   347  071A                     	;# 
   348  071B                     	;# 
   349  071C                     	;# 
   350  071D                     	;# 
   351  0791                     	;# 
   352  0791                     	;# 
   353  0792                     	;# 
   354  0793                     	;# 
   355  0793                     	;# 
   356  0794                     	;# 
   357  0795                     	;# 
   358  0795                     	;# 
   359  0796                     	;# 
   360  0797                     	;# 
   361  0797                     	;# 
   362  0798                     	;# 
   363  0799                     	;# 
   364  079A                     	;# 
   365  080C                     	;# 
   366  080C                     	;# 
   367  080D                     	;# 
   368  080E                     	;# 
   369  080E                     	;# 
   370  080F                     	;# 
   371  0810                     	;# 
   372  0810                     	;# 
   373  0811                     	;# 
   374  0812                     	;# 
   375  0812                     	;# 
   376  0813                     	;# 
   377  0814                     	;# 
   378  0815                     	;# 
   379  0816                     	;# 
   380  0817                     	;# 
   381  0818                     	;# 
   382  0819                     	;# 
   383  081A                     	;# 
   384  081A                     	;# 
   385  081B                     	;# 
   386  081C                     	;# 
   387  081C                     	;# 
   388  081D                     	;# 
   389  088C                     	;# 
   390  088D                     	;# 
   391  088E                     	;# 
   392  088F                     	;# 
   393  088F                     	;# 
   394  0890                     	;# 
   395  0891                     	;# 
   396  0892                     	;# 
   397  0893                     	;# 
   398  0893                     	;# 
   399  0894                     	;# 
   400  0895                     	;# 
   401  0896                     	;# 
   402  0897                     	;# 
   403  0897                     	;# 
   404  0898                     	;# 
   405  0899                     	;# 
   406  0D8C                     	;# 
   407  0D8C                     	;# 
   408  0D8D                     	;# 
   409  0D8E                     	;# 
   410  0D8F                     	;# 
   411  0D8F                     	;# 
   412  0D90                     	;# 
   413  0D91                     	;# 
   414  0D92                     	;# 
   415  0D92                     	;# 
   416  0D93                     	;# 
   417  0D94                     	;# 
   418  0D95                     	;# 
   419  0D95                     	;# 
   420  0D96                     	;# 
   421  0D97                     	;# 
   422  0D98                     	;# 
   423  0D99                     	;# 
   424  0D9A                     	;# 
   425  0D9B                     	;# 
   426  0D9C                     	;# 
   427  0D9D                     	;# 
   428  0D9E                     	;# 
   429  0D9E                     	;# 
   430  0D9F                     	;# 
   431  0DA0                     	;# 
   432  0DA1                     	;# 
   433  0DA1                     	;# 
   434  0DA2                     	;# 
   435  0DA3                     	;# 
   436  0DA4                     	;# 
   437  0DA4                     	;# 
   438  0DA5                     	;# 
   439  0DA6                     	;# 
   440  0DA7                     	;# 
   441  0DA7                     	;# 
   442  0DA8                     	;# 
   443  0DA9                     	;# 
   444  0DAA                     	;# 
   445  0DAB                     	;# 
   446  0DAC                     	;# 
   447  0DAD                     	;# 
   448  0DAE                     	;# 
   449  0DAF                     	;# 
   450  0E0F                     	;# 
   451  0E10                     	;# 
   452  0E11                     	;# 
   453  0E12                     	;# 
   454  0E13                     	;# 
   455  0E14                     	;# 
   456  0E15                     	;# 
   457  0E16                     	;# 
   458  0E17                     	;# 
   459  0E18                     	;# 
   460  0E19                     	;# 
   461  0E1A                     	;# 
   462  0E1B                     	;# 
   463  0E1C                     	;# 
   464  0E1D                     	;# 
   465  0E1E                     	;# 
   466  0E1F                     	;# 
   467  0E20                     	;# 
   468  0E21                     	;# 
   469  0E22                     	;# 
   470  0E23                     	;# 
   471  0E24                     	;# 
   472  0E25                     	;# 
   473  0E26                     	;# 
   474  0E27                     	;# 
   475  0E28                     	;# 
   476  0E29                     	;# 
   477  0E2A                     	;# 
   478  0E2B                     	;# 
   479  0E2C                     	;# 
   480  0E2D                     	;# 
   481  0E2E                     	;# 
   482  0E90                     	;# 
   483  0E91                     	;# 
   484  0E92                     	;# 
   485  0E94                     	;# 
   486  0E95                     	;# 
   487  0E9C                     	;# 
   488  0E9D                     	;# 
   489  0E9E                     	;# 
   490  0E9F                     	;# 
   491  0EA0                     	;# 
   492  0EA1                     	;# 
   493  0EA2                     	;# 
   494  0EA3                     	;# 
   495  0EA4                     	;# 
   496  0EA5                     	;# 
   497  0EA6                     	;# 
   498  0EA7                     	;# 
   499  0F0F                     	;# 
   500  0F10                     	;# 
   501  0F11                     	;# 
   502  0F12                     	;# 
   503  0F13                     	;# 
   504  0F14                     	;# 
   505  0F15                     	;# 
   506  0F16                     	;# 
   507  0F17                     	;# 
   508  0F18                     	;# 
   509  0F19                     	;# 
   510  0F1A                     	;# 
   511  0F1B                     	;# 
   512  0F1C                     	;# 
   513  0F1D                     	;# 
   514  0F1E                     	;# 
   515  0F1F                     	;# 
   516  0F20                     	;# 
   517  0F21                     	;# 
   518  0F22                     	;# 
   519  0F23                     	;# 
   520  0F24                     	;# 
   521  0F25                     	;# 
   522  0F26                     	;# 
   523  0F27                     	;# 
   524  0F28                     	;# 
   525  0F29                     	;# 
   526  0F2A                     	;# 
   527  0F2B                     	;# 
   528  0F2C                     	;# 
   529  0F2D                     	;# 
   530  0F2E                     	;# 
   531  0F2F                     	;# 
   532  0F30                     	;# 
   533  0F31                     	;# 
   534  0F32                     	;# 
   535  0F33                     	;# 
   536  0F34                     	;# 
   537  0F35                     	;# 
   538  0F36                     	;# 
   539  0F37                     	;# 
   540  0FE4                     	;# 
   541  0FE5                     	;# 
   542  0FE6                     	;# 
   543  0FE7                     	;# 
   544  0FE8                     	;# 
   545  0FE9                     	;# 
   546  0FEA                     	;# 
   547  0FEB                     	;# 
   548  0FED                     	;# 
   549  0FEE                     	;# 
   550  0FEF                     	;# 
   551  0000                     	;# 
   552  0001                     	;# 
   553  0002                     	;# 
   554  0003                     	;# 
   555  0004                     	;# 
   556  0005                     	;# 
   557  0006                     	;# 
   558  0007                     	;# 
   559  0008                     	;# 
   560  0009                     	;# 
   561  000A                     	;# 
   562  000B                     	;# 
   563  000C                     	;# 
   564  000D                     	;# 
   565  000E                     	;# 
   566  0010                     	;# 
   567  0011                     	;# 
   568  0012                     	;# 
   569  0013                     	;# 
   570  0014                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001A                     	;# 
   579  001B                     	;# 
   580  001B                     	;# 
   581  001C                     	;# 
   582  001D                     	;# 
   583  001E                     	;# 
   584  001F                     	;# 
   585  008C                     	;# 
   586  008D                     	;# 
   587  008E                     	;# 
   588  0090                     	;# 
   589  0091                     	;# 
   590  0092                     	;# 
   591  0093                     	;# 
   592  0094                     	;# 
   593  0095                     	;# 
   594  0096                     	;# 
   595  0098                     	;# 
   596  0099                     	;# 
   597  009A                     	;# 
   598  009B                     	;# 
   599  009B                     	;# 
   600  009C                     	;# 
   601  009D                     	;# 
   602  009E                     	;# 
   603  009F                     	;# 
   604  010C                     	;# 
   605  010D                     	;# 
   606  010E                     	;# 
   607  0111                     	;# 
   608  0112                     	;# 
   609  0113                     	;# 
   610  0114                     	;# 
   611  0115                     	;# 
   612  0116                     	;# 
   613  0117                     	;# 
   614  0118                     	;# 
   615  0119                     	;# 
   616  011C                     	;# 
   617  018C                     	;# 
   618  018D                     	;# 
   619  018E                     	;# 
   620  0191                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0193                     	;# 
   624  0193                     	;# 
   625  0194                     	;# 
   626  0195                     	;# 
   627  0196                     	;# 
   628  0197                     	;# 
   629  0199                     	;# 
   630  0199                     	;# 
   631  0199                     	;# 
   632  019A                     	;# 
   633  019A                     	;# 
   634  019A                     	;# 
   635  019B                     	;# 
   636  019B                     	;# 
   637  019B                     	;# 
   638  019B                     	;# 
   639  019B                     	;# 
   640  019C                     	;# 
   641  019C                     	;# 
   642  019C                     	;# 
   643  019D                     	;# 
   644  019D                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019E                     	;# 
   648  019E                     	;# 
   649  019F                     	;# 
   650  019F                     	;# 
   651  019F                     	;# 
   652  019F                     	;# 
   653  019F                     	;# 
   654  020C                     	;# 
   655  020D                     	;# 
   656  020E                     	;# 
   657  0211                     	;# 
   658  0211                     	;# 
   659  0212                     	;# 
   660  0212                     	;# 
   661  0213                     	;# 
   662  0213                     	;# 
   663  0214                     	;# 
   664  0214                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0216                     	;# 
   670  0216                     	;# 
   671  0217                     	;# 
   672  0217                     	;# 
   673  028C                     	;# 
   674  028D                     	;# 
   675  028E                     	;# 
   676  0291                     	;# 
   677  0291                     	;# 
   678  0292                     	;# 
   679  0293                     	;# 
   680  0294                     	;# 
   681  0298                     	;# 
   682  0298                     	;# 
   683  0299                     	;# 
   684  029A                     	;# 
   685  029B                     	;# 
   686  029E                     	;# 
   687  030C                     	;# 
   688  030D                     	;# 
   689  030E                     	;# 
   690  038C                     	;# 
   691  038D                     	;# 
   692  038E                     	;# 
   693  0391                     	;# 
   694  0392                     	;# 
   695  0393                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0397                     	;# 
   700  0398                     	;# 
   701  0399                     	;# 
   702  040E                     	;# 
   703  0413                     	;# 
   704  0413                     	;# 
   705  0414                     	;# 
   706  0414                     	;# 
   707  0415                     	;# 
   708  0416                     	;# 
   709  0417                     	;# 
   710  0418                     	;# 
   711  041A                     	;# 
   712  041A                     	;# 
   713  041B                     	;# 
   714  041B                     	;# 
   715  041C                     	;# 
   716  041D                     	;# 
   717  041E                     	;# 
   718  041F                     	;# 
   719  0493                     	;# 
   720  0494                     	;# 
   721  0495                     	;# 
   722  0496                     	;# 
   723  049A                     	;# 
   724  049B                     	;# 
   725  049C                     	;# 
   726  049D                     	;# 
   727  058C                     	;# 
   728  058C                     	;# 
   729  058D                     	;# 
   730  058E                     	;# 
   731  058E                     	;# 
   732  058F                     	;# 
   733  0590                     	;# 
   734  0590                     	;# 
   735  0591                     	;# 
   736  0592                     	;# 
   737  0592                     	;# 
   738  0593                     	;# 
   739  0594                     	;# 
   740  0594                     	;# 
   741  0595                     	;# 
   742  0596                     	;# 
   743  0596                     	;# 
   744  0597                     	;# 
   745  0598                     	;# 
   746  0599                     	;# 
   747  059A                     	;# 
   748  059B                     	;# 
   749  059B                     	;# 
   750  059C                     	;# 
   751  059D                     	;# 
   752  060C                     	;# 
   753  060C                     	;# 
   754  060D                     	;# 
   755  060E                     	;# 
   756  060F                     	;# 
   757  060F                     	;# 
   758  0610                     	;# 
   759  0611                     	;# 
   760  0612                     	;# 
   761  0613                     	;# 
   762  0614                     	;# 
   763  0617                     	;# 
   764  0618                     	;# 
   765  0619                     	;# 
   766  061A                     	;# 
   767  061B                     	;# 
   768  061C                     	;# 
   769  0691                     	;# 
   770  0692                     	;# 
   771  0693                     	;# 
   772  0694                     	;# 
   773  0695                     	;# 
   774  0696                     	;# 
   775  0697                     	;# 
   776  0699                     	;# 
   777  069A                     	;# 
   778  0711                     	;# 
   779  0712                     	;# 
   780  0713                     	;# 
   781  0714                     	;# 
   782  0715                     	;# 
   783  0718                     	;# 
   784  0718                     	;# 
   785  0719                     	;# 
   786  071A                     	;# 
   787  071A                     	;# 
   788  071B                     	;# 
   789  071C                     	;# 
   790  071D                     	;# 
   791  0791                     	;# 
   792  0791                     	;# 
   793  0792                     	;# 
   794  0793                     	;# 
   795  0793                     	;# 
   796  0794                     	;# 
   797  0795                     	;# 
   798  0795                     	;# 
   799  0796                     	;# 
   800  0797                     	;# 
   801  0797                     	;# 
   802  0798                     	;# 
   803  0799                     	;# 
   804  079A                     	;# 
   805  080C                     	;# 
   806  080C                     	;# 
   807  080D                     	;# 
   808  080E                     	;# 
   809  080E                     	;# 
   810  080F                     	;# 
   811  0810                     	;# 
   812  0810                     	;# 
   813  0811                     	;# 
   814  0812                     	;# 
   815  0812                     	;# 
   816  0813                     	;# 
   817  0814                     	;# 
   818  0815                     	;# 
   819  0816                     	;# 
   820  0817                     	;# 
   821  0818                     	;# 
   822  0819                     	;# 
   823  081A                     	;# 
   824  081A                     	;# 
   825  081B                     	;# 
   826  081C                     	;# 
   827  081C                     	;# 
   828  081D                     	;# 
   829  088C                     	;# 
   830  088D                     	;# 
   831  088E                     	;# 
   832  088F                     	;# 
   833  088F                     	;# 
   834  0890                     	;# 
   835  0891                     	;# 
   836  0892                     	;# 
   837  0893                     	;# 
   838  0893                     	;# 
   839  0894                     	;# 
   840  0895                     	;# 
   841  0896                     	;# 
   842  0897                     	;# 
   843  0897                     	;# 
   844  0898                     	;# 
   845  0899                     	;# 
   846  0D8C                     	;# 
   847  0D8C                     	;# 
   848  0D8D                     	;# 
   849  0D8E                     	;# 
   850  0D8F                     	;# 
   851  0D8F                     	;# 
   852  0D90                     	;# 
   853  0D91                     	;# 
   854  0D92                     	;# 
   855  0D92                     	;# 
   856  0D93                     	;# 
   857  0D94                     	;# 
   858  0D95                     	;# 
   859  0D95                     	;# 
   860  0D96                     	;# 
   861  0D97                     	;# 
   862  0D98                     	;# 
   863  0D99                     	;# 
   864  0D9A                     	;# 
   865  0D9B                     	;# 
   866  0D9C                     	;# 
   867  0D9D                     	;# 
   868  0D9E                     	;# 
   869  0D9E                     	;# 
   870  0D9F                     	;# 
   871  0DA0                     	;# 
   872  0DA1                     	;# 
   873  0DA1                     	;# 
   874  0DA2                     	;# 
   875  0DA3                     	;# 
   876  0DA4                     	;# 
   877  0DA4                     	;# 
   878  0DA5                     	;# 
   879  0DA6                     	;# 
   880  0DA7                     	;# 
   881  0DA7                     	;# 
   882  0DA8                     	;# 
   883  0DA9                     	;# 
   884  0DAA                     	;# 
   885  0DAB                     	;# 
   886  0DAC                     	;# 
   887  0DAD                     	;# 
   888  0DAE                     	;# 
   889  0DAF                     	;# 
   890  0E0F                     	;# 
   891  0E10                     	;# 
   892  0E11                     	;# 
   893  0E12                     	;# 
   894  0E13                     	;# 
   895  0E14                     	;# 
   896  0E15                     	;# 
   897  0E16                     	;# 
   898  0E17                     	;# 
   899  0E18                     	;# 
   900  0E19                     	;# 
   901  0E1A                     	;# 
   902  0E1B                     	;# 
   903  0E1C                     	;# 
   904  0E1D                     	;# 
   905  0E1E                     	;# 
   906  0E1F                     	;# 
   907  0E20                     	;# 
   908  0E21                     	;# 
   909  0E22                     	;# 
   910  0E23                     	;# 
   911  0E24                     	;# 
   912  0E25                     	;# 
   913  0E26                     	;# 
   914  0E27                     	;# 
   915  0E28                     	;# 
   916  0E29                     	;# 
   917  0E2A                     	;# 
   918  0E2B                     	;# 
   919  0E2C                     	;# 
   920  0E2D                     	;# 
   921  0E2E                     	;# 
   922  0E90                     	;# 
   923  0E91                     	;# 
   924  0E92                     	;# 
   925  0E94                     	;# 
   926  0E95                     	;# 
   927  0E9C                     	;# 
   928  0E9D                     	;# 
   929  0E9E                     	;# 
   930  0E9F                     	;# 
   931  0EA0                     	;# 
   932  0EA1                     	;# 
   933  0EA2                     	;# 
   934  0EA3                     	;# 
   935  0EA4                     	;# 
   936  0EA5                     	;# 
   937  0EA6                     	;# 
   938  0EA7                     	;# 
   939  0F0F                     	;# 
   940  0F10                     	;# 
   941  0F11                     	;# 
   942  0F12                     	;# 
   943  0F13                     	;# 
   944  0F14                     	;# 
   945  0F15                     	;# 
   946  0F16                     	;# 
   947  0F17                     	;# 
   948  0F18                     	;# 
   949  0F19                     	;# 
   950  0F1A                     	;# 
   951  0F1B                     	;# 
   952  0F1C                     	;# 
   953  0F1D                     	;# 
   954  0F1E                     	;# 
   955  0F1F                     	;# 
   956  0F20                     	;# 
   957  0F21                     	;# 
   958  0F22                     	;# 
   959  0F23                     	;# 
   960  0F24                     	;# 
   961  0F25                     	;# 
   962  0F26                     	;# 
   963  0F27                     	;# 
   964  0F28                     	;# 
   965  0F29                     	;# 
   966  0F2A                     	;# 
   967  0F2B                     	;# 
   968  0F2C                     	;# 
   969  0F2D                     	;# 
   970  0F2E                     	;# 
   971  0F2F                     	;# 
   972  0F30                     	;# 
   973  0F31                     	;# 
   974  0F32                     	;# 
   975  0F33                     	;# 
   976  0F34                     	;# 
   977  0F35                     	;# 
   978  0F36                     	;# 
   979  0F37                     	;# 
   980  0FE4                     	;# 
   981  0FE5                     	;# 
   982  0FE6                     	;# 
   983  0FE7                     	;# 
   984  0FE8                     	;# 
   985  0FE9                     	;# 
   986  0FEA                     	;# 
   987  0FEB                     	;# 
   988  0FED                     	;# 
   989  0FEE                     	;# 
   990  0FEF                     	;# 
   991  0000                     	;# 
   992  0001                     	;# 
   993  0002                     	;# 
   994  0003                     	;# 
   995  0004                     	;# 
   996  0005                     	;# 
   997  0006                     	;# 
   998  0007                     	;# 
   999  0008                     	;# 
  1000  0009                     	;# 
  1001  000A                     	;# 
  1002  000B                     	;# 
  1003  000C                     	;# 
  1004  000D                     	;# 
  1005  000E                     	;# 
  1006  0010                     	;# 
  1007  0011                     	;# 
  1008  0012                     	;# 
  1009  0013                     	;# 
  1010  0014                     	;# 
  1011  0015                     	;# 
  1012  0016                     	;# 
  1013  0016                     	;# 
  1014  0017                     	;# 
  1015  0018                     	;# 
  1016  0019                     	;# 
  1017  001A                     	;# 
  1018  001A                     	;# 
  1019  001B                     	;# 
  1020  001B                     	;# 
  1021  001C                     	;# 
  1022  001D                     	;# 
  1023  001E                     	;# 
  1024  001F                     	;# 
  1025  008C                     	;# 
  1026  008D                     	;# 
  1027  008E                     	;# 
  1028  0090                     	;# 
  1029  0091                     	;# 
  1030  0092                     	;# 
  1031  0093                     	;# 
  1032  0094                     	;# 
  1033  0095                     	;# 
  1034  0096                     	;# 
  1035  0098                     	;# 
  1036  0099                     	;# 
  1037  009A                     	;# 
  1038  009B                     	;# 
  1039  009B                     	;# 
  1040  009C                     	;# 
  1041  009D                     	;# 
  1042  009E                     	;# 
  1043  009F                     	;# 
  1044  010C                     	;# 
  1045  010D                     	;# 
  1046  010E                     	;# 
  1047  0111                     	;# 
  1048  0112                     	;# 
  1049  0113                     	;# 
  1050  0114                     	;# 
  1051  0115                     	;# 
  1052  0116                     	;# 
  1053  0117                     	;# 
  1054  0118                     	;# 
  1055  0119                     	;# 
  1056  011C                     	;# 
  1057  018C                     	;# 
  1058  018D                     	;# 
  1059  018E                     	;# 
  1060  0191                     	;# 
  1061  0191                     	;# 
  1062  0192                     	;# 
  1063  0193                     	;# 
  1064  0193                     	;# 
  1065  0194                     	;# 
  1066  0195                     	;# 
  1067  0196                     	;# 
  1068  0197                     	;# 
  1069  0199                     	;# 
  1070  0199                     	;# 
  1071  0199                     	;# 
  1072  019A                     	;# 
  1073  019A                     	;# 
  1074  019A                     	;# 
  1075  019B                     	;# 
  1076  019B                     	;# 
  1077  019B                     	;# 
  1078  019B                     	;# 
  1079  019B                     	;# 
  1080  019C                     	;# 
  1081  019C                     	;# 
  1082  019C                     	;# 
  1083  019D                     	;# 
  1084  019D                     	;# 
  1085  019D                     	;# 
  1086  019E                     	;# 
  1087  019E                     	;# 
  1088  019E                     	;# 
  1089  019F                     	;# 
  1090  019F                     	;# 
  1091  019F                     	;# 
  1092  019F                     	;# 
  1093  019F                     	;# 
  1094  020C                     	;# 
  1095  020D                     	;# 
  1096  020E                     	;# 
  1097  0211                     	;# 
  1098  0211                     	;# 
  1099  0212                     	;# 
  1100  0212                     	;# 
  1101  0213                     	;# 
  1102  0213                     	;# 
  1103  0214                     	;# 
  1104  0214                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0215                     	;# 
  1108  0215                     	;# 
  1109  0216                     	;# 
  1110  0216                     	;# 
  1111  0217                     	;# 
  1112  0217                     	;# 
  1113  028C                     	;# 
  1114  028D                     	;# 
  1115  028E                     	;# 
  1116  0291                     	;# 
  1117  0291                     	;# 
  1118  0292                     	;# 
  1119  0293                     	;# 
  1120  0294                     	;# 
  1121  0298                     	;# 
  1122  0298                     	;# 
  1123  0299                     	;# 
  1124  029A                     	;# 
  1125  029B                     	;# 
  1126  029E                     	;# 
  1127  030C                     	;# 
  1128  030D                     	;# 
  1129  030E                     	;# 
  1130  038C                     	;# 
  1131  038D                     	;# 
  1132  038E                     	;# 
  1133  0391                     	;# 
  1134  0392                     	;# 
  1135  0393                     	;# 
  1136  0394                     	;# 
  1137  0395                     	;# 
  1138  0396                     	;# 
  1139  0397                     	;# 
  1140  0398                     	;# 
  1141  0399                     	;# 
  1142  040E                     	;# 
  1143  0413                     	;# 
  1144  0413                     	;# 
  1145  0414                     	;# 
  1146  0414                     	;# 
  1147  0415                     	;# 
  1148  0416                     	;# 
  1149  0417                     	;# 
  1150  0418                     	;# 
  1151  041A                     	;# 
  1152  041A                     	;# 
  1153  041B                     	;# 
  1154  041B                     	;# 
  1155  041C                     	;# 
  1156  041D                     	;# 
  1157  041E                     	;# 
  1158  041F                     	;# 
  1159  0493                     	;# 
  1160  0494                     	;# 
  1161  0495                     	;# 
  1162  0496                     	;# 
  1163  049A                     	;# 
  1164  049B                     	;# 
  1165  049C                     	;# 
  1166  049D                     	;# 
  1167  058C                     	;# 
  1168  058C                     	;# 
  1169  058D                     	;# 
  1170  058E                     	;# 
  1171  058E                     	;# 
  1172  058F                     	;# 
  1173  0590                     	;# 
  1174  0590                     	;# 
  1175  0591                     	;# 
  1176  0592                     	;# 
  1177  0592                     	;# 
  1178  0593                     	;# 
  1179  0594                     	;# 
  1180  0594                     	;# 
  1181  0595                     	;# 
  1182  0596                     	;# 
  1183  0596                     	;# 
  1184  0597                     	;# 
  1185  0598                     	;# 
  1186  0599                     	;# 
  1187  059A                     	;# 
  1188  059B                     	;# 
  1189  059B                     	;# 
  1190  059C                     	;# 
  1191  059D                     	;# 
  1192  060C                     	;# 
  1193  060C                     	;# 
  1194  060D                     	;# 
  1195  060E                     	;# 
  1196  060F                     	;# 
  1197  060F                     	;# 
  1198  0610                     	;# 
  1199  0611                     	;# 
  1200  0612                     	;# 
  1201  0613                     	;# 
  1202  0614                     	;# 
  1203  0617                     	;# 
  1204  0618                     	;# 
  1205  0619                     	;# 
  1206  061A                     	;# 
  1207  061B                     	;# 
  1208  061C                     	;# 
  1209  0691                     	;# 
  1210  0692                     	;# 
  1211  0693                     	;# 
  1212  0694                     	;# 
  1213  0695                     	;# 
  1214  0696                     	;# 
  1215  0697                     	;# 
  1216  0699                     	;# 
  1217  069A                     	;# 
  1218  0711                     	;# 
  1219  0712                     	;# 
  1220  0713                     	;# 
  1221  0714                     	;# 
  1222  0715                     	;# 
  1223  0718                     	;# 
  1224  0718                     	;# 
  1225  0719                     	;# 
  1226  071A                     	;# 
  1227  071A                     	;# 
  1228  071B                     	;# 
  1229  071C                     	;# 
  1230  071D                     	;# 
  1231  0791                     	;# 
  1232  0791                     	;# 
  1233  0792                     	;# 
  1234  0793                     	;# 
  1235  0793                     	;# 
  1236  0794                     	;# 
  1237  0795                     	;# 
  1238  0795                     	;# 
  1239  0796                     	;# 
  1240  0797                     	;# 
  1241  0797                     	;# 
  1242  0798                     	;# 
  1243  0799                     	;# 
  1244  079A                     	;# 
  1245  080C                     	;# 
  1246  080C                     	;# 
  1247  080D                     	;# 
  1248  080E                     	;# 
  1249  080E                     	;# 
  1250  080F                     	;# 
  1251  0810                     	;# 
  1252  0810                     	;# 
  1253  0811                     	;# 
  1254  0812                     	;# 
  1255  0812                     	;# 
  1256  0813                     	;# 
  1257  0814                     	;# 
  1258  0815                     	;# 
  1259  0816                     	;# 
  1260  0817                     	;# 
  1261  0818                     	;# 
  1262  0819                     	;# 
  1263  081A                     	;# 
  1264  081A                     	;# 
  1265  081B                     	;# 
  1266  081C                     	;# 
  1267  081C                     	;# 
  1268  081D                     	;# 
  1269  088C                     	;# 
  1270  088D                     	;# 
  1271  088E                     	;# 
  1272  088F                     	;# 
  1273  088F                     	;# 
  1274  0890                     	;# 
  1275  0891                     	;# 
  1276  0892                     	;# 
  1277  0893                     	;# 
  1278  0893                     	;# 
  1279  0894                     	;# 
  1280  0895                     	;# 
  1281  0896                     	;# 
  1282  0897                     	;# 
  1283  0897                     	;# 
  1284  0898                     	;# 
  1285  0899                     	;# 
  1286  0D8C                     	;# 
  1287  0D8C                     	;# 
  1288  0D8D                     	;# 
  1289  0D8E                     	;# 
  1290  0D8F                     	;# 
  1291  0D8F                     	;# 
  1292  0D90                     	;# 
  1293  0D91                     	;# 
  1294  0D92                     	;# 
  1295  0D92                     	;# 
  1296  0D93                     	;# 
  1297  0D94                     	;# 
  1298  0D95                     	;# 
  1299  0D95                     	;# 
  1300  0D96                     	;# 
  1301  0D97                     	;# 
  1302  0D98                     	;# 
  1303  0D99                     	;# 
  1304  0D9A                     	;# 
  1305  0D9B                     	;# 
  1306  0D9C                     	;# 
  1307  0D9D                     	;# 
  1308  0D9E                     	;# 
  1309  0D9E                     	;# 
  1310  0D9F                     	;# 
  1311  0DA0                     	;# 
  1312  0DA1                     	;# 
  1313  0DA1                     	;# 
  1314  0DA2                     	;# 
  1315  0DA3                     	;# 
  1316  0DA4                     	;# 
  1317  0DA4                     	;# 
  1318  0DA5                     	;# 
  1319  0DA6                     	;# 
  1320  0DA7                     	;# 
  1321  0DA7                     	;# 
  1322  0DA8                     	;# 
  1323  0DA9                     	;# 
  1324  0DAA                     	;# 
  1325  0DAB                     	;# 
  1326  0DAC                     	;# 
  1327  0DAD                     	;# 
  1328  0DAE                     	;# 
  1329  0DAF                     	;# 
  1330  0E0F                     	;# 
  1331  0E10                     	;# 
  1332  0E11                     	;# 
  1333  0E12                     	;# 
  1334  0E13                     	;# 
  1335  0E14                     	;# 
  1336  0E15                     	;# 
  1337  0E16                     	;# 
  1338  0E17                     	;# 
  1339  0E18                     	;# 
  1340  0E19                     	;# 
  1341  0E1A                     	;# 
  1342  0E1B                     	;# 
  1343  0E1C                     	;# 
  1344  0E1D                     	;# 
  1345  0E1E                     	;# 
  1346  0E1F                     	;# 
  1347  0E20                     	;# 
  1348  0E21                     	;# 
  1349  0E22                     	;# 
  1350  0E23                     	;# 
  1351  0E24                     	;# 
  1352  0E25                     	;# 
  1353  0E26                     	;# 
  1354  0E27                     	;# 
  1355  0E28                     	;# 
  1356  0E29                     	;# 
  1357  0E2A                     	;# 
  1358  0E2B                     	;# 
  1359  0E2C                     	;# 
  1360  0E2D                     	;# 
  1361  0E2E                     	;# 
  1362  0E90                     	;# 
  1363  0E91                     	;# 
  1364  0E92                     	;# 
  1365  0E94                     	;# 
  1366  0E95                     	;# 
  1367  0E9C                     	;# 
  1368  0E9D                     	;# 
  1369  0E9E                     	;# 
  1370  0E9F                     	;# 
  1371  0EA0                     	;# 
  1372  0EA1                     	;# 
  1373  0EA2                     	;# 
  1374  0EA3                     	;# 
  1375  0EA4                     	;# 
  1376  0EA5                     	;# 
  1377  0EA6                     	;# 
  1378  0EA7                     	;# 
  1379  0F0F                     	;# 
  1380  0F10                     	;# 
  1381  0F11                     	;# 
  1382  0F12                     	;# 
  1383  0F13                     	;# 
  1384  0F14                     	;# 
  1385  0F15                     	;# 
  1386  0F16                     	;# 
  1387  0F17                     	;# 
  1388  0F18                     	;# 
  1389  0F19                     	;# 
  1390  0F1A                     	;# 
  1391  0F1B                     	;# 
  1392  0F1C                     	;# 
  1393  0F1D                     	;# 
  1394  0F1E                     	;# 
  1395  0F1F                     	;# 
  1396  0F20                     	;# 
  1397  0F21                     	;# 
  1398  0F22                     	;# 
  1399  0F23                     	;# 
  1400  0F24                     	;# 
  1401  0F25                     	;# 
  1402  0F26                     	;# 
  1403  0F27                     	;# 
  1404  0F28                     	;# 
  1405  0F29                     	;# 
  1406  0F2A                     	;# 
  1407  0F2B                     	;# 
  1408  0F2C                     	;# 
  1409  0F2D                     	;# 
  1410  0F2E                     	;# 
  1411  0F2F                     	;# 
  1412  0F30                     	;# 
  1413  0F31                     	;# 
  1414  0F32                     	;# 
  1415  0F33                     	;# 
  1416  0F34                     	;# 
  1417  0F35                     	;# 
  1418  0F36                     	;# 
  1419  0F37                     	;# 
  1420  0FE4                     	;# 
  1421  0FE5                     	;# 
  1422  0FE6                     	;# 
  1423  0FE7                     	;# 
  1424  0FE8                     	;# 
  1425  0FE9                     	;# 
  1426  0FEA                     	;# 
  1427  0FEB                     	;# 
  1428  0FED                     	;# 
  1429  0FEE                     	;# 
  1430  0FEF                     	;# 
  1431  0000                     	;# 
  1432  0001                     	;# 
  1433  0002                     	;# 
  1434  0003                     	;# 
  1435  0004                     	;# 
  1436  0005                     	;# 
  1437  0006                     	;# 
  1438  0007                     	;# 
  1439  0008                     	;# 
  1440  0009                     	;# 
  1441  000A                     	;# 
  1442  000B                     	;# 
  1443  000C                     	;# 
  1444  000D                     	;# 
  1445  000E                     	;# 
  1446  0010                     	;# 
  1447  0011                     	;# 
  1448  0012                     	;# 
  1449  0013                     	;# 
  1450  0014                     	;# 
  1451  0015                     	;# 
  1452  0016                     	;# 
  1453  0016                     	;# 
  1454  0017                     	;# 
  1455  0018                     	;# 
  1456  0019                     	;# 
  1457  001A                     	;# 
  1458  001A                     	;# 
  1459  001B                     	;# 
  1460  001B                     	;# 
  1461  001C                     	;# 
  1462  001D                     	;# 
  1463  001E                     	;# 
  1464  001F                     	;# 
  1465  008C                     	;# 
  1466  008D                     	;# 
  1467  008E                     	;# 
  1468  0090                     	;# 
  1469  0091                     	;# 
  1470  0092                     	;# 
  1471  0093                     	;# 
  1472  0094                     	;# 
  1473  0095                     	;# 
  1474  0096                     	;# 
  1475  0098                     	;# 
  1476  0099                     	;# 
  1477  009A                     	;# 
  1478  009B                     	;# 
  1479  009B                     	;# 
  1480  009C                     	;# 
  1481  009D                     	;# 
  1482  009E                     	;# 
  1483  009F                     	;# 
  1484  010C                     	;# 
  1485  010D                     	;# 
  1486  010E                     	;# 
  1487  0111                     	;# 
  1488  0112                     	;# 
  1489  0113                     	;# 
  1490  0114                     	;# 
  1491  0115                     	;# 
  1492  0116                     	;# 
  1493  0117                     	;# 
  1494  0118                     	;# 
  1495  0119                     	;# 
  1496  011C                     	;# 
  1497  018C                     	;# 
  1498  018D                     	;# 
  1499  018E                     	;# 
  1500  0191                     	;# 
  1501  0191                     	;# 
  1502  0192                     	;# 
  1503  0193                     	;# 
  1504  0193                     	;# 
  1505  0194                     	;# 
  1506  0195                     	;# 
  1507  0196                     	;# 
  1508  0197                     	;# 
  1509  0199                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019A                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019C                     	;# 
  1521  019C                     	;# 
  1522  019C                     	;# 
  1523  019D                     	;# 
  1524  019D                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019E                     	;# 
  1528  019E                     	;# 
  1529  019F                     	;# 
  1530  019F                     	;# 
  1531  019F                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  020C                     	;# 
  1535  020D                     	;# 
  1536  020E                     	;# 
  1537  0211                     	;# 
  1538  0211                     	;# 
  1539  0212                     	;# 
  1540  0212                     	;# 
  1541  0213                     	;# 
  1542  0213                     	;# 
  1543  0214                     	;# 
  1544  0214                     	;# 
  1545  0215                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  028C                     	;# 
  1554  028D                     	;# 
  1555  028E                     	;# 
  1556  0291                     	;# 
  1557  0291                     	;# 
  1558  0292                     	;# 
  1559  0293                     	;# 
  1560  0294                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029E                     	;# 
  1567  030C                     	;# 
  1568  030D                     	;# 
  1569  030E                     	;# 
  1570  038C                     	;# 
  1571  038D                     	;# 
  1572  038E                     	;# 
  1573  0391                     	;# 
  1574  0392                     	;# 
  1575  0393                     	;# 
  1576  0394                     	;# 
  1577  0395                     	;# 
  1578  0396                     	;# 
  1579  0397                     	;# 
  1580  0398                     	;# 
  1581  0399                     	;# 
  1582  040E                     	;# 
  1583  0413                     	;# 
  1584  0413                     	;# 
  1585  0414                     	;# 
  1586  0414                     	;# 
  1587  0415                     	;# 
  1588  0416                     	;# 
  1589  0417                     	;# 
  1590  0418                     	;# 
  1591  041A                     	;# 
  1592  041A                     	;# 
  1593  041B                     	;# 
  1594  041B                     	;# 
  1595  041C                     	;# 
  1596  041D                     	;# 
  1597  041E                     	;# 
  1598  041F                     	;# 
  1599  0493                     	;# 
  1600  0494                     	;# 
  1601  0495                     	;# 
  1602  0496                     	;# 
  1603  049A                     	;# 
  1604  049B                     	;# 
  1605  049C                     	;# 
  1606  049D                     	;# 
  1607  058C                     	;# 
  1608  058C                     	;# 
  1609  058D                     	;# 
  1610  058E                     	;# 
  1611  058E                     	;# 
  1612  058F                     	;# 
  1613  0590                     	;# 
  1614  0590                     	;# 
  1615  0591                     	;# 
  1616  0592                     	;# 
  1617  0592                     	;# 
  1618  0593                     	;# 
  1619  0594                     	;# 
  1620  0594                     	;# 
  1621  0595                     	;# 
  1622  0596                     	;# 
  1623  0596                     	;# 
  1624  0597                     	;# 
  1625  0598                     	;# 
  1626  0599                     	;# 
  1627  059A                     	;# 
  1628  059B                     	;# 
  1629  059B                     	;# 
  1630  059C                     	;# 
  1631  059D                     	;# 
  1632  060C                     	;# 
  1633  060C                     	;# 
  1634  060D                     	;# 
  1635  060E                     	;# 
  1636  060F                     	;# 
  1637  060F                     	;# 
  1638  0610                     	;# 
  1639  0611                     	;# 
  1640  0612                     	;# 
  1641  0613                     	;# 
  1642  0614                     	;# 
  1643  0617                     	;# 
  1644  0618                     	;# 
  1645  0619                     	;# 
  1646  061A                     	;# 
  1647  061B                     	;# 
  1648  061C                     	;# 
  1649  0691                     	;# 
  1650  0692                     	;# 
  1651  0693                     	;# 
  1652  0694                     	;# 
  1653  0695                     	;# 
  1654  0696                     	;# 
  1655  0697                     	;# 
  1656  0699                     	;# 
  1657  069A                     	;# 
  1658  0711                     	;# 
  1659  0712                     	;# 
  1660  0713                     	;# 
  1661  0714                     	;# 
  1662  0715                     	;# 
  1663  0718                     	;# 
  1664  0718                     	;# 
  1665  0719                     	;# 
  1666  071A                     	;# 
  1667  071A                     	;# 
  1668  071B                     	;# 
  1669  071C                     	;# 
  1670  071D                     	;# 
  1671  0791                     	;# 
  1672  0791                     	;# 
  1673  0792                     	;# 
  1674  0793                     	;# 
  1675  0793                     	;# 
  1676  0794                     	;# 
  1677  0795                     	;# 
  1678  0795                     	;# 
  1679  0796                     	;# 
  1680  0797                     	;# 
  1681  0797                     	;# 
  1682  0798                     	;# 
  1683  0799                     	;# 
  1684  079A                     	;# 
  1685  080C                     	;# 
  1686  080C                     	;# 
  1687  080D                     	;# 
  1688  080E                     	;# 
  1689  080E                     	;# 
  1690  080F                     	;# 
  1691  0810                     	;# 
  1692  0810                     	;# 
  1693  0811                     	;# 
  1694  0812                     	;# 
  1695  0812                     	;# 
  1696  0813                     	;# 
  1697  0814                     	;# 
  1698  0815                     	;# 
  1699  0816                     	;# 
  1700  0817                     	;# 
  1701  0818                     	;# 
  1702  0819                     	;# 
  1703  081A                     	;# 
  1704  081A                     	;# 
  1705  081B                     	;# 
  1706  081C                     	;# 
  1707  081C                     	;# 
  1708  081D                     	;# 
  1709  088C                     	;# 
  1710  088D                     	;# 
  1711  088E                     	;# 
  1712  088F                     	;# 
  1713  088F                     	;# 
  1714  0890                     	;# 
  1715  0891                     	;# 
  1716  0892                     	;# 
  1717  0893                     	;# 
  1718  0893                     	;# 
  1719  0894                     	;# 
  1720  0895                     	;# 
  1721  0896                     	;# 
  1722  0897                     	;# 
  1723  0897                     	;# 
  1724  0898                     	;# 
  1725  0899                     	;# 
  1726  0D8C                     	;# 
  1727  0D8C                     	;# 
  1728  0D8D                     	;# 
  1729  0D8E                     	;# 
  1730  0D8F                     	;# 
  1731  0D8F                     	;# 
  1732  0D90                     	;# 
  1733  0D91                     	;# 
  1734  0D92                     	;# 
  1735  0D92                     	;# 
  1736  0D93                     	;# 
  1737  0D94                     	;# 
  1738  0D95                     	;# 
  1739  0D95                     	;# 
  1740  0D96                     	;# 
  1741  0D97                     	;# 
  1742  0D98                     	;# 
  1743  0D99                     	;# 
  1744  0D9A                     	;# 
  1745  0D9B                     	;# 
  1746  0D9C                     	;# 
  1747  0D9D                     	;# 
  1748  0D9E                     	;# 
  1749  0D9E                     	;# 
  1750  0D9F                     	;# 
  1751  0DA0                     	;# 
  1752  0DA1                     	;# 
  1753  0DA1                     	;# 
  1754  0DA2                     	;# 
  1755  0DA3                     	;# 
  1756  0DA4                     	;# 
  1757  0DA4                     	;# 
  1758  0DA5                     	;# 
  1759  0DA6                     	;# 
  1760  0DA7                     	;# 
  1761  0DA7                     	;# 
  1762  0DA8                     	;# 
  1763  0DA9                     	;# 
  1764  0DAA                     	;# 
  1765  0DAB                     	;# 
  1766  0DAC                     	;# 
  1767  0DAD                     	;# 
  1768  0DAE                     	;# 
  1769  0DAF                     	;# 
  1770  0E0F                     	;# 
  1771  0E10                     	;# 
  1772  0E11                     	;# 
  1773  0E12                     	;# 
  1774  0E13                     	;# 
  1775  0E14                     	;# 
  1776  0E15                     	;# 
  1777  0E16                     	;# 
  1778  0E17                     	;# 
  1779  0E18                     	;# 
  1780  0E19                     	;# 
  1781  0E1A                     	;# 
  1782  0E1B                     	;# 
  1783  0E1C                     	;# 
  1784  0E1D                     	;# 
  1785  0E1E                     	;# 
  1786  0E1F                     	;# 
  1787  0E20                     	;# 
  1788  0E21                     	;# 
  1789  0E22                     	;# 
  1790  0E23                     	;# 
  1791  0E24                     	;# 
  1792  0E25                     	;# 
  1793  0E26                     	;# 
  1794  0E27                     	;# 
  1795  0E28                     	;# 
  1796  0E29                     	;# 
  1797  0E2A                     	;# 
  1798  0E2B                     	;# 
  1799  0E2C                     	;# 
  1800  0E2D                     	;# 
  1801  0E2E                     	;# 
  1802  0E90                     	;# 
  1803  0E91                     	;# 
  1804  0E92                     	;# 
  1805  0E94                     	;# 
  1806  0E95                     	;# 
  1807  0E9C                     	;# 
  1808  0E9D                     	;# 
  1809  0E9E                     	;# 
  1810  0E9F                     	;# 
  1811  0EA0                     	;# 
  1812  0EA1                     	;# 
  1813  0EA2                     	;# 
  1814  0EA3                     	;# 
  1815  0EA4                     	;# 
  1816  0EA5                     	;# 
  1817  0EA6                     	;# 
  1818  0EA7                     	;# 
  1819  0F0F                     	;# 
  1820  0F10                     	;# 
  1821  0F11                     	;# 
  1822  0F12                     	;# 
  1823  0F13                     	;# 
  1824  0F14                     	;# 
  1825  0F15                     	;# 
  1826  0F16                     	;# 
  1827  0F17                     	;# 
  1828  0F18                     	;# 
  1829  0F19                     	;# 
  1830  0F1A                     	;# 
  1831  0F1B                     	;# 
  1832  0F1C                     	;# 
  1833  0F1D                     	;# 
  1834  0F1E                     	;# 
  1835  0F1F                     	;# 
  1836  0F20                     	;# 
  1837  0F21                     	;# 
  1838  0F22                     	;# 
  1839  0F23                     	;# 
  1840  0F24                     	;# 
  1841  0F25                     	;# 
  1842  0F26                     	;# 
  1843  0F27                     	;# 
  1844  0F28                     	;# 
  1845  0F29                     	;# 
  1846  0F2A                     	;# 
  1847  0F2B                     	;# 
  1848  0F2C                     	;# 
  1849  0F2D                     	;# 
  1850  0F2E                     	;# 
  1851  0F2F                     	;# 
  1852  0F30                     	;# 
  1853  0F31                     	;# 
  1854  0F32                     	;# 
  1855  0F33                     	;# 
  1856  0F34                     	;# 
  1857  0F35                     	;# 
  1858  0F36                     	;# 
  1859  0F37                     	;# 
  1860  0FE4                     	;# 
  1861  0FE5                     	;# 
  1862  0FE6                     	;# 
  1863  0FE7                     	;# 
  1864  0FE8                     	;# 
  1865  0FE9                     	;# 
  1866  0FEA                     	;# 
  1867  0FEB                     	;# 
  1868  0FED                     	;# 
  1869  0FEE                     	;# 
  1870  0FEF                     	;# 
  1871  0000                     	;# 
  1872  0001                     	;# 
  1873  0002                     	;# 
  1874  0003                     	;# 
  1875  0004                     	;# 
  1876  0005                     	;# 
  1877  0006                     	;# 
  1878  0007                     	;# 
  1879  0008                     	;# 
  1880  0009                     	;# 
  1881  000A                     	;# 
  1882  000B                     	;# 
  1883  000C                     	;# 
  1884  000D                     	;# 
  1885  000E                     	;# 
  1886  0010                     	;# 
  1887  0011                     	;# 
  1888  0012                     	;# 
  1889  0013                     	;# 
  1890  0014                     	;# 
  1891  0015                     	;# 
  1892  0016                     	;# 
  1893  0016                     	;# 
  1894  0017                     	;# 
  1895  0018                     	;# 
  1896  0019                     	;# 
  1897  001A                     	;# 
  1898  001A                     	;# 
  1899  001B                     	;# 
  1900  001B                     	;# 
  1901  001C                     	;# 
  1902  001D                     	;# 
  1903  001E                     	;# 
  1904  001F                     	;# 
  1905  008C                     	;# 
  1906  008D                     	;# 
  1907  008E                     	;# 
  1908  0090                     	;# 
  1909  0091                     	;# 
  1910  0092                     	;# 
  1911  0093                     	;# 
  1912  0094                     	;# 
  1913  0095                     	;# 
  1914  0096                     	;# 
  1915  0098                     	;# 
  1916  0099                     	;# 
  1917  009A                     	;# 
  1918  009B                     	;# 
  1919  009B                     	;# 
  1920  009C                     	;# 
  1921  009D                     	;# 
  1922  009E                     	;# 
  1923  009F                     	;# 
  1924  010C                     	;# 
  1925  010D                     	;# 
  1926  010E                     	;# 
  1927  0111                     	;# 
  1928  0112                     	;# 
  1929  0113                     	;# 
  1930  0114                     	;# 
  1931  0115                     	;# 
  1932  0116                     	;# 
  1933  0117                     	;# 
  1934  0118                     	;# 
  1935  0119                     	;# 
  1936  011C                     	;# 
  1937  018C                     	;# 
  1938  018D                     	;# 
  1939  018E                     	;# 
  1940  0191                     	;# 
  1941  0191                     	;# 
  1942  0192                     	;# 
  1943  0193                     	;# 
  1944  0193                     	;# 
  1945  0194                     	;# 
  1946  0195                     	;# 
  1947  0196                     	;# 
  1948  0197                     	;# 
  1949  0199                     	;# 
  1950  0199                     	;# 
  1951  0199                     	;# 
  1952  019A                     	;# 
  1953  019A                     	;# 
  1954  019A                     	;# 
  1955  019B                     	;# 
  1956  019B                     	;# 
  1957  019B                     	;# 
  1958  019B                     	;# 
  1959  019B                     	;# 
  1960  019C                     	;# 
  1961  019C                     	;# 
  1962  019C                     	;# 
  1963  019D                     	;# 
  1964  019D                     	;# 
  1965  019D                     	;# 
  1966  019E                     	;# 
  1967  019E                     	;# 
  1968  019E                     	;# 
  1969  019F                     	;# 
  1970  019F                     	;# 
  1971  019F                     	;# 
  1972  019F                     	;# 
  1973  019F                     	;# 
  1974  020C                     	;# 
  1975  020D                     	;# 
  1976  020E                     	;# 
  1977  0211                     	;# 
  1978  0211                     	;# 
  1979  0212                     	;# 
  1980  0212                     	;# 
  1981  0213                     	;# 
  1982  0213                     	;# 
  1983  0214                     	;# 
  1984  0214                     	;# 
  1985  0215                     	;# 
  1986  0215                     	;# 
  1987  0215                     	;# 
  1988  0215                     	;# 
  1989  0216                     	;# 
  1990  0216                     	;# 
  1991  0217                     	;# 
  1992  0217                     	;# 
  1993  028C                     	;# 
  1994  028D                     	;# 
  1995  028E                     	;# 
  1996  0291                     	;# 
  1997  0291                     	;# 
  1998  0292                     	;# 
  1999  0293                     	;# 
  2000  0294                     	;# 
  2001  0298                     	;# 
  2002  0298                     	;# 
  2003  0299                     	;# 
  2004  029A                     	;# 
  2005  029B                     	;# 
  2006  029E                     	;# 
  2007  030C                     	;# 
  2008  030D                     	;# 
  2009  030E                     	;# 
  2010  038C                     	;# 
  2011  038D                     	;# 
  2012  038E                     	;# 
  2013  0391                     	;# 
  2014  0392                     	;# 
  2015  0393                     	;# 
  2016  0394                     	;# 
  2017  0395                     	;# 
  2018  0396                     	;# 
  2019  0397                     	;# 
  2020  0398                     	;# 
  2021  0399                     	;# 
  2022  040E                     	;# 
  2023  0413                     	;# 
  2024  0413                     	;# 
  2025  0414                     	;# 
  2026  0414                     	;# 
  2027  0415                     	;# 
  2028  0416                     	;# 
  2029  0417                     	;# 
  2030  0418                     	;# 
  2031  041A                     	;# 
  2032  041A                     	;# 
  2033  041B                     	;# 
  2034  041B                     	;# 
  2035  041C                     	;# 
  2036  041D                     	;# 
  2037  041E                     	;# 
  2038  041F                     	;# 
  2039  0493                     	;# 
  2040  0494                     	;# 
  2041  0495                     	;# 
  2042  0496                     	;# 
  2043  049A                     	;# 
  2044  049B                     	;# 
  2045  049C                     	;# 
  2046  049D                     	;# 
  2047  058C                     	;# 
  2048  058C                     	;# 
  2049  058D                     	;# 
  2050  058E                     	;# 
  2051  058E                     	;# 
  2052  058F                     	;# 
  2053  0590                     	;# 
  2054  0590                     	;# 
  2055  0591                     	;# 
  2056  0592                     	;# 
  2057  0592                     	;# 
  2058  0593                     	;# 
  2059  0594                     	;# 
  2060  0594                     	;# 
  2061  0595                     	;# 
  2062  0596                     	;# 
  2063  0596                     	;# 
  2064  0597                     	;# 
  2065  0598                     	;# 
  2066  0599                     	;# 
  2067  059A                     	;# 
  2068  059B                     	;# 
  2069  059B                     	;# 
  2070  059C                     	;# 
  2071  059D                     	;# 
  2072  060C                     	;# 
  2073  060C                     	;# 
  2074  060D                     	;# 
  2075  060E                     	;# 
  2076  060F                     	;# 
  2077  060F                     	;# 
  2078  0610                     	;# 
  2079  0611                     	;# 
  2080  0612                     	;# 
  2081  0613                     	;# 
  2082  0614                     	;# 
  2083  0617                     	;# 
  2084  0618                     	;# 
  2085  0619                     	;# 
  2086  061A                     	;# 
  2087  061B                     	;# 
  2088  061C                     	;# 
  2089  0691                     	;# 
  2090  0692                     	;# 
  2091  0693                     	;# 
  2092  0694                     	;# 
  2093  0695                     	;# 
  2094  0696                     	;# 
  2095  0697                     	;# 
  2096  0699                     	;# 
  2097  069A                     	;# 
  2098  0711                     	;# 
  2099  0712                     	;# 
  2100  0713                     	;# 
  2101  0714                     	;# 
  2102  0715                     	;# 
  2103  0718                     	;# 
  2104  0718                     	;# 
  2105  0719                     	;# 
  2106  071A                     	;# 
  2107  071A                     	;# 
  2108  071B                     	;# 
  2109  071C                     	;# 
  2110  071D                     	;# 
  2111  0791                     	;# 
  2112  0791                     	;# 
  2113  0792                     	;# 
  2114  0793                     	;# 
  2115  0793                     	;# 
  2116  0794                     	;# 
  2117  0795                     	;# 
  2118  0795                     	;# 
  2119  0796                     	;# 
  2120  0797                     	;# 
  2121  0797                     	;# 
  2122  0798                     	;# 
  2123  0799                     	;# 
  2124  079A                     	;# 
  2125  080C                     	;# 
  2126  080C                     	;# 
  2127  080D                     	;# 
  2128  080E                     	;# 
  2129  080E                     	;# 
  2130  080F                     	;# 
  2131  0810                     	;# 
  2132  0810                     	;# 
  2133  0811                     	;# 
  2134  0812                     	;# 
  2135  0812                     	;# 
  2136  0813                     	;# 
  2137  0814                     	;# 
  2138  0815                     	;# 
  2139  0816                     	;# 
  2140  0817                     	;# 
  2141  0818                     	;# 
  2142  0819                     	;# 
  2143  081A                     	;# 
  2144  081A                     	;# 
  2145  081B                     	;# 
  2146  081C                     	;# 
  2147  081C                     	;# 
  2148  081D                     	;# 
  2149  088C                     	;# 
  2150  088D                     	;# 
  2151  088E                     	;# 
  2152  088F                     	;# 
  2153  088F                     	;# 
  2154  0890                     	;# 
  2155  0891                     	;# 
  2156  0892                     	;# 
  2157  0893                     	;# 
  2158  0893                     	;# 
  2159  0894                     	;# 
  2160  0895                     	;# 
  2161  0896                     	;# 
  2162  0897                     	;# 
  2163  0897                     	;# 
  2164  0898                     	;# 
  2165  0899                     	;# 
  2166  0D8C                     	;# 
  2167  0D8C                     	;# 
  2168  0D8D                     	;# 
  2169  0D8E                     	;# 
  2170  0D8F                     	;# 
  2171  0D8F                     	;# 
  2172  0D90                     	;# 
  2173  0D91                     	;# 
  2174  0D92                     	;# 
  2175  0D92                     	;# 
  2176  0D93                     	;# 
  2177  0D94                     	;# 
  2178  0D95                     	;# 
  2179  0D95                     	;# 
  2180  0D96                     	;# 
  2181  0D97                     	;# 
  2182  0D98                     	;# 
  2183  0D99                     	;# 
  2184  0D9A                     	;# 
  2185  0D9B                     	;# 
  2186  0D9C                     	;# 
  2187  0D9D                     	;# 
  2188  0D9E                     	;# 
  2189  0D9E                     	;# 
  2190  0D9F                     	;# 
  2191  0DA0                     	;# 
  2192  0DA1                     	;# 
  2193  0DA1                     	;# 
  2194  0DA2                     	;# 
  2195  0DA3                     	;# 
  2196  0DA4                     	;# 
  2197  0DA4                     	;# 
  2198  0DA5                     	;# 
  2199  0DA6                     	;# 
  2200  0DA7                     	;# 
  2201  0DA7                     	;# 
  2202  0DA8                     	;# 
  2203  0DA9                     	;# 
  2204  0DAA                     	;# 
  2205  0DAB                     	;# 
  2206  0DAC                     	;# 
  2207  0DAD                     	;# 
  2208  0DAE                     	;# 
  2209  0DAF                     	;# 
  2210  0E0F                     	;# 
  2211  0E10                     	;# 
  2212  0E11                     	;# 
  2213  0E12                     	;# 
  2214  0E13                     	;# 
  2215  0E14                     	;# 
  2216  0E15                     	;# 
  2217  0E16                     	;# 
  2218  0E17                     	;# 
  2219  0E18                     	;# 
  2220  0E19                     	;# 
  2221  0E1A                     	;# 
  2222  0E1B                     	;# 
  2223  0E1C                     	;# 
  2224  0E1D                     	;# 
  2225  0E1E                     	;# 
  2226  0E1F                     	;# 
  2227  0E20                     	;# 
  2228  0E21                     	;# 
  2229  0E22                     	;# 
  2230  0E23                     	;# 
  2231  0E24                     	;# 
  2232  0E25                     	;# 
  2233  0E26                     	;# 
  2234  0E27                     	;# 
  2235  0E28                     	;# 
  2236  0E29                     	;# 
  2237  0E2A                     	;# 
  2238  0E2B                     	;# 
  2239  0E2C                     	;# 
  2240  0E2D                     	;# 
  2241  0E2E                     	;# 
  2242  0E90                     	;# 
  2243  0E91                     	;# 
  2244  0E92                     	;# 
  2245  0E94                     	;# 
  2246  0E95                     	;# 
  2247  0E9C                     	;# 
  2248  0E9D                     	;# 
  2249  0E9E                     	;# 
  2250  0E9F                     	;# 
  2251  0EA0                     	;# 
  2252  0EA1                     	;# 
  2253  0EA2                     	;# 
  2254  0EA3                     	;# 
  2255  0EA4                     	;# 
  2256  0EA5                     	;# 
  2257  0EA6                     	;# 
  2258  0EA7                     	;# 
  2259  0F0F                     	;# 
  2260  0F10                     	;# 
  2261  0F11                     	;# 
  2262  0F12                     	;# 
  2263  0F13                     	;# 
  2264  0F14                     	;# 
  2265  0F15                     	;# 
  2266  0F16                     	;# 
  2267  0F17                     	;# 
  2268  0F18                     	;# 
  2269  0F19                     	;# 
  2270  0F1A                     	;# 
  2271  0F1B                     	;# 
  2272  0F1C                     	;# 
  2273  0F1D                     	;# 
  2274  0F1E                     	;# 
  2275  0F1F                     	;# 
  2276  0F20                     	;# 
  2277  0F21                     	;# 
  2278  0F22                     	;# 
  2279  0F23                     	;# 
  2280  0F24                     	;# 
  2281  0F25                     	;# 
  2282  0F26                     	;# 
  2283  0F27                     	;# 
  2284  0F28                     	;# 
  2285  0F29                     	;# 
  2286  0F2A                     	;# 
  2287  0F2B                     	;# 
  2288  0F2C                     	;# 
  2289  0F2D                     	;# 
  2290  0F2E                     	;# 
  2291  0F2F                     	;# 
  2292  0F30                     	;# 
  2293  0F31                     	;# 
  2294  0F32                     	;# 
  2295  0F33                     	;# 
  2296  0F34                     	;# 
  2297  0F35                     	;# 
  2298  0F36                     	;# 
  2299  0F37                     	;# 
  2300  0FE4                     	;# 
  2301  0FE5                     	;# 
  2302  0FE6                     	;# 
  2303  0FE7                     	;# 
  2304  0FE8                     	;# 
  2305  0FE9                     	;# 
  2306  0FEA                     	;# 
  2307  0FEB                     	;# 
  2308  0FED                     	;# 
  2309  0FEE                     	;# 
  2310  0FEF                     	;# 
  2311  0000                     	;# 
  2312  0001                     	;# 
  2313  0002                     	;# 
  2314  0003                     	;# 
  2315  0004                     	;# 
  2316  0005                     	;# 
  2317  0006                     	;# 
  2318  0007                     	;# 
  2319  0008                     	;# 
  2320  0009                     	;# 
  2321  000A                     	;# 
  2322  000B                     	;# 
  2323  000C                     	;# 
  2324  000D                     	;# 
  2325  000E                     	;# 
  2326  0010                     	;# 
  2327  0011                     	;# 
  2328  0012                     	;# 
  2329  0013                     	;# 
  2330  0014                     	;# 
  2331  0015                     	;# 
  2332  0016                     	;# 
  2333  0016                     	;# 
  2334  0017                     	;# 
  2335  0018                     	;# 
  2336  0019                     	;# 
  2337  001A                     	;# 
  2338  001A                     	;# 
  2339  001B                     	;# 
  2340  001B                     	;# 
  2341  001C                     	;# 
  2342  001D                     	;# 
  2343  001E                     	;# 
  2344  001F                     	;# 
  2345  008C                     	;# 
  2346  008D                     	;# 
  2347  008E                     	;# 
  2348  0090                     	;# 
  2349  0091                     	;# 
  2350  0092                     	;# 
  2351  0093                     	;# 
  2352  0094                     	;# 
  2353  0095                     	;# 
  2354  0096                     	;# 
  2355  0098                     	;# 
  2356  0099                     	;# 
  2357  009A                     	;# 
  2358  009B                     	;# 
  2359  009B                     	;# 
  2360  009C                     	;# 
  2361  009D                     	;# 
  2362  009E                     	;# 
  2363  009F                     	;# 
  2364  010C                     	;# 
  2365  010D                     	;# 
  2366  010E                     	;# 
  2367  0111                     	;# 
  2368  0112                     	;# 
  2369  0113                     	;# 
  2370  0114                     	;# 
  2371  0115                     	;# 
  2372  0116                     	;# 
  2373  0117                     	;# 
  2374  0118                     	;# 
  2375  0119                     	;# 
  2376  011C                     	;# 
  2377  018C                     	;# 
  2378  018D                     	;# 
  2379  018E                     	;# 
  2380  0191                     	;# 
  2381  0191                     	;# 
  2382  0192                     	;# 
  2383  0193                     	;# 
  2384  0193                     	;# 
  2385  0194                     	;# 
  2386  0195                     	;# 
  2387  0196                     	;# 
  2388  0197                     	;# 
  2389  0199                     	;# 
  2390  0199                     	;# 
  2391  0199                     	;# 
  2392  019A                     	;# 
  2393  019A                     	;# 
  2394  019A                     	;# 
  2395  019B                     	;# 
  2396  019B                     	;# 
  2397  019B                     	;# 
  2398  019B                     	;# 
  2399  019B                     	;# 
  2400  019C                     	;# 
  2401  019C                     	;# 
  2402  019C                     	;# 
  2403  019D                     	;# 
  2404  019D                     	;# 
  2405  019D                     	;# 
  2406  019E                     	;# 
  2407  019E                     	;# 
  2408  019E                     	;# 
  2409  019F                     	;# 
  2410  019F                     	;# 
  2411  019F                     	;# 
  2412  019F                     	;# 
  2413  019F                     	;# 
  2414  020C                     	;# 
  2415  020D                     	;# 
  2416  020E                     	;# 
  2417  0211                     	;# 
  2418  0211                     	;# 
  2419  0212                     	;# 
  2420  0212                     	;# 
  2421  0213                     	;# 
  2422  0213                     	;# 
  2423  0214                     	;# 
  2424  0214                     	;# 
  2425  0215                     	;# 
  2426  0215                     	;# 
  2427  0215                     	;# 
  2428  0215                     	;# 
  2429  0216                     	;# 
  2430  0216                     	;# 
  2431  0217                     	;# 
  2432  0217                     	;# 
  2433  028C                     	;# 
  2434  028D                     	;# 
  2435  028E                     	;# 
  2436  0291                     	;# 
  2437  0291                     	;# 
  2438  0292                     	;# 
  2439  0293                     	;# 
  2440  0294                     	;# 
  2441  0298                     	;# 
  2442  0298                     	;# 
  2443  0299                     	;# 
  2444  029A                     	;# 
  2445  029B                     	;# 
  2446  029E                     	;# 
  2447  030C                     	;# 
  2448  030D                     	;# 
  2449  030E                     	;# 
  2450  038C                     	;# 
  2451  038D                     	;# 
  2452  038E                     	;# 
  2453  0391                     	;# 
  2454  0392                     	;# 
  2455  0393                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  0397                     	;# 
  2460  0398                     	;# 
  2461  0399                     	;# 
  2462  040E                     	;# 
  2463  0413                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0414                     	;# 
  2467  0415                     	;# 
  2468  0416                     	;# 
  2469  0417                     	;# 
  2470  0418                     	;# 
  2471  041A                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041B                     	;# 
  2475  041C                     	;# 
  2476  041D                     	;# 
  2477  041E                     	;# 
  2478  041F                     	;# 
  2479  0493                     	;# 
  2480  0494                     	;# 
  2481  0495                     	;# 
  2482  0496                     	;# 
  2483  049A                     	;# 
  2484  049B                     	;# 
  2485  049C                     	;# 
  2486  049D                     	;# 
  2487  058C                     	;# 
  2488  058C                     	;# 
  2489  058D                     	;# 
  2490  058E                     	;# 
  2491  058E                     	;# 
  2492  058F                     	;# 
  2493  0590                     	;# 
  2494  0590                     	;# 
  2495  0591                     	;# 
  2496  0592                     	;# 
  2497  0592                     	;# 
  2498  0593                     	;# 
  2499  0594                     	;# 
  2500  0594                     	;# 
  2501  0595                     	;# 
  2502  0596                     	;# 
  2503  0596                     	;# 
  2504  0597                     	;# 
  2505  0598                     	;# 
  2506  0599                     	;# 
  2507  059A                     	;# 
  2508  059B                     	;# 
  2509  059B                     	;# 
  2510  059C                     	;# 
  2511  059D                     	;# 
  2512  060C                     	;# 
  2513  060C                     	;# 
  2514  060D                     	;# 
  2515  060E                     	;# 
  2516  060F                     	;# 
  2517  060F                     	;# 
  2518  0610                     	;# 
  2519  0611                     	;# 
  2520  0612                     	;# 
  2521  0613                     	;# 
  2522  0614                     	;# 
  2523  0617                     	;# 
  2524  0618                     	;# 
  2525  0619                     	;# 
  2526  061A                     	;# 
  2527  061B                     	;# 
  2528  061C                     	;# 
  2529  0691                     	;# 
  2530  0692                     	;# 
  2531  0693                     	;# 
  2532  0694                     	;# 
  2533  0695                     	;# 
  2534  0696                     	;# 
  2535  0697                     	;# 
  2536  0699                     	;# 
  2537  069A                     	;# 
  2538  0711                     	;# 
  2539  0712                     	;# 
  2540  0713                     	;# 
  2541  0714                     	;# 
  2542  0715                     	;# 
  2543  0718                     	;# 
  2544  0718                     	;# 
  2545  0719                     	;# 
  2546  071A                     	;# 
  2547  071A                     	;# 
  2548  071B                     	;# 
  2549  071C                     	;# 
  2550  071D                     	;# 
  2551  0791                     	;# 
  2552  0791                     	;# 
  2553  0792                     	;# 
  2554  0793                     	;# 
  2555  0793                     	;# 
  2556  0794                     	;# 
  2557  0795                     	;# 
  2558  0795                     	;# 
  2559  0796                     	;# 
  2560  0797                     	;# 
  2561  0797                     	;# 
  2562  0798                     	;# 
  2563  0799                     	;# 
  2564  079A                     	;# 
  2565  080C                     	;# 
  2566  080C                     	;# 
  2567  080D                     	;# 
  2568  080E                     	;# 
  2569  080E                     	;# 
  2570  080F                     	;# 
  2571  0810                     	;# 
  2572  0810                     	;# 
  2573  0811                     	;# 
  2574  0812                     	;# 
  2575  0812                     	;# 
  2576  0813                     	;# 
  2577  0814                     	;# 
  2578  0815                     	;# 
  2579  0816                     	;# 
  2580  0817                     	;# 
  2581  0818                     	;# 
  2582  0819                     	;# 
  2583  081A                     	;# 
  2584  081A                     	;# 
  2585  081B                     	;# 
  2586  081C                     	;# 
  2587  081C                     	;# 
  2588  081D                     	;# 
  2589  088C                     	;# 
  2590  088D                     	;# 
  2591  088E                     	;# 
  2592  088F                     	;# 
  2593  088F                     	;# 
  2594  0890                     	;# 
  2595  0891                     	;# 
  2596  0892                     	;# 
  2597  0893                     	;# 
  2598  0893                     	;# 
  2599  0894                     	;# 
  2600  0895                     	;# 
  2601  0896                     	;# 
  2602  0897                     	;# 
  2603  0897                     	;# 
  2604  0898                     	;# 
  2605  0899                     	;# 
  2606  0D8C                     	;# 
  2607  0D8C                     	;# 
  2608  0D8D                     	;# 
  2609  0D8E                     	;# 
  2610  0D8F                     	;# 
  2611  0D8F                     	;# 
  2612  0D90                     	;# 
  2613  0D91                     	;# 
  2614  0D92                     	;# 
  2615  0D92                     	;# 
  2616  0D93                     	;# 
  2617  0D94                     	;# 
  2618  0D95                     	;# 
  2619  0D95                     	;# 
  2620  0D96                     	;# 
  2621  0D97                     	;# 
  2622  0D98                     	;# 
  2623  0D99                     	;# 
  2624  0D9A                     	;# 
  2625  0D9B                     	;# 
  2626  0D9C                     	;# 
  2627  0D9D                     	;# 
  2628  0D9E                     	;# 
  2629  0D9E                     	;# 
  2630  0D9F                     	;# 
  2631  0DA0                     	;# 
  2632  0DA1                     	;# 
  2633  0DA1                     	;# 
  2634  0DA2                     	;# 
  2635  0DA3                     	;# 
  2636  0DA4                     	;# 
  2637  0DA4                     	;# 
  2638  0DA5                     	;# 
  2639  0DA6                     	;# 
  2640  0DA7                     	;# 
  2641  0DA7                     	;# 
  2642  0DA8                     	;# 
  2643  0DA9                     	;# 
  2644  0DAA                     	;# 
  2645  0DAB                     	;# 
  2646  0DAC                     	;# 
  2647  0DAD                     	;# 
  2648  0DAE                     	;# 
  2649  0DAF                     	;# 
  2650  0E0F                     	;# 
  2651  0E10                     	;# 
  2652  0E11                     	;# 
  2653  0E12                     	;# 
  2654  0E13                     	;# 
  2655  0E14                     	;# 
  2656  0E15                     	;# 
  2657  0E16                     	;# 
  2658  0E17                     	;# 
  2659  0E18                     	;# 
  2660  0E19                     	;# 
  2661  0E1A                     	;# 
  2662  0E1B                     	;# 
  2663  0E1C                     	;# 
  2664  0E1D                     	;# 
  2665  0E1E                     	;# 
  2666  0E1F                     	;# 
  2667  0E20                     	;# 
  2668  0E21                     	;# 
  2669  0E22                     	;# 
  2670  0E23                     	;# 
  2671  0E24                     	;# 
  2672  0E25                     	;# 
  2673  0E26                     	;# 
  2674  0E27                     	;# 
  2675  0E28                     	;# 
  2676  0E29                     	;# 
  2677  0E2A                     	;# 
  2678  0E2B                     	;# 
  2679  0E2C                     	;# 
  2680  0E2D                     	;# 
  2681  0E2E                     	;# 
  2682  0E90                     	;# 
  2683  0E91                     	;# 
  2684  0E92                     	;# 
  2685  0E94                     	;# 
  2686  0E95                     	;# 
  2687  0E9C                     	;# 
  2688  0E9D                     	;# 
  2689  0E9E                     	;# 
  2690  0E9F                     	;# 
  2691  0EA0                     	;# 
  2692  0EA1                     	;# 
  2693  0EA2                     	;# 
  2694  0EA3                     	;# 
  2695  0EA4                     	;# 
  2696  0EA5                     	;# 
  2697  0EA6                     	;# 
  2698  0EA7                     	;# 
  2699  0F0F                     	;# 
  2700  0F10                     	;# 
  2701  0F11                     	;# 
  2702  0F12                     	;# 
  2703  0F13                     	;# 
  2704  0F14                     	;# 
  2705  0F15                     	;# 
  2706  0F16                     	;# 
  2707  0F17                     	;# 
  2708  0F18                     	;# 
  2709  0F19                     	;# 
  2710  0F1A                     	;# 
  2711  0F1B                     	;# 
  2712  0F1C                     	;# 
  2713  0F1D                     	;# 
  2714  0F1E                     	;# 
  2715  0F1F                     	;# 
  2716  0F20                     	;# 
  2717  0F21                     	;# 
  2718  0F22                     	;# 
  2719  0F23                     	;# 
  2720  0F24                     	;# 
  2721  0F25                     	;# 
  2722  0F26                     	;# 
  2723  0F27                     	;# 
  2724  0F28                     	;# 
  2725  0F29                     	;# 
  2726  0F2A                     	;# 
  2727  0F2B                     	;# 
  2728  0F2C                     	;# 
  2729  0F2D                     	;# 
  2730  0F2E                     	;# 
  2731  0F2F                     	;# 
  2732  0F30                     	;# 
  2733  0F31                     	;# 
  2734  0F32                     	;# 
  2735  0F33                     	;# 
  2736  0F34                     	;# 
  2737  0F35                     	;# 
  2738  0F36                     	;# 
  2739  0F37                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;# 
  2751  0000                     	;# 
  2752  0001                     	;# 
  2753  0002                     	;# 
  2754  0003                     	;# 
  2755  0004                     	;# 
  2756  0005                     	;# 
  2757  0006                     	;# 
  2758  0007                     	;# 
  2759  0008                     	;# 
  2760  0009                     	;# 
  2761  000A                     	;# 
  2762  000B                     	;# 
  2763  000C                     	;# 
  2764  000D                     	;# 
  2765  000E                     	;# 
  2766  0010                     	;# 
  2767  0011                     	;# 
  2768  0012                     	;# 
  2769  0013                     	;# 
  2770  0014                     	;# 
  2771  0015                     	;# 
  2772  0016                     	;# 
  2773  0016                     	;# 
  2774  0017                     	;# 
  2775  0018                     	;# 
  2776  0019                     	;# 
  2777  001A                     	;# 
  2778  001A                     	;# 
  2779  001B                     	;# 
  2780  001B                     	;# 
  2781  001C                     	;# 
  2782  001D                     	;# 
  2783  001E                     	;# 
  2784  001F                     	;# 
  2785  008C                     	;# 
  2786  008D                     	;# 
  2787  008E                     	;# 
  2788  0090                     	;# 
  2789  0091                     	;# 
  2790  0092                     	;# 
  2791  0093                     	;# 
  2792  0094                     	;# 
  2793  0095                     	;# 
  2794  0096                     	;# 
  2795  0098                     	;# 
  2796  0099                     	;# 
  2797  009A                     	;# 
  2798  009B                     	;# 
  2799  009B                     	;# 
  2800  009C                     	;# 
  2801  009D                     	;# 
  2802  009E                     	;# 
  2803  009F                     	;# 
  2804  010C                     	;# 
  2805  010D                     	;# 
  2806  010E                     	;# 
  2807  0111                     	;# 
  2808  0112                     	;# 
  2809  0113                     	;# 
  2810  0114                     	;# 
  2811  0115                     	;# 
  2812  0116                     	;# 
  2813  0117                     	;# 
  2814  0118                     	;# 
  2815  0119                     	;# 
  2816  011C                     	;# 
  2817  018C                     	;# 
  2818  018D                     	;# 
  2819  018E                     	;# 
  2820  0191                     	;# 
  2821  0191                     	;# 
  2822  0192                     	;# 
  2823  0193                     	;# 
  2824  0193                     	;# 
  2825  0194                     	;# 
  2826  0195                     	;# 
  2827  0196                     	;# 
  2828  0197                     	;# 
  2829  0199                     	;# 
  2830  0199                     	;# 
  2831  0199                     	;# 
  2832  019A                     	;# 
  2833  019A                     	;# 
  2834  019A                     	;# 
  2835  019B                     	;# 
  2836  019B                     	;# 
  2837  019B                     	;# 
  2838  019B                     	;# 
  2839  019B                     	;# 
  2840  019C                     	;# 
  2841  019C                     	;# 
  2842  019C                     	;# 
  2843  019D                     	;# 
  2844  019D                     	;# 
  2845  019D                     	;# 
  2846  019E                     	;# 
  2847  019E                     	;# 
  2848  019E                     	;# 
  2849  019F                     	;# 
  2850  019F                     	;# 
  2851  019F                     	;# 
  2852  019F                     	;# 
  2853  019F                     	;# 
  2854  020C                     	;# 
  2855  020D                     	;# 
  2856  020E                     	;# 
  2857  0211                     	;# 
  2858  0211                     	;# 
  2859  0212                     	;# 
  2860  0212                     	;# 
  2861  0213                     	;# 
  2862  0213                     	;# 
  2863  0214                     	;# 
  2864  0214                     	;# 
  2865  0215                     	;# 
  2866  0215                     	;# 
  2867  0215                     	;# 
  2868  0215                     	;# 
  2869  0216                     	;# 
  2870  0216                     	;# 
  2871  0217                     	;# 
  2872  0217                     	;# 
  2873  028C                     	;# 
  2874  028D                     	;# 
  2875  028E                     	;# 
  2876  0291                     	;# 
  2877  0291                     	;# 
  2878  0292                     	;# 
  2879  0293                     	;# 
  2880  0294                     	;# 
  2881  0298                     	;# 
  2882  0298                     	;# 
  2883  0299                     	;# 
  2884  029A                     	;# 
  2885  029B                     	;# 
  2886  029E                     	;# 
  2887  030C                     	;# 
  2888  030D                     	;# 
  2889  030E                     	;# 
  2890  038C                     	;# 
  2891  038D                     	;# 
  2892  038E                     	;# 
  2893  0391                     	;# 
  2894  0392                     	;# 
  2895  0393                     	;# 
  2896  0394                     	;# 
  2897  0395                     	;# 
  2898  0396                     	;# 
  2899  0397                     	;# 
  2900  0398                     	;# 
  2901  0399                     	;# 
  2902  040E                     	;# 
  2903  0413                     	;# 
  2904  0413                     	;# 
  2905  0414                     	;# 
  2906  0414                     	;# 
  2907  0415                     	;# 
  2908  0416                     	;# 
  2909  0417                     	;# 
  2910  0418                     	;# 
  2911  041A                     	;# 
  2912  041A                     	;# 
  2913  041B                     	;# 
  2914  041B                     	;# 
  2915  041C                     	;# 
  2916  041D                     	;# 
  2917  041E                     	;# 
  2918  041F                     	;# 
  2919  0493                     	;# 
  2920  0494                     	;# 
  2921  0495                     	;# 
  2922  0496                     	;# 
  2923  049A                     	;# 
  2924  049B                     	;# 
  2925  049C                     	;# 
  2926  049D                     	;# 
  2927  058C                     	;# 
  2928  058C                     	;# 
  2929  058D                     	;# 
  2930  058E                     	;# 
  2931  058E                     	;# 
  2932  058F                     	;# 
  2933  0590                     	;# 
  2934  0590                     	;# 
  2935  0591                     	;# 
  2936  0592                     	;# 
  2937  0592                     	;# 
  2938  0593                     	;# 
  2939  0594                     	;# 
  2940  0594                     	;# 
  2941  0595                     	;# 
  2942  0596                     	;# 
  2943  0596                     	;# 
  2944  0597                     	;# 
  2945  0598                     	;# 
  2946  0599                     	;# 
  2947  059A                     	;# 
  2948  059B                     	;# 
  2949  059B                     	;# 
  2950  059C                     	;# 
  2951  059D                     	;# 
  2952  060C                     	;# 
  2953  060C                     	;# 
  2954  060D                     	;# 
  2955  060E                     	;# 
  2956  060F                     	;# 
  2957  060F                     	;# 
  2958  0610                     	;# 
  2959  0611                     	;# 
  2960  0612                     	;# 
  2961  0613                     	;# 
  2962  0614                     	;# 
  2963  0617                     	;# 
  2964  0618                     	;# 
  2965  0619                     	;# 
  2966  061A                     	;# 
  2967  061B                     	;# 
  2968  061C                     	;# 
  2969  0691                     	;# 
  2970  0692                     	;# 
  2971  0693                     	;# 
  2972  0694                     	;# 
  2973  0695                     	;# 
  2974  0696                     	;# 
  2975  0697                     	;# 
  2976  0699                     	;# 
  2977  069A                     	;# 
  2978  0711                     	;# 
  2979  0712                     	;# 
  2980  0713                     	;# 
  2981  0714                     	;# 
  2982  0715                     	;# 
  2983  0718                     	;# 
  2984  0718                     	;# 
  2985  0719                     	;# 
  2986  071A                     	;# 
  2987  071A                     	;# 
  2988  071B                     	;# 
  2989  071C                     	;# 
  2990  071D                     	;# 
  2991  0791                     	;# 
  2992  0791                     	;# 
  2993  0792                     	;# 
  2994  0793                     	;# 
  2995  0793                     	;# 
  2996  0794                     	;# 
  2997  0795                     	;# 
  2998  0795                     	;# 
  2999  0796                     	;# 
  3000  0797                     	;# 
  3001  0797                     	;# 
  3002  0798                     	;# 
  3003  0799                     	;# 
  3004  079A                     	;# 
  3005  080C                     	;# 
  3006  080C                     	;# 
  3007  080D                     	;# 
  3008  080E                     	;# 
  3009  080E                     	;# 
  3010  080F                     	;# 
  3011  0810                     	;# 
  3012  0810                     	;# 
  3013  0811                     	;# 
  3014  0812                     	;# 
  3015  0812                     	;# 
  3016  0813                     	;# 
  3017  0814                     	;# 
  3018  0815                     	;# 
  3019  0816                     	;# 
  3020  0817                     	;# 
  3021  0818                     	;# 
  3022  0819                     	;# 
  3023  081A                     	;# 
  3024  081A                     	;# 
  3025  081B                     	;# 
  3026  081C                     	;# 
  3027  081C                     	;# 
  3028  081D                     	;# 
  3029  088C                     	;# 
  3030  088D                     	;# 
  3031  088E                     	;# 
  3032  088F                     	;# 
  3033  088F                     	;# 
  3034  0890                     	;# 
  3035  0891                     	;# 
  3036  0892                     	;# 
  3037  0893                     	;# 
  3038  0893                     	;# 
  3039  0894                     	;# 
  3040  0895                     	;# 
  3041  0896                     	;# 
  3042  0897                     	;# 
  3043  0897                     	;# 
  3044  0898                     	;# 
  3045  0899                     	;# 
  3046  0D8C                     	;# 
  3047  0D8C                     	;# 
  3048  0D8D                     	;# 
  3049  0D8E                     	;# 
  3050  0D8F                     	;# 
  3051  0D8F                     	;# 
  3052  0D90                     	;# 
  3053  0D91                     	;# 
  3054  0D92                     	;# 
  3055  0D92                     	;# 
  3056  0D93                     	;# 
  3057  0D94                     	;# 
  3058  0D95                     	;# 
  3059  0D95                     	;# 
  3060  0D96                     	;# 
  3061  0D97                     	;# 
  3062  0D98                     	;# 
  3063  0D99                     	;# 
  3064  0D9A                     	;# 
  3065  0D9B                     	;# 
  3066  0D9C                     	;# 
  3067  0D9D                     	;# 
  3068  0D9E                     	;# 
  3069  0D9E                     	;# 
  3070  0D9F                     	;# 
  3071  0DA0                     	;# 
  3072  0DA1                     	;# 
  3073  0DA1                     	;# 
  3074  0DA2                     	;# 
  3075  0DA3                     	;# 
  3076  0DA4                     	;# 
  3077  0DA4                     	;# 
  3078  0DA5                     	;# 
  3079  0DA6                     	;# 
  3080  0DA7                     	;# 
  3081  0DA7                     	;# 
  3082  0DA8                     	;# 
  3083  0DA9                     	;# 
  3084  0DAA                     	;# 
  3085  0DAB                     	;# 
  3086  0DAC                     	;# 
  3087  0DAD                     	;# 
  3088  0DAE                     	;# 
  3089  0DAF                     	;# 
  3090  0E0F                     	;# 
  3091  0E10                     	;# 
  3092  0E11                     	;# 
  3093  0E12                     	;# 
  3094  0E13                     	;# 
  3095  0E14                     	;# 
  3096  0E15                     	;# 
  3097  0E16                     	;# 
  3098  0E17                     	;# 
  3099  0E18                     	;# 
  3100  0E19                     	;# 
  3101  0E1A                     	;# 
  3102  0E1B                     	;# 
  3103  0E1C                     	;# 
  3104  0E1D                     	;# 
  3105  0E1E                     	;# 
  3106  0E1F                     	;# 
  3107  0E20                     	;# 
  3108  0E21                     	;# 
  3109  0E22                     	;# 
  3110  0E23                     	;# 
  3111  0E24                     	;# 
  3112  0E25                     	;# 
  3113  0E26                     	;# 
  3114  0E27                     	;# 
  3115  0E28                     	;# 
  3116  0E29                     	;# 
  3117  0E2A                     	;# 
  3118  0E2B                     	;# 
  3119  0E2C                     	;# 
  3120  0E2D                     	;# 
  3121  0E2E                     	;# 
  3122  0E90                     	;# 
  3123  0E91                     	;# 
  3124  0E92                     	;# 
  3125  0E94                     	;# 
  3126  0E95                     	;# 
  3127  0E9C                     	;# 
  3128  0E9D                     	;# 
  3129  0E9E                     	;# 
  3130  0E9F                     	;# 
  3131  0EA0                     	;# 
  3132  0EA1                     	;# 
  3133  0EA2                     	;# 
  3134  0EA3                     	;# 
  3135  0EA4                     	;# 
  3136  0EA5                     	;# 
  3137  0EA6                     	;# 
  3138  0EA7                     	;# 
  3139  0F0F                     	;# 
  3140  0F10                     	;# 
  3141  0F11                     	;# 
  3142  0F12                     	;# 
  3143  0F13                     	;# 
  3144  0F14                     	;# 
  3145  0F15                     	;# 
  3146  0F16                     	;# 
  3147  0F17                     	;# 
  3148  0F18                     	;# 
  3149  0F19                     	;# 
  3150  0F1A                     	;# 
  3151  0F1B                     	;# 
  3152  0F1C                     	;# 
  3153  0F1D                     	;# 
  3154  0F1E                     	;# 
  3155  0F1F                     	;# 
  3156  0F20                     	;# 
  3157  0F21                     	;# 
  3158  0F22                     	;# 
  3159  0F23                     	;# 
  3160  0F24                     	;# 
  3161  0F25                     	;# 
  3162  0F26                     	;# 
  3163  0F27                     	;# 
  3164  0F28                     	;# 
  3165  0F29                     	;# 
  3166  0F2A                     	;# 
  3167  0F2B                     	;# 
  3168  0F2C                     	;# 
  3169  0F2D                     	;# 
  3170  0F2E                     	;# 
  3171  0F2F                     	;# 
  3172  0F30                     	;# 
  3173  0F31                     	;# 
  3174  0F32                     	;# 
  3175  0F33                     	;# 
  3176  0F34                     	;# 
  3177  0F35                     	;# 
  3178  0F36                     	;# 
  3179  0F37                     	;# 
  3180  0FE4                     	;# 
  3181  0FE5                     	;# 
  3182  0FE6                     	;# 
  3183  0FE7                     	;# 
  3184  0FE8                     	;# 
  3185  0FE9                     	;# 
  3186  0FEA                     	;# 
  3187  0FEB                     	;# 
  3188  0FED                     	;# 
  3189  0FEE                     	;# 
  3190  0FEF                     	;# 
  3191  0000                     	;# 
  3192  0001                     	;# 
  3193  0002                     	;# 
  3194  0003                     	;# 
  3195  0004                     	;# 
  3196  0005                     	;# 
  3197  0006                     	;# 
  3198  0007                     	;# 
  3199  0008                     	;# 
  3200  0009                     	;# 
  3201  000A                     	;# 
  3202  000B                     	;# 
  3203  000C                     	;# 
  3204  000D                     	;# 
  3205  000E                     	;# 
  3206  0010                     	;# 
  3207  0011                     	;# 
  3208  0012                     	;# 
  3209  0013                     	;# 
  3210  0014                     	;# 
  3211  0015                     	;# 
  3212  0016                     	;# 
  3213  0016                     	;# 
  3214  0017                     	;# 
  3215  0018                     	;# 
  3216  0019                     	;# 
  3217  001A                     	;# 
  3218  001A                     	;# 
  3219  001B                     	;# 
  3220  001B                     	;# 
  3221  001C                     	;# 
  3222  001D                     	;# 
  3223  001E                     	;# 
  3224  001F                     	;# 
  3225  008C                     	;# 
  3226  008D                     	;# 
  3227  008E                     	;# 
  3228  0090                     	;# 
  3229  0091                     	;# 
  3230  0092                     	;# 
  3231  0093                     	;# 
  3232  0094                     	;# 
  3233  0095                     	;# 
  3234  0096                     	;# 
  3235  0098                     	;# 
  3236  0099                     	;# 
  3237  009A                     	;# 
  3238  009B                     	;# 
  3239  009B                     	;# 
  3240  009C                     	;# 
  3241  009D                     	;# 
  3242  009E                     	;# 
  3243  009F                     	;# 
  3244  010C                     	;# 
  3245  010D                     	;# 
  3246  010E                     	;# 
  3247  0111                     	;# 
  3248  0112                     	;# 
  3249  0113                     	;# 
  3250  0114                     	;# 
  3251  0115                     	;# 
  3252  0116                     	;# 
  3253  0117                     	;# 
  3254  0118                     	;# 
  3255  0119                     	;# 
  3256  011C                     	;# 
  3257  018C                     	;# 
  3258  018D                     	;# 
  3259  018E                     	;# 
  3260  0191                     	;# 
  3261  0191                     	;# 
  3262  0192                     	;# 
  3263  0193                     	;# 
  3264  0193                     	;# 
  3265  0194                     	;# 
  3266  0195                     	;# 
  3267  0196                     	;# 
  3268  0197                     	;# 
  3269  0199                     	;# 
  3270  0199                     	;# 
  3271  0199                     	;# 
  3272  019A                     	;# 
  3273  019A                     	;# 
  3274  019A                     	;# 
  3275  019B                     	;# 
  3276  019B                     	;# 
  3277  019B                     	;# 
  3278  019B                     	;# 
  3279  019B                     	;# 
  3280  019C                     	;# 
  3281  019C                     	;# 
  3282  019C                     	;# 
  3283  019D                     	;# 
  3284  019D                     	;# 
  3285  019D                     	;# 
  3286  019E                     	;# 
  3287  019E                     	;# 
  3288  019E                     	;# 
  3289  019F                     	;# 
  3290  019F                     	;# 
  3291  019F                     	;# 
  3292  019F                     	;# 
  3293  019F                     	;# 
  3294  020C                     	;# 
  3295  020D                     	;# 
  3296  020E                     	;# 
  3297  0211                     	;# 
  3298  0211                     	;# 
  3299  0212                     	;# 
  3300  0212                     	;# 
  3301  0213                     	;# 
  3302  0213                     	;# 
  3303  0214                     	;# 
  3304  0214                     	;# 
  3305  0215                     	;# 
  3306  0215                     	;# 
  3307  0215                     	;# 
  3308  0215                     	;# 
  3309  0216                     	;# 
  3310  0216                     	;# 
  3311  0217                     	;# 
  3312  0217                     	;# 
  3313  028C                     	;# 
  3314  028D                     	;# 
  3315  028E                     	;# 
  3316  0291                     	;# 
  3317  0291                     	;# 
  3318  0292                     	;# 
  3319  0293                     	;# 
  3320  0294                     	;# 
  3321  0298                     	;# 
  3322  0298                     	;# 
  3323  0299                     	;# 
  3324  029A                     	;# 
  3325  029B                     	;# 
  3326  029E                     	;# 
  3327  030C                     	;# 
  3328  030D                     	;# 
  3329  030E                     	;# 
  3330  038C                     	;# 
  3331  038D                     	;# 
  3332  038E                     	;# 
  3333  0391                     	;# 
  3334  0392                     	;# 
  3335  0393                     	;# 
  3336  0394                     	;# 
  3337  0395                     	;# 
  3338  0396                     	;# 
  3339  0397                     	;# 
  3340  0398                     	;# 
  3341  0399                     	;# 
  3342  040E                     	;# 
  3343  0413                     	;# 
  3344  0413                     	;# 
  3345  0414                     	;# 
  3346  0414                     	;# 
  3347  0415                     	;# 
  3348  0416                     	;# 
  3349  0417                     	;# 
  3350  0418                     	;# 
  3351  041A                     	;# 
  3352  041A                     	;# 
  3353  041B                     	;# 
  3354  041B                     	;# 
  3355  041C                     	;# 
  3356  041D                     	;# 
  3357  041E                     	;# 
  3358  041F                     	;# 
  3359  0493                     	;# 
  3360  0494                     	;# 
  3361  0495                     	;# 
  3362  0496                     	;# 
  3363  049A                     	;# 
  3364  049B                     	;# 
  3365  049C                     	;# 
  3366  049D                     	;# 
  3367  058C                     	;# 
  3368  058C                     	;# 
  3369  058D                     	;# 
  3370  058E                     	;# 
  3371  058E                     	;# 
  3372  058F                     	;# 
  3373  0590                     	;# 
  3374  0590                     	;# 
  3375  0591                     	;# 
  3376  0592                     	;# 
  3377  0592                     	;# 
  3378  0593                     	;# 
  3379  0594                     	;# 
  3380  0594                     	;# 
  3381  0595                     	;# 
  3382  0596                     	;# 
  3383  0596                     	;# 
  3384  0597                     	;# 
  3385  0598                     	;# 
  3386  0599                     	;# 
  3387  059A                     	;# 
  3388  059B                     	;# 
  3389  059B                     	;# 
  3390  059C                     	;# 
  3391  059D                     	;# 
  3392  060C                     	;# 
  3393  060C                     	;# 
  3394  060D                     	;# 
  3395  060E                     	;# 
  3396  060F                     	;# 
  3397  060F                     	;# 
  3398  0610                     	;# 
  3399  0611                     	;# 
  3400  0612                     	;# 
  3401  0613                     	;# 
  3402  0614                     	;# 
  3403  0617                     	;# 
  3404  0618                     	;# 
  3405  0619                     	;# 
  3406  061A                     	;# 
  3407  061B                     	;# 
  3408  061C                     	;# 
  3409  0691                     	;# 
  3410  0692                     	;# 
  3411  0693                     	;# 
  3412  0694                     	;# 
  3413  0695                     	;# 
  3414  0696                     	;# 
  3415  0697                     	;# 
  3416  0699                     	;# 
  3417  069A                     	;# 
  3418  0711                     	;# 
  3419  0712                     	;# 
  3420  0713                     	;# 
  3421  0714                     	;# 
  3422  0715                     	;# 
  3423  0718                     	;# 
  3424  0718                     	;# 
  3425  0719                     	;# 
  3426  071A                     	;# 
  3427  071A                     	;# 
  3428  071B                     	;# 
  3429  071C                     	;# 
  3430  071D                     	;# 
  3431  0791                     	;# 
  3432  0791                     	;# 
  3433  0792                     	;# 
  3434  0793                     	;# 
  3435  0793                     	;# 
  3436  0794                     	;# 
  3437  0795                     	;# 
  3438  0795                     	;# 
  3439  0796                     	;# 
  3440  0797                     	;# 
  3441  0797                     	;# 
  3442  0798                     	;# 
  3443  0799                     	;# 
  3444  079A                     	;# 
  3445  080C                     	;# 
  3446  080C                     	;# 
  3447  080D                     	;# 
  3448  080E                     	;# 
  3449  080E                     	;# 
  3450  080F                     	;# 
  3451  0810                     	;# 
  3452  0810                     	;# 
  3453  0811                     	;# 
  3454  0812                     	;# 
  3455  0812                     	;# 
  3456  0813                     	;# 
  3457  0814                     	;# 
  3458  0815                     	;# 
  3459  0816                     	;# 
  3460  0817                     	;# 
  3461  0818                     	;# 
  3462  0819                     	;# 
  3463  081A                     	;# 
  3464  081A                     	;# 
  3465  081B                     	;# 
  3466  081C                     	;# 
  3467  081C                     	;# 
  3468  081D                     	;# 
  3469  088C                     	;# 
  3470  088D                     	;# 
  3471  088E                     	;# 
  3472  088F                     	;# 
  3473  088F                     	;# 
  3474  0890                     	;# 
  3475  0891                     	;# 
  3476  0892                     	;# 
  3477  0893                     	;# 
  3478  0893                     	;# 
  3479  0894                     	;# 
  3480  0895                     	;# 
  3481  0896                     	;# 
  3482  0897                     	;# 
  3483  0897                     	;# 
  3484  0898                     	;# 
  3485  0899                     	;# 
  3486  0D8C                     	;# 
  3487  0D8C                     	;# 
  3488  0D8D                     	;# 
  3489  0D8E                     	;# 
  3490  0D8F                     	;# 
  3491  0D8F                     	;# 
  3492  0D90                     	;# 
  3493  0D91                     	;# 
  3494  0D92                     	;# 
  3495  0D92                     	;# 
  3496  0D93                     	;# 
  3497  0D94                     	;# 
  3498  0D95                     	;# 
  3499  0D95                     	;# 
  3500  0D96                     	;# 
  3501  0D97                     	;# 
  3502  0D98                     	;# 
  3503  0D99                     	;# 
  3504  0D9A                     	;# 
  3505  0D9B                     	;# 
  3506  0D9C                     	;# 
  3507  0D9D                     	;# 
  3508  0D9E                     	;# 
  3509  0D9E                     	;# 
  3510  0D9F                     	;# 
  3511  0DA0                     	;# 
  3512  0DA1                     	;# 
  3513  0DA1                     	;# 
  3514  0DA2                     	;# 
  3515  0DA3                     	;# 
  3516  0DA4                     	;# 
  3517  0DA4                     	;# 
  3518  0DA5                     	;# 
  3519  0DA6                     	;# 
  3520  0DA7                     	;# 
  3521  0DA7                     	;# 
  3522  0DA8                     	;# 
  3523  0DA9                     	;# 
  3524  0DAA                     	;# 
  3525  0DAB                     	;# 
  3526  0DAC                     	;# 
  3527  0DAD                     	;# 
  3528  0DAE                     	;# 
  3529  0DAF                     	;# 
  3530  0E0F                     	;# 
  3531  0E10                     	;# 
  3532  0E11                     	;# 
  3533  0E12                     	;# 
  3534  0E13                     	;# 
  3535  0E14                     	;# 
  3536  0E15                     	;# 
  3537  0E16                     	;# 
  3538  0E17                     	;# 
  3539  0E18                     	;# 
  3540  0E19                     	;# 
  3541  0E1A                     	;# 
  3542  0E1B                     	;# 
  3543  0E1C                     	;# 
  3544  0E1D                     	;# 
  3545  0E1E                     	;# 
  3546  0E1F                     	;# 
  3547  0E20                     	;# 
  3548  0E21                     	;# 
  3549  0E22                     	;# 
  3550  0E23                     	;# 
  3551  0E24                     	;# 
  3552  0E25                     	;# 
  3553  0E26                     	;# 
  3554  0E27                     	;# 
  3555  0E28                     	;# 
  3556  0E29                     	;# 
  3557  0E2A                     	;# 
  3558  0E2B                     	;# 
  3559  0E2C                     	;# 
  3560  0E2D                     	;# 
  3561  0E2E                     	;# 
  3562  0E90                     	;# 
  3563  0E91                     	;# 
  3564  0E92                     	;# 
  3565  0E94                     	;# 
  3566  0E95                     	;# 
  3567  0E9C                     	;# 
  3568  0E9D                     	;# 
  3569  0E9E                     	;# 
  3570  0E9F                     	;# 
  3571  0EA0                     	;# 
  3572  0EA1                     	;# 
  3573  0EA2                     	;# 
  3574  0EA3                     	;# 
  3575  0EA4                     	;# 
  3576  0EA5                     	;# 
  3577  0EA6                     	;# 
  3578  0EA7                     	;# 
  3579  0F0F                     	;# 
  3580  0F10                     	;# 
  3581  0F11                     	;# 
  3582  0F12                     	;# 
  3583  0F13                     	;# 
  3584  0F14                     	;# 
  3585  0F15                     	;# 
  3586  0F16                     	;# 
  3587  0F17                     	;# 
  3588  0F18                     	;# 
  3589  0F19                     	;# 
  3590  0F1A                     	;# 
  3591  0F1B                     	;# 
  3592  0F1C                     	;# 
  3593  0F1D                     	;# 
  3594  0F1E                     	;# 
  3595  0F1F                     	;# 
  3596  0F20                     	;# 
  3597  0F21                     	;# 
  3598  0F22                     	;# 
  3599  0F23                     	;# 
  3600  0F24                     	;# 
  3601  0F25                     	;# 
  3602  0F26                     	;# 
  3603  0F27                     	;# 
  3604  0F28                     	;# 
  3605  0F29                     	;# 
  3606  0F2A                     	;# 
  3607  0F2B                     	;# 
  3608  0F2C                     	;# 
  3609  0F2D                     	;# 
  3610  0F2E                     	;# 
  3611  0F2F                     	;# 
  3612  0F30                     	;# 
  3613  0F31                     	;# 
  3614  0F32                     	;# 
  3615  0F33                     	;# 
  3616  0F34                     	;# 
  3617  0F35                     	;# 
  3618  0F36                     	;# 
  3619  0F37                     	;# 
  3620  0FE4                     	;# 
  3621  0FE5                     	;# 
  3622  0FE6                     	;# 
  3623  0FE7                     	;# 
  3624  0FE8                     	;# 
  3625  0FE9                     	;# 
  3626  0FEA                     	;# 
  3627  0FEB                     	;# 
  3628  0FED                     	;# 
  3629  0FEE                     	;# 
  3630  0FEF                     	;# 
  3631  0000                     	;# 
  3632  0001                     	;# 
  3633  0002                     	;# 
  3634  0003                     	;# 
  3635  0004                     	;# 
  3636  0005                     	;# 
  3637  0006                     	;# 
  3638  0007                     	;# 
  3639  0008                     	;# 
  3640  0009                     	;# 
  3641  000A                     	;# 
  3642  000B                     	;# 
  3643  000C                     	;# 
  3644  000D                     	;# 
  3645  000E                     	;# 
  3646  0010                     	;# 
  3647  0011                     	;# 
  3648  0012                     	;# 
  3649  0013                     	;# 
  3650  0014                     	;# 
  3651  0015                     	;# 
  3652  0016                     	;# 
  3653  0016                     	;# 
  3654  0017                     	;# 
  3655  0018                     	;# 
  3656  0019                     	;# 
  3657  001A                     	;# 
  3658  001A                     	;# 
  3659  001B                     	;# 
  3660  001B                     	;# 
  3661  001C                     	;# 
  3662  001D                     	;# 
  3663  001E                     	;# 
  3664  001F                     	;# 
  3665  008C                     	;# 
  3666  008D                     	;# 
  3667  008E                     	;# 
  3668  0090                     	;# 
  3669  0091                     	;# 
  3670  0092                     	;# 
  3671  0093                     	;# 
  3672  0094                     	;# 
  3673  0095                     	;# 
  3674  0096                     	;# 
  3675  0098                     	;# 
  3676  0099                     	;# 
  3677  009A                     	;# 
  3678  009B                     	;# 
  3679  009B                     	;# 
  3680  009C                     	;# 
  3681  009D                     	;# 
  3682  009E                     	;# 
  3683  009F                     	;# 
  3684  010C                     	;# 
  3685  010D                     	;# 
  3686  010E                     	;# 
  3687  0111                     	;# 
  3688  0112                     	;# 
  3689  0113                     	;# 
  3690  0114                     	;# 
  3691  0115                     	;# 
  3692  0116                     	;# 
  3693  0117                     	;# 
  3694  0118                     	;# 
  3695  0119                     	;# 
  3696  011C                     	;# 
  3697  018C                     	;# 
  3698  018D                     	;# 
  3699  018E                     	;# 
  3700  0191                     	;# 
  3701  0191                     	;# 
  3702  0192                     	;# 
  3703  0193                     	;# 
  3704  0193                     	;# 
  3705  0194                     	;# 
  3706  0195                     	;# 
  3707  0196                     	;# 
  3708  0197                     	;# 
  3709  0199                     	;# 
  3710  0199                     	;# 
  3711  0199                     	;# 
  3712  019A                     	;# 
  3713  019A                     	;# 
  3714  019A                     	;# 
  3715  019B                     	;# 
  3716  019B                     	;# 
  3717  019B                     	;# 
  3718  019B                     	;# 
  3719  019B                     	;# 
  3720  019C                     	;# 
  3721  019C                     	;# 
  3722  019C                     	;# 
  3723  019D                     	;# 
  3724  019D                     	;# 
  3725  019D                     	;# 
  3726  019E                     	;# 
  3727  019E                     	;# 
  3728  019E                     	;# 
  3729  019F                     	;# 
  3730  019F                     	;# 
  3731  019F                     	;# 
  3732  019F                     	;# 
  3733  019F                     	;# 
  3734  020C                     	;# 
  3735  020D                     	;# 
  3736  020E                     	;# 
  3737  0211                     	;# 
  3738  0211                     	;# 
  3739  0212                     	;# 
  3740  0212                     	;# 
  3741  0213                     	;# 
  3742  0213                     	;# 
  3743  0214                     	;# 
  3744  0214                     	;# 
  3745  0215                     	;# 
  3746  0215                     	;# 
  3747  0215                     	;# 
  3748  0215                     	;# 
  3749  0216                     	;# 
  3750  0216                     	;# 
  3751  0217                     	;# 
  3752  0217                     	;# 
  3753  028C                     	;# 
  3754  028D                     	;# 
  3755  028E                     	;# 
  3756  0291                     	;# 
  3757  0291                     	;# 
  3758  0292                     	;# 
  3759  0293                     	;# 
  3760  0294                     	;# 
  3761  0298                     	;# 
  3762  0298                     	;# 
  3763  0299                     	;# 
  3764  029A                     	;# 
  3765  029B                     	;# 
  3766  029E                     	;# 
  3767  030C                     	;# 
  3768  030D                     	;# 
  3769  030E                     	;# 
  3770  038C                     	;# 
  3771  038D                     	;# 
  3772  038E                     	;# 
  3773  0391                     	;# 
  3774  0392                     	;# 
  3775  0393                     	;# 
  3776  0394                     	;# 
  3777  0395                     	;# 
  3778  0396                     	;# 
  3779  0397                     	;# 
  3780  0398                     	;# 
  3781  0399                     	;# 
  3782  040E                     	;# 
  3783  0413                     	;# 
  3784  0413                     	;# 
  3785  0414                     	;# 
  3786  0414                     	;# 
  3787  0415                     	;# 
  3788  0416                     	;# 
  3789  0417                     	;# 
  3790  0418                     	;# 
  3791  041A                     	;# 
  3792  041A                     	;# 
  3793  041B                     	;# 
  3794  041B                     	;# 
  3795  041C                     	;# 
  3796  041D                     	;# 
  3797  041E                     	;# 
  3798  041F                     	;# 
  3799  0493                     	;# 
  3800  0494                     	;# 
  3801  0495                     	;# 
  3802  0496                     	;# 
  3803  049A                     	;# 
  3804  049B                     	;# 
  3805  049C                     	;# 
  3806  049D                     	;# 
  3807  058C                     	;# 
  3808  058C                     	;# 
  3809  058D                     	;# 
  3810  058E                     	;# 
  3811  058E                     	;# 
  3812  058F                     	;# 
  3813  0590                     	;# 
  3814  0590                     	;# 
  3815  0591                     	;# 
  3816  0592                     	;# 
  3817  0592                     	;# 
  3818  0593                     	;# 
  3819  0594                     	;# 
  3820  0594                     	;# 
  3821  0595                     	;# 
  3822  0596                     	;# 
  3823  0596                     	;# 
  3824  0597                     	;# 
  3825  0598                     	;# 
  3826  0599                     	;# 
  3827  059A                     	;# 
  3828  059B                     	;# 
  3829  059B                     	;# 
  3830  059C                     	;# 
  3831  059D                     	;# 
  3832  060C                     	;# 
  3833  060C                     	;# 
  3834  060D                     	;# 
  3835  060E                     	;# 
  3836  060F                     	;# 
  3837  060F                     	;# 
  3838  0610                     	;# 
  3839  0611                     	;# 
  3840  0612                     	;# 
  3841  0613                     	;# 
  3842  0614                     	;# 
  3843  0617                     	;# 
  3844  0618                     	;# 
  3845  0619                     	;# 
  3846  061A                     	;# 
  3847  061B                     	;# 
  3848  061C                     	;# 
  3849  0691                     	;# 
  3850  0692                     	;# 
  3851  0693                     	;# 
  3852  0694                     	;# 
  3853  0695                     	;# 
  3854  0696                     	;# 
  3855  0697                     	;# 
  3856  0699                     	;# 
  3857  069A                     	;# 
  3858  0711                     	;# 
  3859  0712                     	;# 
  3860  0713                     	;# 
  3861  0714                     	;# 
  3862  0715                     	;# 
  3863  0718                     	;# 
  3864  0718                     	;# 
  3865  0719                     	;# 
  3866  071A                     	;# 
  3867  071A                     	;# 
  3868  071B                     	;# 
  3869  071C                     	;# 
  3870  071D                     	;# 
  3871  0791                     	;# 
  3872  0791                     	;# 
  3873  0792                     	;# 
  3874  0793                     	;# 
  3875  0793                     	;# 
  3876  0794                     	;# 
  3877  0795                     	;# 
  3878  0795                     	;# 
  3879  0796                     	;# 
  3880  0797                     	;# 
  3881  0797                     	;# 
  3882  0798                     	;# 
  3883  0799                     	;# 
  3884  079A                     	;# 
  3885  080C                     	;# 
  3886  080C                     	;# 
  3887  080D                     	;# 
  3888  080E                     	;# 
  3889  080E                     	;# 
  3890  080F                     	;# 
  3891  0810                     	;# 
  3892  0810                     	;# 
  3893  0811                     	;# 
  3894  0812                     	;# 
  3895  0812                     	;# 
  3896  0813                     	;# 
  3897  0814                     	;# 
  3898  0815                     	;# 
  3899  0816                     	;# 
  3900  0817                     	;# 
  3901  0818                     	;# 
  3902  0819                     	;# 
  3903  081A                     	;# 
  3904  081A                     	;# 
  3905  081B                     	;# 
  3906  081C                     	;# 
  3907  081C                     	;# 
  3908  081D                     	;# 
  3909  088C                     	;# 
  3910  088D                     	;# 
  3911  088E                     	;# 
  3912  088F                     	;# 
  3913  088F                     	;# 
  3914  0890                     	;# 
  3915  0891                     	;# 
  3916  0892                     	;# 
  3917  0893                     	;# 
  3918  0893                     	;# 
  3919  0894                     	;# 
  3920  0895                     	;# 
  3921  0896                     	;# 
  3922  0897                     	;# 
  3923  0897                     	;# 
  3924  0898                     	;# 
  3925  0899                     	;# 
  3926  0D8C                     	;# 
  3927  0D8C                     	;# 
  3928  0D8D                     	;# 
  3929  0D8E                     	;# 
  3930  0D8F                     	;# 
  3931  0D8F                     	;# 
  3932  0D90                     	;# 
  3933  0D91                     	;# 
  3934  0D92                     	;# 
  3935  0D92                     	;# 
  3936  0D93                     	;# 
  3937  0D94                     	;# 
  3938  0D95                     	;# 
  3939  0D95                     	;# 
  3940  0D96                     	;# 
  3941  0D97                     	;# 
  3942  0D98                     	;# 
  3943  0D99                     	;# 
  3944  0D9A                     	;# 
  3945  0D9B                     	;# 
  3946  0D9C                     	;# 
  3947  0D9D                     	;# 
  3948  0D9E                     	;# 
  3949  0D9E                     	;# 
  3950  0D9F                     	;# 
  3951  0DA0                     	;# 
  3952  0DA1                     	;# 
  3953  0DA1                     	;# 
  3954  0DA2                     	;# 
  3955  0DA3                     	;# 
  3956  0DA4                     	;# 
  3957  0DA4                     	;# 
  3958  0DA5                     	;# 
  3959  0DA6                     	;# 
  3960  0DA7                     	;# 
  3961  0DA7                     	;# 
  3962  0DA8                     	;# 
  3963  0DA9                     	;# 
  3964  0DAA                     	;# 
  3965  0DAB                     	;# 
  3966  0DAC                     	;# 
  3967  0DAD                     	;# 
  3968  0DAE                     	;# 
  3969  0DAF                     	;# 
  3970  0E0F                     	;# 
  3971  0E10                     	;# 
  3972  0E11                     	;# 
  3973  0E12                     	;# 
  3974  0E13                     	;# 
  3975  0E14                     	;# 
  3976  0E15                     	;# 
  3977  0E16                     	;# 
  3978  0E17                     	;# 
  3979  0E18                     	;# 
  3980  0E19                     	;# 
  3981  0E1A                     	;# 
  3982  0E1B                     	;# 
  3983  0E1C                     	;# 
  3984  0E1D                     	;# 
  3985  0E1E                     	;# 
  3986  0E1F                     	;# 
  3987  0E20                     	;# 
  3988  0E21                     	;# 
  3989  0E22                     	;# 
  3990  0E23                     	;# 
  3991  0E24                     	;# 
  3992  0E25                     	;# 
  3993  0E26                     	;# 
  3994  0E27                     	;# 
  3995  0E28                     	;# 
  3996  0E29                     	;# 
  3997  0E2A                     	;# 
  3998  0E2B                     	;# 
  3999  0E2C                     	;# 
  4000  0E2D                     	;# 
  4001  0E2E                     	;# 
  4002  0E90                     	;# 
  4003  0E91                     	;# 
  4004  0E92                     	;# 
  4005  0E94                     	;# 
  4006  0E95                     	;# 
  4007  0E9C                     	;# 
  4008  0E9D                     	;# 
  4009  0E9E                     	;# 
  4010  0E9F                     	;# 
  4011  0EA0                     	;# 
  4012  0EA1                     	;# 
  4013  0EA2                     	;# 
  4014  0EA3                     	;# 
  4015  0EA4                     	;# 
  4016  0EA5                     	;# 
  4017  0EA6                     	;# 
  4018  0EA7                     	;# 
  4019  0F0F                     	;# 
  4020  0F10                     	;# 
  4021  0F11                     	;# 
  4022  0F12                     	;# 
  4023  0F13                     	;# 
  4024  0F14                     	;# 
  4025  0F15                     	;# 
  4026  0F16                     	;# 
  4027  0F17                     	;# 
  4028  0F18                     	;# 
  4029  0F19                     	;# 
  4030  0F1A                     	;# 
  4031  0F1B                     	;# 
  4032  0F1C                     	;# 
  4033  0F1D                     	;# 
  4034  0F1E                     	;# 
  4035  0F1F                     	;# 
  4036  0F20                     	;# 
  4037  0F21                     	;# 
  4038  0F22                     	;# 
  4039  0F23                     	;# 
  4040  0F24                     	;# 
  4041  0F25                     	;# 
  4042  0F26                     	;# 
  4043  0F27                     	;# 
  4044  0F28                     	;# 
  4045  0F29                     	;# 
  4046  0F2A                     	;# 
  4047  0F2B                     	;# 
  4048  0F2C                     	;# 
  4049  0F2D                     	;# 
  4050  0F2E                     	;# 
  4051  0F2F                     	;# 
  4052  0F30                     	;# 
  4053  0F31                     	;# 
  4054  0F32                     	;# 
  4055  0F33                     	;# 
  4056  0F34                     	;# 
  4057  0F35                     	;# 
  4058  0F36                     	;# 
  4059  0F37                     	;# 
  4060  0FE4                     	;# 
  4061  0FE5                     	;# 
  4062  0FE6                     	;# 
  4063  0FE7                     	;# 
  4064  0FE8                     	;# 
  4065  0FE9                     	;# 
  4066  0FEA                     	;# 
  4067  0FEB                     	;# 
  4068  0FED                     	;# 
  4069  0FEE                     	;# 
  4070  0FEF                     	;# 
  4071  0000                     	;# 
  4072  0001                     	;# 
  4073  0002                     	;# 
  4074  0003                     	;# 
  4075  0004                     	;# 
  4076  0005                     	;# 
  4077  0006                     	;# 
  4078  0007                     	;# 
  4079  0008                     	;# 
  4080  0009                     	;# 
  4081  000A                     	;# 
  4082  000B                     	;# 
  4083  000C                     	;# 
  4084  000D                     	;# 
  4085  000E                     	;# 
  4086  0010                     	;# 
  4087  0011                     	;# 
  4088  0012                     	;# 
  4089  0013                     	;# 
  4090  0014                     	;# 
  4091  0015                     	;# 
  4092  0016                     	;# 
  4093  0016                     	;# 
  4094  0017                     	;# 
  4095  0018                     	;# 
  4096  0019                     	;# 
  4097  001A                     	;# 
  4098  001A                     	;# 
  4099  001B                     	;# 
  4100  001B                     	;# 
  4101  001C                     	;# 
  4102  001D                     	;# 
  4103  001E                     	;# 
  4104  001F                     	;# 
  4105  008C                     	;# 
  4106  008D                     	;# 
  4107  008E                     	;# 
  4108  0090                     	;# 
  4109  0091                     	;# 
  4110  0092                     	;# 
  4111  0093                     	;# 
  4112  0094                     	;# 
  4113  0095                     	;# 
  4114  0096                     	;# 
  4115  0098                     	;# 
  4116  0099                     	;# 
  4117  009A                     	;# 
  4118  009B                     	;# 
  4119  009B                     	;# 
  4120  009C                     	;# 
  4121  009D                     	;# 
  4122  009E                     	;# 
  4123  009F                     	;# 
  4124  010C                     	;# 
  4125  010D                     	;# 
  4126  010E                     	;# 
  4127  0111                     	;# 
  4128  0112                     	;# 
  4129  0113                     	;# 
  4130  0114                     	;# 
  4131  0115                     	;# 
  4132  0116                     	;# 
  4133  0117                     	;# 
  4134  0118                     	;# 
  4135  0119                     	;# 
  4136  011C                     	;# 
  4137  018C                     	;# 
  4138  018D                     	;# 
  4139  018E                     	;# 
  4140  0191                     	;# 
  4141  0191                     	;# 
  4142  0192                     	;# 
  4143  0193                     	;# 
  4144  0193                     	;# 
  4145  0194                     	;# 
  4146  0195                     	;# 
  4147  0196                     	;# 
  4148  0197                     	;# 
  4149  0199                     	;# 
  4150  0199                     	;# 
  4151  0199                     	;# 
  4152  019A                     	;# 
  4153  019A                     	;# 
  4154  019A                     	;# 
  4155  019B                     	;# 
  4156  019B                     	;# 
  4157  019B                     	;# 
  4158  019B                     	;# 
  4159  019B                     	;# 
  4160  019C                     	;# 
  4161  019C                     	;# 
  4162  019C                     	;# 
  4163  019D                     	;# 
  4164  019D                     	;# 
  4165  019D                     	;# 
  4166  019E                     	;# 
  4167  019E                     	;# 
  4168  019E                     	;# 
  4169  019F                     	;# 
  4170  019F                     	;# 
  4171  019F                     	;# 
  4172  019F                     	;# 
  4173  019F                     	;# 
  4174  020C                     	;# 
  4175  020D                     	;# 
  4176  020E                     	;# 
  4177  0211                     	;# 
  4178  0211                     	;# 
  4179  0212                     	;# 
  4180  0212                     	;# 
  4181  0213                     	;# 
  4182  0213                     	;# 
  4183  0214                     	;# 
  4184  0214                     	;# 
  4185  0215                     	;# 
  4186  0215                     	;# 
  4187  0215                     	;# 
  4188  0215                     	;# 
  4189  0216                     	;# 
  4190  0216                     	;# 
  4191  0217                     	;# 
  4192  0217                     	;# 
  4193  028C                     	;# 
  4194  028D                     	;# 
  4195  028E                     	;# 
  4196  0291                     	;# 
  4197  0291                     	;# 
  4198  0292                     	;# 
  4199  0293                     	;# 
  4200  0294                     	;# 
  4201  0298                     	;# 
  4202  0298                     	;# 
  4203  0299                     	;# 
  4204  029A                     	;# 
  4205  029B                     	;# 
  4206  029E                     	;# 
  4207  030C                     	;# 
  4208  030D                     	;# 
  4209  030E                     	;# 
  4210  038C                     	;# 
  4211  038D                     	;# 
  4212  038E                     	;# 
  4213  0391                     	;# 
  4214  0392                     	;# 
  4215  0393                     	;# 
  4216  0394                     	;# 
  4217  0395                     	;# 
  4218  0396                     	;# 
  4219  0397                     	;# 
  4220  0398                     	;# 
  4221  0399                     	;# 
  4222  040E                     	;# 
  4223  0413                     	;# 
  4224  0413                     	;# 
  4225  0414                     	;# 
  4226  0414                     	;# 
  4227  0415                     	;# 
  4228  0416                     	;# 
  4229  0417                     	;# 
  4230  0418                     	;# 
  4231  041A                     	;# 
  4232  041A                     	;# 
  4233  041B                     	;# 
  4234  041B                     	;# 
  4235  041C                     	;# 
  4236  041D                     	;# 
  4237  041E                     	;# 
  4238  041F                     	;# 
  4239  0493                     	;# 
  4240  0494                     	;# 
  4241  0495                     	;# 
  4242  0496                     	;# 
  4243  049A                     	;# 
  4244  049B                     	;# 
  4245  049C                     	;# 
  4246  049D                     	;# 
  4247  058C                     	;# 
  4248  058C                     	;# 
  4249  058D                     	;# 
  4250  058E                     	;# 
  4251  058E                     	;# 
  4252  058F                     	;# 
  4253  0590                     	;# 
  4254  0590                     	;# 
  4255  0591                     	;# 
  4256  0592                     	;# 
  4257  0592                     	;# 
  4258  0593                     	;# 
  4259  0594                     	;# 
  4260  0594                     	;# 
  4261  0595                     	;# 
  4262  0596                     	;# 
  4263  0596                     	;# 
  4264  0597                     	;# 
  4265  0598                     	;# 
  4266  0599                     	;# 
  4267  059A                     	;# 
  4268  059B                     	;# 
  4269  059B                     	;# 
  4270  059C                     	;# 
  4271  059D                     	;# 
  4272  060C                     	;# 
  4273  060C                     	;# 
  4274  060D                     	;# 
  4275  060E                     	;# 
  4276  060F                     	;# 
  4277  060F                     	;# 
  4278  0610                     	;# 
  4279  0611                     	;# 
  4280  0612                     	;# 
  4281  0613                     	;# 
  4282  0614                     	;# 
  4283  0617                     	;# 
  4284  0618                     	;# 
  4285  0619                     	;# 
  4286  061A                     	;# 
  4287  061B                     	;# 
  4288  061C                     	;# 
  4289  0691                     	;# 
  4290  0692                     	;# 
  4291  0693                     	;# 
  4292  0694                     	;# 
  4293  0695                     	;# 
  4294  0696                     	;# 
  4295  0697                     	;# 
  4296  0699                     	;# 
  4297  069A                     	;# 
  4298  0711                     	;# 
  4299  0712                     	;# 
  4300  0713                     	;# 
  4301  0714                     	;# 
  4302  0715                     	;# 
  4303  0718                     	;# 
  4304  0718                     	;# 
  4305  0719                     	;# 
  4306  071A                     	;# 
  4307  071A                     	;# 
  4308  071B                     	;# 
  4309  071C                     	;# 
  4310  071D                     	;# 
  4311  0791                     	;# 
  4312  0791                     	;# 
  4313  0792                     	;# 
  4314  0793                     	;# 
  4315  0793                     	;# 
  4316  0794                     	;# 
  4317  0795                     	;# 
  4318  0795                     	;# 
  4319  0796                     	;# 
  4320  0797                     	;# 
  4321  0797                     	;# 
  4322  0798                     	;# 
  4323  0799                     	;# 
  4324  079A                     	;# 
  4325  080C                     	;# 
  4326  080C                     	;# 
  4327  080D                     	;# 
  4328  080E                     	;# 
  4329  080E                     	;# 
  4330  080F                     	;# 
  4331  0810                     	;# 
  4332  0810                     	;# 
  4333  0811                     	;# 
  4334  0812                     	;# 
  4335  0812                     	;# 
  4336  0813                     	;# 
  4337  0814                     	;# 
  4338  0815                     	;# 
  4339  0816                     	;# 
  4340  0817                     	;# 
  4341  0818                     	;# 
  4342  0819                     	;# 
  4343  081A                     	;# 
  4344  081A                     	;# 
  4345  081B                     	;# 
  4346  081C                     	;# 
  4347  081C                     	;# 
  4348  081D                     	;# 
  4349  088C                     	;# 
  4350  088D                     	;# 
  4351  088E                     	;# 
  4352  088F                     	;# 
  4353  088F                     	;# 
  4354  0890                     	;# 
  4355  0891                     	;# 
  4356  0892                     	;# 
  4357  0893                     	;# 
  4358  0893                     	;# 
  4359  0894                     	;# 
  4360  0895                     	;# 
  4361  0896                     	;# 
  4362  0897                     	;# 
  4363  0897                     	;# 
  4364  0898                     	;# 
  4365  0899                     	;# 
  4366  0D8C                     	;# 
  4367  0D8C                     	;# 
  4368  0D8D                     	;# 
  4369  0D8E                     	;# 
  4370  0D8F                     	;# 
  4371  0D8F                     	;# 
  4372  0D90                     	;# 
  4373  0D91                     	;# 
  4374  0D92                     	;# 
  4375  0D92                     	;# 
  4376  0D93                     	;# 
  4377  0D94                     	;# 
  4378  0D95                     	;# 
  4379  0D95                     	;# 
  4380  0D96                     	;# 
  4381  0D97                     	;# 
  4382  0D98                     	;# 
  4383  0D99                     	;# 
  4384  0D9A                     	;# 
  4385  0D9B                     	;# 
  4386  0D9C                     	;# 
  4387  0D9D                     	;# 
  4388  0D9E                     	;# 
  4389  0D9E                     	;# 
  4390  0D9F                     	;# 
  4391  0DA0                     	;# 
  4392  0DA1                     	;# 
  4393  0DA1                     	;# 
  4394  0DA2                     	;# 
  4395  0DA3                     	;# 
  4396  0DA4                     	;# 
  4397  0DA4                     	;# 
  4398  0DA5                     	;# 
  4399  0DA6                     	;# 
  4400  0DA7                     	;# 
  4401  0DA7                     	;# 
  4402  0DA8                     	;# 
  4403  0DA9                     	;# 
  4404  0DAA                     	;# 
  4405  0DAB                     	;# 
  4406  0DAC                     	;# 
  4407  0DAD                     	;# 
  4408  0DAE                     	;# 
  4409  0DAF                     	;# 
  4410  0E0F                     	;# 
  4411  0E10                     	;# 
  4412  0E11                     	;# 
  4413  0E12                     	;# 
  4414  0E13                     	;# 
  4415  0E14                     	;# 
  4416  0E15                     	;# 
  4417  0E16                     	;# 
  4418  0E17                     	;# 
  4419  0E18                     	;# 
  4420  0E19                     	;# 
  4421  0E1A                     	;# 
  4422  0E1B                     	;# 
  4423  0E1C                     	;# 
  4424  0E1D                     	;# 
  4425  0E1E                     	;# 
  4426  0E1F                     	;# 
  4427  0E20                     	;# 
  4428  0E21                     	;# 
  4429  0E22                     	;# 
  4430  0E23                     	;# 
  4431  0E24                     	;# 
  4432  0E25                     	;# 
  4433  0E26                     	;# 
  4434  0E27                     	;# 
  4435  0E28                     	;# 
  4436  0E29                     	;# 
  4437  0E2A                     	;# 
  4438  0E2B                     	;# 
  4439  0E2C                     	;# 
  4440  0E2D                     	;# 
  4441  0E2E                     	;# 
  4442  0E90                     	;# 
  4443  0E91                     	;# 
  4444  0E92                     	;# 
  4445  0E94                     	;# 
  4446  0E95                     	;# 
  4447  0E9C                     	;# 
  4448  0E9D                     	;# 
  4449  0E9E                     	;# 
  4450  0E9F                     	;# 
  4451  0EA0                     	;# 
  4452  0EA1                     	;# 
  4453  0EA2                     	;# 
  4454  0EA3                     	;# 
  4455  0EA4                     	;# 
  4456  0EA5                     	;# 
  4457  0EA6                     	;# 
  4458  0EA7                     	;# 
  4459  0F0F                     	;# 
  4460  0F10                     	;# 
  4461  0F11                     	;# 
  4462  0F12                     	;# 
  4463  0F13                     	;# 
  4464  0F14                     	;# 
  4465  0F15                     	;# 
  4466  0F16                     	;# 
  4467  0F17                     	;# 
  4468  0F18                     	;# 
  4469  0F19                     	;# 
  4470  0F1A                     	;# 
  4471  0F1B                     	;# 
  4472  0F1C                     	;# 
  4473  0F1D                     	;# 
  4474  0F1E                     	;# 
  4475  0F1F                     	;# 
  4476  0F20                     	;# 
  4477  0F21                     	;# 
  4478  0F22                     	;# 
  4479  0F23                     	;# 
  4480  0F24                     	;# 
  4481  0F25                     	;# 
  4482  0F26                     	;# 
  4483  0F27                     	;# 
  4484  0F28                     	;# 
  4485  0F29                     	;# 
  4486  0F2A                     	;# 
  4487  0F2B                     	;# 
  4488  0F2C                     	;# 
  4489  0F2D                     	;# 
  4490  0F2E                     	;# 
  4491  0F2F                     	;# 
  4492  0F30                     	;# 
  4493  0F31                     	;# 
  4494  0F32                     	;# 
  4495  0F33                     	;# 
  4496  0F34                     	;# 
  4497  0F35                     	;# 
  4498  0F36                     	;# 
  4499  0F37                     	;# 
  4500  0FE4                     	;# 
  4501  0FE5                     	;# 
  4502  0FE6                     	;# 
  4503  0FE7                     	;# 
  4504  0FE8                     	;# 
  4505  0FE9                     	;# 
  4506  0FEA                     	;# 
  4507  0FEB                     	;# 
  4508  0FED                     	;# 
  4509  0FEE                     	;# 
  4510  0FEF                     	;# 
  4511                           
  4512                           	psect	idataBANK0
  4513  091D                     __pidataBANK0:	
  4514                           
  4515                           ;initializer for _prevRow
  4516  091D  34FF               	retlw	255
  4517                           
  4518                           ;initializer for _checkClock
  4519  091E  3401               	retlw	1
  4520                           
  4521                           ;initializer for _SECOND_MULTIPLIER
  4522  091F  3404               	retlw	4
  4523                           
  4524                           	psect	idataBANK1
  4525  07F2                     __pidataBANK1:	
  4526                           
  4527                           ;initializer for _tick
  4528  07F2  34F0               	retlw	240
  4529  07F3  3400               	retlw	0
  4530                           
  4531                           ;initializer for _DISPLAYBANK_row
  4532  07F4  3401               	retlw	1
  4533  07F5  3402               	retlw	2
  4534  07F6  34FF               	retlw	-1
  4535  07F7  3400               	retlw	0
  4536  07F8  3400               	retlw	0
  4537  07F9  3400               	retlw	0
  4538  07FA  3400               	retlw	0
  4539  07FB  3400               	retlw	0
  4540  07FC  3400               	retlw	0
  4541  07FD  3400               	retlw	0
  4542  07FE  3400               	retlw	0
  4543                           
  4544                           	psect	idataBANK2
  4545  0971                     __pidataBANK2:	
  4546                           
  4547                           ;initializer for _DISPLAYBANK_row_l
  4548  0971  3400               	retlw	0
  4549  0972  3401               	retlw	1
  4550  0973  3400               	retlw	0
  4551  0974  3401               	retlw	1
  4552  0975  3400               	retlw	0
  4553  0976  3401               	retlw	1
  4554  0977  3400               	retlw	0
  4555  0978  3401               	retlw	1
  4556  0979  3400               	retlw	0
  4557  097A  3401               	retlw	1
  4558  097B  3400               	retlw	0
  4559  097C  3401               	retlw	1
  4560                           
  4561                           	psect	idataBANK3
  4562  0B99                     __pidataBANK3:	
  4563                           
  4564                           ;initializer for _DISPLAYBANK_col_l
  4565  0B99  3401               	retlw	1
  4566  0B9A  3400               	retlw	0
  4567  0B9B  3401               	retlw	1
  4568  0B9C  3400               	retlw	0
  4569  0B9D  3402               	retlw	2
  4570  0B9E  3400               	retlw	0
  4571  0B9F  3402               	retlw	2
  4572  0BA0  3400               	retlw	0
  4573  0BA1  3403               	retlw	3
  4574  0BA2  3400               	retlw	0
  4575  0BA3  3403               	retlw	3
  4576  0BA4  3400               	retlw	0
  4577  0BA5  3404               	retlw	4
  4578  0BA6  3400               	retlw	0
  4579  0BA7  3404               	retlw	4
  4580  0BA8  3400               	retlw	0
  4581  0BA9  3405               	retlw	5
  4582  0BAA  3400               	retlw	0
  4583  0BAB  3405               	retlw	5
  4584  0BAC  3400               	retlw	0
  4585  0BAD  3406               	retlw	6
  4586  0BAE  3400               	retlw	0
  4587  0BAF  3406               	retlw	6
  4588  0BB0  3400               	retlw	0
  4589  0BB1  341B               	retlw	27
  4590  0BB2  3400               	retlw	0
  4591  0BB3  340F               	retlw	15
  4592  0BB4  3400               	retlw	0
  4593  0BB5  340F               	retlw	15
  4594  0BB6  3400               	retlw	0
  4595  0BB7  34E0               	retlw	224
  4596  0BB8  3407               	retlw	7
  4597  0BB9  341B               	retlw	27
  4598  0BBA  3400               	retlw	0
  4599  0BBB  340F               	retlw	15
  4600  0BBC  3400               	retlw	0
  4601  0BBD  340F               	retlw	15
  4602  0BBE  3400               	retlw	0
  4603  0BBF  34E0               	retlw	224
  4604  0BC0  3407               	retlw	7
  4605                           
  4606                           	psect	nvBANK1
  4607  00EB                     __pnvBANK1:	
  4608  00EB                     _IOCCF3_InterruptHandler:	
  4609  00EB                     	ds	2
  4610  00ED                     _IOCCF2_InterruptHandler:	
  4611  00ED                     	ds	2
  4612  0019                     _T1GCONbits	set	25
  4613  0018                     _T1CONbits	set	24
  4614  0016                     _TMR1L	set	22
  4615  0017                     _TMR1H	set	23
  4616  0019                     _T1GCON	set	25
  4617  0018                     _T1CON	set	24
  4618  0011                     _PIR2bits	set	17
  4619  0010                     _PIR1bits	set	16
  4620  000B                     _INTCONbits	set	11
  4621  005F                     _GIE	set	95
  4622  0091                     _PIE2bits	set	145
  4623  0090                     _PIE1bits	set	144
  4624  0095                     _OPTION_REGbits	set	149
  4625  008E                     _TRISC	set	142
  4626  008D                     _TRISB	set	141
  4627  008C                     _TRISA	set	140
  4628  0098                     _OSCTUNE	set	152
  4629  0099                     _OSCCON	set	153
  4630  04D6                     _PLLR	set	1238
  4631  010E                     _LATC	set	270
  4632  010D                     _LATB	set	269
  4633  010C                     _LATA	set	268
  4634  018C                     _ANSELA	set	396
  4635  018D                     _ANSELB	set	397
  4636  018E                     _ANSELC	set	398
  4637  0211                     _SSP1BUF	set	529
  4638  0216                     _SSP1CON2bits	set	534
  4639  0215                     _SSP1CON1bits	set	533
  4640  0212                     _SSP1ADD	set	530
  4641  0217                     _SSP1CON3	set	535
  4642  0215                     _SSP1CON1	set	533
  4643  0214                     _SSP1STAT	set	532
  4644  020E                     _WPUC	set	526
  4645  020C                     _WPUA	set	524
  4646  020D                     _WPUB	set	525
  4647  028E                     _ODCONC	set	654
  4648  028D                     _ODCONB	set	653
  4649  028C                     _ODCONA	set	652
  4650  0397                     _IOCCPbits	set	919
  4651  0398                     _IOCCNbits	set	920
  4652  0399                     _IOCCFbits	set	921
  4653  0E21                     _SSPDATPPS	set	3617
  4654  0E20                     _SSPCLKPPS	set	3616
  4655  0E0F                     _PPSLOCKbits	set	3599
  4656  0E0F                     _PPSLOCK	set	3599
  4657  0E9C                     _RB4PPS	set	3740
  4658  0E9E                     _RB6PPS	set	3742
  4659                           
  4660                           ; #config settings
  4661  0000                     
  4662                           	psect	cinit
  4663  0039                     start_initialization:	
  4664  0039                     __initialization:	
  4665                           
  4666                           ; Initialize objects allocated to BANK0
  4667  0039  301D               	movlw	low __pidataBANK0
  4668  003A  0084               	movwf	4
  4669  003B  3089               	movlw	(high __pidataBANK0)| (0+128)
  4670  003C  0085               	movwf	5
  4671  003D  3052               	movlw	low __pdataBANK0
  4672  003E  0086               	movwf	6
  4673  003F  3000               	movlw	high __pdataBANK0
  4674  0040  0087               	movwf	7
  4675  0041  3003               	movlw	3
  4676  0042  3189  2138  3180   	fcall	init_ram
  4677                           
  4678                           ; Initialize objects allocated to BANK1
  4679  0045  30F2               	movlw	low __pidataBANK1
  4680  0046  0084               	movwf	4
  4681  0047  3087               	movlw	(high __pidataBANK1)| (0+128)
  4682  0048  0085               	movwf	5
  4683  0049  30DE               	movlw	low __pdataBANK1
  4684  004A  0086               	movwf	6
  4685  004B  3000               	movlw	high __pdataBANK1
  4686  004C  0087               	movwf	7
  4687  004D  300D               	movlw	13
  4688  004E  3189  2138  3180   	fcall	init_ram
  4689                           
  4690                           ; Initialize objects allocated to BANK2
  4691  0051  3071               	movlw	low __pidataBANK2
  4692  0052  0084               	movwf	4
  4693  0053  3089               	movlw	(high __pidataBANK2)| (0+128)
  4694  0054  0085               	movwf	5
  4695  0055  3049               	movlw	low __pdataBANK2
  4696  0056  0086               	movwf	6
  4697  0057  3001               	movlw	high __pdataBANK2
  4698  0058  0087               	movwf	7
  4699  0059  300C               	movlw	12
  4700  005A  3189  2138  3180   	fcall	init_ram
  4701                           
  4702                           ; Initialize objects allocated to BANK3
  4703  005D  3099               	movlw	low __pidataBANK3
  4704  005E  0084               	movwf	4
  4705  005F  308B               	movlw	(high __pidataBANK3)| (0+128)
  4706  0060  0085               	movwf	5
  4707  0061  30A0               	movlw	low __pdataBANK3
  4708  0062  0086               	movwf	6
  4709  0063  3001               	movlw	high __pdataBANK3
  4710  0064  0087               	movwf	7
  4711  0065  3028               	movlw	40
  4712  0066  3189  2138  3180   	fcall	init_ram
  4713                           
  4714                           ; Clear objects allocated to BANK0
  4715  0069  303C               	movlw	low __pbssBANK0
  4716  006A  0084               	movwf	4
  4717  006B  3000               	movlw	high __pbssBANK0
  4718  006C  0085               	movwf	5
  4719  006D  3016               	movlw	22
  4720  006E  3189  2132  3180   	fcall	clear_ram0
  4721                           
  4722                           ; Clear objects allocated to BANK1
  4723  0071  30C4               	movlw	low __pbssBANK1
  4724  0072  0084               	movwf	4
  4725  0073  3000               	movlw	high __pbssBANK1
  4726  0074  0085               	movwf	5
  4727  0075  301A               	movlw	26
  4728  0076  3189  2132  3180   	fcall	clear_ram0
  4729                           
  4730                           ; Clear objects allocated to BANK2
  4731  0079  3035               	movlw	low __pbssBANK2
  4732  007A  0084               	movwf	4
  4733  007B  3001               	movlw	high __pbssBANK2
  4734  007C  0085               	movwf	5
  4735  007D  3014               	movlw	20
  4736  007E  3189  2132         	fcall	clear_ram0
  4737  0080                     end_of_initialization:	
  4738                           ;End of C runtime variable initialization code
  4739                           
  4740  0080                     __end_of__initialization:	
  4741  0080  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4742  0081  0020               	movlb	0
  4743  0082  3187  2F21         	ljmp	_main	;jump to C main() function
  4744                           
  4745                           	psect	bssBANK0
  4746  003C                     __pbssBANK0:	
  4747  003C                     _i2c_object:	
  4748  003C                     	ds	5
  4749  0041                     _timer1ReloadVal:	
  4750  0041                     	ds	2
  4751  0043                     I2C_ISR@pi2c_buf_ptr:	
  4752  0043                     	ds	2
  4753  0045                     _secondaryTick:	
  4754  0045                     	ds	1
  4755  0046                     _settingHours:	
  4756  0046                     	ds	1
  4757  0047                     _setDir:	
  4758  0047                     	ds	1
  4759  0048                     _setClock:	
  4760  0048                     	ds	1
  4761  0049                     _writeClock:	
  4762  0049                     	ds	1
  4763  004A                     I2C_ISR@i2c_10bit_address_restart:	
  4764  004A                     	ds	1
  4765  004B                     I2C_ISR@i2c_bytes_left:	
  4766  004B                     	ds	1
  4767  004C                     _p_i2c_current:	
  4768  004C                     	ds	1
  4769  004D                     _p_i2c_trb_current:	
  4770  004D                     	ds	1
  4771  004E                     _i2c_trb_count:	
  4772  004E                     	ds	1
  4773  004F                     _i2c_state:	
  4774  004F                     	ds	1
  4775  0050                     I2C_ISR@i2c_address:	
  4776  0050                     	ds	2
  4777                           
  4778                           	psect	dataBANK0
  4779  0052                     __pdataBANK0:	
  4780  0052                     _prevRow:	
  4781  0052                     	ds	1
  4782  0053                     _checkClock:	
  4783  0053                     	ds	1
  4784  0054                     _SECOND_MULTIPLIER:	
  4785  0054                     	ds	1
  4786                           
  4787                           	psect	bssBANK1
  4788  00C4                     __pbssBANK1:	
  4789  00C4                     TMR1_ISR@CountCallBack:	
  4790  00C4                     	ds	2
  4791  00C6                     _TMR1_InterruptHandler:	
  4792  00C6                     	ds	2
  4793  00C8                     _min:	
  4794  00C8                     	ds	1
  4795  00C9                     _sec:	
  4796  00C9                     	ds	1
  4797  00CA                     _localMins:	
  4798  00CA                     	ds	1
  4799  00CB                     _localHour:	
  4800  00CB                     	ds	1
  4801  00CC                     _action:	
  4802  00CC                     	ds	1
  4803  00CD                     _blank:	
  4804  00CD                     	ds	1
  4805  00CE                     _mainState:	
  4806  00CE                     	ds	1
  4807  00CF                     I2C_MasterRead@trBlock:	
  4808  00CF                     	ds	5
  4809  00D4                     I2C_MasterWrite@trBlock:	
  4810  00D4                     	ds	5
  4811  00D9                     _i2c_tr_queue:	
  4812  00D9                     	ds	4
  4813  00DD                     _hour:	
  4814  00DD                     	ds	1
  4815                           
  4816                           	psect	dataBANK1
  4817  00DE                     __pdataBANK1:	
  4818  00DE                     _tick:	
  4819  00DE                     	ds	2
  4820  00E0                     _DISPLAYBANK_row:	
  4821  00E0                     	ds	11
  4822                           
  4823                           	psect	bssBANK2
  4824  0135                     __pbssBANK2:	
  4825  0135                     _DISPLAYBANK_col:	
  4826  0135                     	ds	20
  4827                           
  4828                           	psect	dataBANK2
  4829  0149                     __pdataBANK2:	
  4830  0149                     _DISPLAYBANK_row_l:	
  4831  0149                     	ds	12
  4832                           
  4833                           	psect	dataBANK3
  4834  01A0                     __pdataBANK3:	
  4835  01A0                     _DISPLAYBANK_col_l:	
  4836  01A0                     	ds	40
  4837                           
  4838                           	psect	inittext
  4839  0938                     init_ram:	
  4840  0938  00FE               	movwf	126
  4841  0939                     initloop:	
  4842  0939  0012               	moviw fsr0++
  4843  093A  001E               	movwi fsr1++
  4844  093B  0BFE               	decfsz	126,f
  4845  093C  2939               	goto	initloop
  4846  093D  3400               	retlw	0
  4847                           
  4848                           	psect	clrtext
  4849  0932                     clear_ram0:	
  4850                           ;	Called with FSR0 containing the base address, and
  4851                           ;	WREG with the size to clear
  4852                           
  4853  0932  0064               	clrwdt	;clear the watchdog before getting into this loop
  4854  0933                     clrloop0:	
  4855  0933  0180               	clrf	0	;clear RAM location pointed to by FSR
  4856  0934  3101               	addfsr 0,1
  4857  0935  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4858  0936  2933               	goto	clrloop0	;have we reached the end yet?
  4859  0937  3400               	retlw	0	;all done for this memory range, return
  4860                           
  4861                           	psect	cstackBANK2
  4862  0120                     __pcstackBANK2:	
  4863  0120                     Clock_Initialize@status:	
  4864  0120                     Acc_Initialize@dataBuffer:	
  4865                           ; 1 bytes @ 0x0
  4866                           
  4867                           
  4868                           ; 6 bytes @ 0x0
  4869  0120                     	ds	1
  4870  0121                     Clock_Initialize@start:	
  4871                           
  4872                           ; 1 bytes @ 0x1
  4873  0121                     	ds	1
  4874  0122                     Clock_Initialize@writeBuffer:	
  4875                           
  4876                           ; 5 bytes @ 0x2
  4877  0122                     	ds	4
  4878  0126                     Acc_Initialize@status:	
  4879                           
  4880                           ; 1 bytes @ 0x6
  4881  0126                     	ds	1
  4882  0127                     Acc_Initialize@writeBuffer:	
  4883                           
  4884                           ; 8 bytes @ 0x7
  4885  0127                     	ds	8
  4886  012F                     ??_main:	
  4887                           
  4888                           ; 1 bytes @ 0xF
  4889  012F                     	ds	2
  4890  0131                     main@mask:	
  4891                           
  4892                           ; 2 bytes @ 0x11
  4893  0131                     	ds	2
  4894  0133                     main@i:	
  4895                           
  4896                           ; 1 bytes @ 0x13
  4897  0133                     	ds	1
  4898  0134                     main@row:	
  4899                           
  4900                           ; 1 bytes @ 0x14
  4901  0134                     	ds	1
  4902                           
  4903                           	psect	cstackBANK1
  4904  00A0                     __pcstackBANK1:	
  4905  00A0                     ?_IOCCF2_SetInterruptHandler:	
  4906  00A0                     ?_IOCCF3_SetInterruptHandler:	
  4907                           ; 1 bytes @ 0x0
  4908                           
  4909  00A0                     ?_I2C_MasterWriteTRBBuild:	
  4910                           ; 1 bytes @ 0x0
  4911                           
  4912  00A0                     ?_I2C_MasterTRBInsert:	
  4913                           ; 1 bytes @ 0x0
  4914                           
  4915  00A0                     ?_I2C_MasterReadTRBBuild:	
  4916                           ; 1 bytes @ 0x0
  4917                           
  4918  00A0                     ?_TMR1_SetInterruptHandler:	
  4919                           ; 1 bytes @ 0x0
  4920                           
  4921  00A0                     I2C_MasterTRBInsert@ptrb_list:	
  4922                           ; 1 bytes @ 0x0
  4923                           
  4924  00A0                     Delay@length:	
  4925                           ; 1 bytes @ 0x0
  4926                           
  4927  00A0                     IOCCF2_SetInterruptHandler@InterruptHandler:	
  4928                           ; 1 bytes @ 0x0
  4929                           
  4930  00A0                     IOCCF3_SetInterruptHandler@InterruptHandler:	
  4931                           ; 2 bytes @ 0x0
  4932                           
  4933  00A0                     I2C_MasterReadTRBBuild@pdata:	
  4934                           ; 2 bytes @ 0x0
  4935                           
  4936  00A0                     I2C_MasterWriteTRBBuild@pdata:	
  4937                           ; 2 bytes @ 0x0
  4938                           
  4939  00A0                     TMR1_SetInterruptHandler@InterruptHandler:	
  4940                           ; 2 bytes @ 0x0
  4941                           
  4942                           
  4943                           ; 2 bytes @ 0x0
  4944  00A0                     	ds	1
  4945  00A1                     I2C_MasterTRBInsert@pflag:	
  4946  00A1                     Delay@i:	
  4947                           ; 1 bytes @ 0x1
  4948                           
  4949                           
  4950                           ; 1 bytes @ 0x1
  4951  00A1                     	ds	1
  4952  00A2                     I2C_MasterTRBInsert@count:	
  4953  00A2                     I2C_MasterReadTRBBuild@length:	
  4954                           ; 1 bytes @ 0x2
  4955                           
  4956  00A2                     I2C_MasterWriteTRBBuild@length:	
  4957                           ; 1 bytes @ 0x2
  4958                           
  4959                           
  4960                           ; 1 bytes @ 0x2
  4961  00A2                     	ds	1
  4962  00A3                     I2C_MasterReadTRBBuild@address:	
  4963  00A3                     I2C_MasterWriteTRBBuild@address:	
  4964                           ; 2 bytes @ 0x3
  4965                           
  4966                           
  4967                           ; 2 bytes @ 0x3
  4968  00A3                     	ds	2
  4969  00A5                     ??_I2C_MasterWriteTRBBuild:	
  4970  00A5                     ??_I2C_MasterReadTRBBuild:	
  4971                           ; 1 bytes @ 0x5
  4972                           
  4973                           
  4974                           ; 1 bytes @ 0x5
  4975  00A5                     	ds	2
  4976  00A7                     ?_I2CRead:	
  4977  00A7                     ?_I2C_MasterWrite:	
  4978                           ; 1 bytes @ 0x7
  4979                           
  4980  00A7                     I2C_MasterWrite@pdata:	
  4981                           ; 1 bytes @ 0x7
  4982                           
  4983  00A7                     I2CRead@pdata:	
  4984                           ; 2 bytes @ 0x7
  4985                           
  4986                           
  4987                           ; 2 bytes @ 0x7
  4988  00A7                     	ds	2
  4989  00A9                     I2C_MasterWrite@length:	
  4990  00A9                     I2CRead@registerAddress:	
  4991                           ; 1 bytes @ 0x9
  4992                           
  4993                           
  4994                           ; 1 bytes @ 0x9
  4995  00A9                     	ds	1
  4996  00AA                     I2CRead@length:	
  4997  00AA                     I2C_MasterWrite@address:	
  4998                           ; 1 bytes @ 0xA
  4999                           
  5000                           
  5001                           ; 2 bytes @ 0xA
  5002  00AA                     	ds	1
  5003  00AB                     I2CRead@address:	
  5004                           
  5005                           ; 2 bytes @ 0xB
  5006  00AB                     	ds	1
  5007  00AC                     I2C_MasterWrite@pflag:	
  5008                           
  5009                           ; 1 bytes @ 0xC
  5010  00AC                     	ds	1
  5011  00AD                     ??_I2CRead:	
  5012  00AD                     ??_I2C_MasterWrite:	
  5013                           ; 1 bytes @ 0xD
  5014                           
  5015                           
  5016                           ; 1 bytes @ 0xD
  5017  00AD                     	ds	2
  5018  00AF                     ?_I2CWrite:	
  5019  00AF                     I2CRead@readBuffer:	
  5020                           ; 1 bytes @ 0xF
  5021                           
  5022  00AF                     I2CWrite@pdata:	
  5023                           ; 1 bytes @ 0xF
  5024                           
  5025                           
  5026                           ; 2 bytes @ 0xF
  5027  00AF                     	ds	1
  5028  00B0                     I2CRead@readTRB:	
  5029                           
  5030                           ; 10 bytes @ 0x10
  5031  00B0                     	ds	1
  5032  00B1                     I2CWrite@length:	
  5033                           
  5034                           ; 1 bytes @ 0x11
  5035  00B1                     	ds	1
  5036  00B2                     I2CWrite@address:	
  5037                           
  5038                           ; 2 bytes @ 0x12
  5039  00B2                     	ds	2
  5040  00B4                     ??_I2CWrite:	
  5041                           
  5042                           ; 1 bytes @ 0x14
  5043  00B4                     	ds	2
  5044  00B6                     I2CWrite@i:	
  5045                           
  5046                           ; 2 bytes @ 0x16
  5047  00B6                     	ds	2
  5048  00B8                     I2CWrite@status:	
  5049                           
  5050                           ; 1 bytes @ 0x18
  5051  00B8                     	ds	1
  5052  00B9                     ??_LED_Initialize:	
  5053  00B9                     ?_LED_Row:	
  5054                           ; 1 bytes @ 0x19
  5055                           
  5056  00B9                     ??_Clock_Write:	
  5057                           ; 1 bytes @ 0x19
  5058                           
  5059  00B9                     LED_Row@mask:	
  5060                           ; 1 bytes @ 0x19
  5061                           
  5062                           
  5063                           ; 2 bytes @ 0x19
  5064  00B9                     	ds	1
  5065  00BA                     LED_Initialize@status:	
  5066  00BA                     Clock_Write@status:	
  5067                           ; 1 bytes @ 0x1A
  5068                           
  5069  00BA                     I2CRead@status:	
  5070                           ; 1 bytes @ 0x1A
  5071                           
  5072                           
  5073                           ; 1 bytes @ 0x1A
  5074  00BA                     	ds	1
  5075  00BB                     ??_LED_Row:	
  5076  00BB                     ??_Acc_Initialize:	
  5077                           ; 1 bytes @ 0x1B
  5078                           
  5079  00BB                     ??_Clock_Read:	
  5080                           ; 1 bytes @ 0x1B
  5081                           
  5082  00BB                     LED_Initialize@writeBuffer:	
  5083                           ; 1 bytes @ 0x1B
  5084                           
  5085  00BB                     Clock_Write@writeBuffer:	
  5086                           ; 3 bytes @ 0x1B
  5087                           
  5088                           
  5089                           ; 4 bytes @ 0x1B
  5090  00BB                     	ds	1
  5091  00BC                     Clock_Read@dataBuffer:	
  5092                           
  5093                           ; 3 bytes @ 0x1C
  5094  00BC                     	ds	1
  5095  00BD                     LED_Row@writeBuffer:	
  5096                           
  5097                           ; 3 bytes @ 0x1D
  5098  00BD                     	ds	2
  5099  00BF                     ??_Clock_Initialize:	
  5100  00BF                     ??_Clock_Display:	
  5101                           ; 1 bytes @ 0x1F
  5102                           
  5103                           
  5104                           ; 1 bytes @ 0x1F
  5105  00BF                     	ds	1
  5106  00C0                     LED_Row@row:	
  5107  00C0                     Clock_Display@fetchTime:	
  5108                           ; 1 bytes @ 0x20
  5109                           
  5110                           
  5111                           ; 1 bytes @ 0x20
  5112  00C0                     	ds	1
  5113  00C1                     Clock_Display@hourDisplay:	
  5114                           
  5115                           ; 1 bytes @ 0x21
  5116  00C1                     	ds	1
  5117  00C2                     Clock_Display@col:	
  5118                           
  5119                           ; 1 bytes @ 0x22
  5120  00C2                     	ds	1
  5121  00C3                     Clock_Display@row:	
  5122                           
  5123                           ; 1 bytes @ 0x23
  5124  00C3                     	ds	1
  5125                           
  5126                           	psect	cstackCOMMON
  5127  0070                     __pcstackCOMMON:	
  5128  0070                     ?_PIN_MANAGER_Initialize:	
  5129  0070                     ?_OSCILLATOR_Initialize:	
  5130                           ; 1 bytes @ 0x0
  5131                           
  5132  0070                     ?_I2C_Initialize:	
  5133                           ; 1 bytes @ 0x0
  5134                           
  5135  0070                     ?_TMR1_Initialize:	
  5136                           ; 1 bytes @ 0x0
  5137                           
  5138  0070                     ?_IOCCF2_DefaultInterruptHandler:	
  5139                           ; 1 bytes @ 0x0
  5140                           
  5141  0070                     ??_IOCCF2_DefaultInterruptHandler:	
  5142                           ; 1 bytes @ 0x0
  5143                           
  5144  0070                     ?_IOCCF3_DefaultInterruptHandler:	
  5145                           ; 1 bytes @ 0x0
  5146                           
  5147  0070                     ??_IOCCF3_DefaultInterruptHandler:	
  5148                           ; 1 bytes @ 0x0
  5149                           
  5150  0070                     ?_IOCCF2_ISR:	
  5151                           ; 1 bytes @ 0x0
  5152                           
  5153  0070                     ?_IOCCF3_ISR:	
  5154                           ; 1 bytes @ 0x0
  5155                           
  5156  0070                     ?_I2C_Stop:	
  5157                           ; 1 bytes @ 0x0
  5158                           
  5159  0070                     ??_I2C_Stop:	
  5160                           ; 1 bytes @ 0x0
  5161                           
  5162  0070                     ?_I2C_FunctionComplete:	
  5163                           ; 1 bytes @ 0x0
  5164                           
  5165  0070                     ??_I2C_FunctionComplete:	
  5166                           ; 1 bytes @ 0x0
  5167                           
  5168  0070                     ?_TMR1_ISR:	
  5169                           ; 1 bytes @ 0x0
  5170                           
  5171  0070                     ?_TMR1_DefaultInterruptHandler:	
  5172                           ; 1 bytes @ 0x0
  5173                           
  5174  0070                     ??_TMR1_DefaultInterruptHandler:	
  5175                           ; 1 bytes @ 0x0
  5176                           
  5177  0070                     ?_TMR1_StartTimer:	
  5178                           ; 1 bytes @ 0x0
  5179                           
  5180  0070                     ?_TMR1_CallBack:	
  5181                           ; 1 bytes @ 0x0
  5182                           
  5183  0070                     ?_LED_Initialize:	
  5184                           ; 1 bytes @ 0x0
  5185                           
  5186  0070                     ?_Delay:	
  5187                           ; 1 bytes @ 0x0
  5188                           
  5189  0070                     ?_Clock_Initialize:	
  5190                           ; 1 bytes @ 0x0
  5191                           
  5192  0070                     ?_Acc_Initialize:	
  5193                           ; 1 bytes @ 0x0
  5194                           
  5195  0070                     ?_Tick:	
  5196                           ; 1 bytes @ 0x0
  5197                           
  5198  0070                     ?_TapTime:	
  5199                           ; 1 bytes @ 0x0
  5200                           
  5201  0070                     ?_SetTurn:	
  5202                           ; 1 bytes @ 0x0
  5203                           
  5204  0070                     ??_SetTurn:	
  5205                           ; 1 bytes @ 0x0
  5206                           
  5207  0070                     ?_Clock_Display:	
  5208                           ; 1 bytes @ 0x0
  5209                           
  5210  0070                     ?_Clock_Write:	
  5211                           ; 1 bytes @ 0x0
  5212                           
  5213  0070                     ?_Clock_Tap:	
  5214                           ; 1 bytes @ 0x0
  5215                           
  5216  0070                     ?_Clock_Read:	
  5217                           ; 1 bytes @ 0x0
  5218                           
  5219  0070                     ?_SYSTEM_Initialize:	
  5220                           ; 1 bytes @ 0x0
  5221                           
  5222  0070                     ?_PIN_MANAGER_IOC:	
  5223                           ; 1 bytes @ 0x0
  5224                           
  5225  0070                     ?_I2C_ISR:	
  5226                           ; 1 bytes @ 0x0
  5227                           
  5228  0070                     ?_I2C_BusCollisionISR:	
  5229                           ; 1 bytes @ 0x0
  5230                           
  5231  0070                     ??_I2C_BusCollisionISR:	
  5232                           ; 1 bytes @ 0x0
  5233                           
  5234  0070                     ?_INTERRUPT_InterruptManager:	
  5235                           ; 1 bytes @ 0x0
  5236                           
  5237  0070                     ?_main:	
  5238                           ; 1 bytes @ 0x0
  5239                           
  5240  0070                     ?_IncHour:	
  5241                           ; 1 bytes @ 0x0
  5242                           
  5243  0070                     ?i1_I2C_MasterTRBInsert:	
  5244                           ; 1 bytes @ 0x0
  5245                           
  5246  0070                     ?i1_I2C_MasterReadTRBBuild:	
  5247                           ; 1 bytes @ 0x0
  5248                           
  5249  0070                     ?i1_I2C_MasterWriteTRBBuild:	
  5250                           ; 1 bytes @ 0x0
  5251                           
  5252  0070                     ?i1_IncHour:	
  5253                           ; 1 bytes @ 0x0
  5254                           
  5255  0070                     ??i1_IncHour:	
  5256                           ; 1 bytes @ 0x0
  5257                           
  5258  0070                     ?i1_Clock_Read:	
  5259                           ; 1 bytes @ 0x0
  5260                           
  5261  0070                     ?i1_Clock_Display:	
  5262                           ; 1 bytes @ 0x0
  5263                           
  5264  0070                     ?___wmul:	
  5265                           ; 1 bytes @ 0x0
  5266                           
  5267  0070                     i1I2C_MasterTRBInsert@ptrb_list:	
  5268                           ; 2 bytes @ 0x0
  5269                           
  5270  0070                     i1IncHour@in:	
  5271                           ; 1 bytes @ 0x0
  5272                           
  5273  0070                     ___wmul@multiplier:	
  5274                           ; 1 bytes @ 0x0
  5275                           
  5276  0070                     i1I2C_MasterReadTRBBuild@pdata:	
  5277                           ; 2 bytes @ 0x0
  5278                           
  5279  0070                     i1I2C_MasterWriteTRBBuild@pdata:	
  5280                           ; 2 bytes @ 0x0
  5281                           
  5282                           
  5283                           ; 2 bytes @ 0x0
  5284  0070                     	ds	1
  5285  0071                     ??_IOCCF3_ISR:	
  5286  0071                     i1I2C_MasterTRBInsert@pflag:	
  5287                           ; 1 bytes @ 0x1
  5288                           
  5289                           
  5290                           ; 1 bytes @ 0x1
  5291  0071                     	ds	1
  5292  0072                     ??i1_I2C_MasterTRBInsert:	
  5293  0072                     I2C_Stop@completion_code:	
  5294                           ; 1 bytes @ 0x2
  5295                           
  5296  0072                     i1I2C_MasterReadTRBBuild@length:	
  5297                           ; 1 bytes @ 0x2
  5298                           
  5299  0072                     i1I2C_MasterWriteTRBBuild@length:	
  5300                           ; 1 bytes @ 0x2
  5301                           
  5302  0072                     ___wmul@multiplicand:	
  5303                           ; 1 bytes @ 0x2
  5304                           
  5305                           
  5306                           ; 2 bytes @ 0x2
  5307  0072                     	ds	1
  5308  0073                     ??_I2C_ISR:	
  5309  0073                     i1I2C_MasterTRBInsert@count:	
  5310                           ; 1 bytes @ 0x3
  5311                           
  5312  0073                     i1I2C_MasterReadTRBBuild@address:	
  5313                           ; 1 bytes @ 0x3
  5314                           
  5315  0073                     i1I2C_MasterWriteTRBBuild@address:	
  5316                           ; 2 bytes @ 0x3
  5317                           
  5318                           
  5319                           ; 2 bytes @ 0x3
  5320  0073                     	ds	1
  5321  0074                     ??___wmul:	
  5322  0074                     ___wmul@product:	
  5323                           ; 1 bytes @ 0x4
  5324                           
  5325                           
  5326                           ; 2 bytes @ 0x4
  5327  0074                     	ds	1
  5328  0075                     ??i1_I2C_MasterReadTRBBuild:	
  5329  0075                     ??i1_I2C_MasterWriteTRBBuild:	
  5330                           ; 1 bytes @ 0x5
  5331                           
  5332                           
  5333                           ; 1 bytes @ 0x5
  5334  0075                     	ds	1
  5335  0076                     ?___lwmod:	
  5336  0076                     ___lwmod@divisor:	
  5337                           ; 2 bytes @ 0x6
  5338                           
  5339                           
  5340                           ; 2 bytes @ 0x6
  5341  0076                     	ds	1
  5342  0077                     i1I2C_MasterReadTRBBuild@ptrb:	
  5343  0077                     i1I2C_MasterWriteTRBBuild@ptrb:	
  5344                           ; 1 bytes @ 0x7
  5345                           
  5346                           
  5347                           ; 1 bytes @ 0x7
  5348  0077                     	ds	1
  5349  0078                     ?i1_I2CRead:	
  5350  0078                     ___lwmod@dividend:	
  5351                           ; 1 bytes @ 0x8
  5352                           
  5353  0078                     i1I2CRead@pdata:	
  5354                           ; 2 bytes @ 0x8
  5355                           
  5356                           
  5357                           ; 2 bytes @ 0x8
  5358  0078                     	ds	2
  5359  007A                     ??___lwmod:	
  5360  007A                     i1I2CRead@registerAddress:	
  5361                           ; 1 bytes @ 0xA
  5362                           
  5363                           
  5364                           ; 1 bytes @ 0xA
  5365  007A                     	ds	1
  5366  007B                     ___lwmod@counter:	
  5367  007B                     i1I2CRead@length:	
  5368                           ; 1 bytes @ 0xB
  5369                           
  5370                           
  5371                           ; 1 bytes @ 0xB
  5372  007B                     	ds	1
  5373  007C                     ??_Tick:	
  5374  007C                     i1I2CRead@address:	
  5375                           ; 1 bytes @ 0xC
  5376                           
  5377                           
  5378                           ; 2 bytes @ 0xC
  5379  007C                     	ds	2
  5380  007E                     ??_IOCCF2_ISR:	
  5381  007E                     ??_TMR1_ISR:	
  5382                           ; 1 bytes @ 0xE
  5383                           
  5384  007E                     ??_TMR1_CallBack:	
  5385                           ; 1 bytes @ 0xE
  5386                           
  5387  007E                     ??_PIN_MANAGER_IOC:	
  5388                           ; 1 bytes @ 0xE
  5389                           
  5390                           
  5391                           	psect	cstackBANK0
  5392  0020                     __pcstackBANK0:	
  5393                           ; 1 bytes @ 0xE
  5394                           
  5395  0020                     ??i1_I2CRead:	
  5396                           
  5397                           ; 1 bytes @ 0x0
  5398  0020                     	ds	2
  5399  0022                     i1I2CRead@readTRB:	
  5400                           
  5401                           ; 10 bytes @ 0x2
  5402  0022                     	ds	10
  5403  002C                     i1I2CRead@readBuffer:	
  5404                           
  5405                           ; 1 bytes @ 0xC
  5406  002C                     	ds	1
  5407  002D                     i1I2CRead@status:	
  5408                           
  5409                           ; 1 bytes @ 0xD
  5410  002D                     	ds	1
  5411  002E                     ??i1_Clock_Read:	
  5412                           
  5413                           ; 1 bytes @ 0xE
  5414  002E                     	ds	1
  5415  002F                     i1Clock_Read@dataBuffer:	
  5416                           
  5417                           ; 3 bytes @ 0xF
  5418  002F                     	ds	3
  5419  0032                     ??i1_Clock_Display:	
  5420                           
  5421                           ; 1 bytes @ 0x12
  5422  0032                     	ds	1
  5423  0033                     i1Clock_Display@fetchTime:	
  5424                           
  5425                           ; 1 bytes @ 0x13
  5426  0033                     	ds	1
  5427  0034                     i1Clock_Display@hourDisplay:	
  5428                           
  5429                           ; 1 bytes @ 0x14
  5430  0034                     	ds	1
  5431  0035                     i1Clock_Display@col:	
  5432                           
  5433                           ; 1 bytes @ 0x15
  5434  0035                     	ds	1
  5435  0036                     i1Clock_Display@row:	
  5436                           
  5437                           ; 1 bytes @ 0x16
  5438  0036                     	ds	1
  5439  0037                     ??_Clock_Tap:	
  5440                           
  5441                           ; 1 bytes @ 0x17
  5442  0037                     	ds	1
  5443  0038                     Clock_Tap@hours:	
  5444                           
  5445                           ; 1 bytes @ 0x18
  5446  0038                     	ds	1
  5447  0039                     ??_TapTime:	
  5448                           
  5449                           ; 1 bytes @ 0x19
  5450  0039                     	ds	1
  5451  003A                     ??_INTERRUPT_InterruptManager:	
  5452                           
  5453                           ; 1 bytes @ 0x1A
  5454  003A                     	ds	1
  5455  003B                     ??_PIN_MANAGER_Initialize:	
  5456  003B                     ??_OSCILLATOR_Initialize:	
  5457                           ; 1 bytes @ 0x1B
  5458                           
  5459  003B                     ??_I2C_Initialize:	
  5460                           ; 1 bytes @ 0x1B
  5461                           
  5462  003B                     ??_TMR1_Initialize:	
  5463                           ; 1 bytes @ 0x1B
  5464                           
  5465  003B                     ??_IOCCF2_SetInterruptHandler:	
  5466                           ; 1 bytes @ 0x1B
  5467                           
  5468  003B                     ??_IOCCF3_SetInterruptHandler:	
  5469                           ; 1 bytes @ 0x1B
  5470                           
  5471  003B                     ??_I2C_MasterTRBInsert:	
  5472                           ; 1 bytes @ 0x1B
  5473                           
  5474  003B                     ??_TMR1_SetInterruptHandler:	
  5475                           ; 1 bytes @ 0x1B
  5476                           
  5477  003B                     ??_TMR1_StartTimer:	
  5478                           ; 1 bytes @ 0x1B
  5479                           
  5480  003B                     ??_Delay:	
  5481                           ; 1 bytes @ 0x1B
  5482                           
  5483  003B                     ??_IncHour:	
  5484                           ; 1 bytes @ 0x1B
  5485                           
  5486  003B                     PIN_MANAGER_Initialize@state:	
  5487                           ; 1 bytes @ 0x1B
  5488                           
  5489  003B                     I2C_MasterReadTRBBuild@ptrb:	
  5490                           ; 1 bytes @ 0x1B
  5491                           
  5492  003B                     I2C_MasterWriteTRBBuild@ptrb:	
  5493                           ; 1 bytes @ 0x1B
  5494                           
  5495  003B                     IncHour@in:	
  5496                           ; 1 bytes @ 0x1B
  5497                           
  5498                           
  5499                           ; 1 bytes @ 0x1B
  5500  003B                     	ds	1
  5501  003C                     ??_SYSTEM_Initialize:	
  5502                           
  5503                           	psect	maintext
  5504  0721                     __pmaintext:	
  5505                           ; 1 bytes @ 0x1C
  5506 ;;
  5507 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5508 ;;
  5509 ;; *************** function _main *****************
  5510 ;; Defined at:
  5511 ;;		line 85 in file "main.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;		None
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  mask            2   17[BANK2 ] unsigned int 
  5516 ;;  row             1   20[BANK2 ] unsigned char 
  5517 ;;  i               1   19[BANK2 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : B1F/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5528 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;Total ram usage:        6 bytes
  5532 ;; Hardware stack levels required when called:   13
  5533 ;; This function calls:
  5534 ;;		_Acc_Initialize
  5535 ;;		_Clock_Display
  5536 ;;		_Clock_Initialize
  5537 ;;		_Clock_Write
  5538 ;;		_Delay
  5539 ;;		_IOCCF2_SetInterruptHandler
  5540 ;;		_IOCCF3_SetInterruptHandler
  5541 ;;		_LED_Initialize
  5542 ;;		_LED_Row
  5543 ;;		_SYSTEM_Initialize
  5544 ;;		_TMR1_SetInterruptHandler
  5545 ;; This function is called by:
  5546 ;;		Startup code after reset
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           
  5551                           ;psect for function _main
  5552  0721                     _main:	
  5553                           
  5554                           ;main.c: 88: SYSTEM_Initialize();
  5555                           
  5556                           ;incstack = 0
  5557                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5558  0721  3189  2165  3187   	fcall	_SYSTEM_Initialize
  5559                           
  5560                           ;main.c: 91: (INTCONbits.GIE = 1);
  5561  0724  178B               	bsf	11,7	;volatile
  5562                           
  5563                           ;main.c: 94: (INTCONbits.PEIE = 1);
  5564  0725  170B               	bsf	11,6	;volatile
  5565                           
  5566                           ;main.c: 102: LED_Initialize();
  5567  0726  318C  244F  3187   	fcall	_LED_Initialize
  5568                           
  5569                           ;main.c: 103: LED_Row(0x00, 0b1111111111111110);
  5570  0729  30FE               	movlw	254
  5571  072A  0021               	movlb	1	; select bank1
  5572  072B  00B9               	movwf	LED_Row@mask^(0+128)
  5573  072C  30FF               	movlw	255
  5574  072D  00BA               	movwf	(LED_Row@mask^(0+128)+1)
  5575  072E  3000               	movlw	0
  5576  072F  318E  26C6  3187   	fcall	_LED_Row
  5577                           
  5578                           ;main.c: 104: Delay(100);
  5579  0732  3064               	movlw	100
  5580  0733  3189  21F5  3187   	fcall	_Delay
  5581                           
  5582                           ;main.c: 110: Clock_Initialize(1);
  5583  0736  3001               	movlw	1
  5584  0737  318E  2603  3187   	fcall	_Clock_Initialize
  5585                           
  5586                           ;main.c: 111: LED_Row(0x00, 0b1111111111111011);
  5587  073A  30FB               	movlw	251
  5588  073B  0021               	movlb	1	; select bank1
  5589  073C  00B9               	movwf	LED_Row@mask^(0+128)
  5590  073D  30FF               	movlw	255
  5591  073E  00BA               	movwf	(LED_Row@mask^(0+128)+1)
  5592  073F  3000               	movlw	0
  5593  0740  318E  26C6  3187   	fcall	_LED_Row
  5594                           
  5595                           ;main.c: 112: Delay(100);
  5596  0743  3064               	movlw	100
  5597  0744  3189  21F5  3187   	fcall	_Delay
  5598                           
  5599                           ;main.c: 114: Acc_Initialize();
  5600  0747  318F  273F  3187   	fcall	_Acc_Initialize
  5601                           
  5602                           ;main.c: 115: LED_Row(0x00, 0b1111111111110111);
  5603  074A  30F7               	movlw	247
  5604  074B  0021               	movlb	1	; select bank1
  5605  074C  00B9               	movwf	LED_Row@mask^(0+128)
  5606  074D  30FF               	movlw	255
  5607  074E  00BA               	movwf	(LED_Row@mask^(0+128)+1)
  5608  074F  3000               	movlw	0
  5609  0750  318E  26C6  3187   	fcall	_LED_Row
  5610                           
  5611                           ;main.c: 116: Delay(100);
  5612  0753  3064               	movlw	100
  5613  0754  3189  21F5  3187   	fcall	_Delay
  5614                           
  5615                           ;main.c: 118: TMR1_SetInterruptHandler(Tick);
  5616  0757  3061               	movlw	low _Tick
  5617  0758  0021               	movlb	1	; select bank1
  5618  0759  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  5619  075A  300E               	movlw	high _Tick
  5620  075B  00A1               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128)
  5621  075C  3189  212C  3187   	fcall	_TMR1_SetInterruptHandler
  5622                           
  5623                           ;main.c: 120: IOCCF2_SetInterruptHandler(TapTime);
  5624  075F  30DE               	movlw	low _TapTime
  5625  0760  0021               	movlb	1	; select bank1
  5626  0761  00A0               	movwf	IOCCF2_SetInterruptHandler@InterruptHandler^(0+128)
  5627  0762  3009               	movlw	high _TapTime
  5628  0763  00A1               	movwf	(IOCCF2_SetInterruptHandler@InterruptHandler+1)^(0+128)
  5629  0764  3189  2120  3187   	fcall	_IOCCF2_SetInterruptHandler
  5630                           
  5631                           ;main.c: 121: IOCCF3_SetInterruptHandler(SetTurn);
  5632  0767  3045               	movlw	low _SetTurn
  5633  0768  0021               	movlb	1	; select bank1
  5634  0769  00A0               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler^(0+128)
  5635  076A  3009               	movlw	high _SetTurn
  5636  076B  00A1               	movwf	(IOCCF3_SetInterruptHandler@InterruptHandler+1)^(0+128)
  5637  076C  3189  2126  3187   	fcall	_IOCCF3_SetInterruptHandler
  5638                           
  5639                           ;main.c: 123: uint8_t i = 0;
  5640  076F  0022               	movlb	2	; select bank2
  5641  0770  01B3               	clrf	main@i^(0+256)
  5642                           
  5643                           ;main.c: 124: uint8_t row = 0;
  5644  0771  01B4               	clrf	main@row^(0+256)
  5645                           
  5646                           ;main.c: 125: uint16_t mask = 0x0000;
  5647  0772  01B1               	clrf	main@mask^(0+256)
  5648  0773  01B2               	clrf	(main@mask+1)^(0+256)
  5649  0774                     l7405:	
  5650                           ;main.c: 126: while (1)
  5651                           
  5652                           
  5653                           ;main.c: 127: {
  5654                           ;main.c: 128: row = DISPLAYBANK_row[++i];
  5655  0774  3001               	movlw	1
  5656  0775  0022               	movlb	2	; select bank2
  5657  0776  00AF               	movwf	??_main^(0+256)
  5658  0777  082F               	movf	??_main^(0+256),w
  5659  0778  07B3               	addwf	main@i^(0+256),f
  5660  0779  0833               	movf	main@i^(0+256),w
  5661  077A  3EE0               	addlw	(low (_DISPLAYBANK_row| 0))& (0+255)
  5662  077B  0086               	movwf	6
  5663  077C  0187               	clrf	7
  5664  077D  0801               	movf	1,w
  5665  077E  00B0               	movwf	(??_main+1)^(0+256)
  5666  077F  0830               	movf	(??_main+1)^(0+256),w
  5667  0780  00B4               	movwf	main@row^(0+256)
  5668                           
  5669                           ;main.c: 129: if(i == 10 || row == 0xFF)
  5670  0781  300A               	movlw	10
  5671  0782  0633               	xorwf	main@i^(0+256),w
  5672  0783  1D03               	btfss	3,2
  5673  0784  0A34               	incf	main@row^(0+256),w
  5674  0785  1D03               	btfss	3,2
  5675  0786  2F90               	goto	l7415
  5676                           
  5677                           ;main.c: 130: {
  5678                           ;main.c: 131: i = 0;
  5679  0787  01B3               	clrf	main@i^(0+256)
  5680                           
  5681                           ;main.c: 132: row = DISPLAYBANK_row[i];
  5682  0788  0833               	movf	main@i^(0+256),w
  5683  0789  3EE0               	addlw	(low (_DISPLAYBANK_row| 0))& (0+255)
  5684  078A  0086               	movwf	6
  5685  078B  0187               	clrf	7
  5686  078C  0801               	movf	1,w
  5687  078D  00AF               	movwf	??_main^(0+256)
  5688  078E  082F               	movf	??_main^(0+256),w
  5689  078F  00B4               	movwf	main@row^(0+256)
  5690  0790                     l7415:	
  5691                           
  5692                           ;main.c: 133: }
  5693                           ;main.c: 135: if(blank)
  5694  0790  0021               	movlb	1	; select bank1
  5695  0791  084D               	movf	_blank^(0+128),w
  5696  0792  1903               	btfsc	3,2
  5697  0793  2FC2               	goto	l7447
  5698                           
  5699                           ;main.c: 136: {
  5700                           ;main.c: 137: if(mainState == STATE_SET_HOURS)
  5701  0794  034E               	decf	_mainState^(0+128),w
  5702  0795  1D03               	btfss	3,2
  5703  0796  2FA8               	goto	l7433
  5704                           
  5705                           ;main.c: 138: {
  5706                           ;main.c: 139: if(row < 4)
  5707  0797  3004               	movlw	4
  5708  0798  0022               	movlb	2	; select bank2
  5709  0799  0234               	subwf	main@row^(0+256),w
  5710  079A  1C03               	btfss	3,0
  5711  079B  2FC3               	goto	L6
  5712                           
  5713                           ;main.c: 141: else if(row == 4)
  5714                           
  5715                           ;main.c: 140: mask = 0x0000;
  5716  079C  3004               	movlw	4
  5717  079D  0634               	xorwf	main@row^(0+256),w
  5718  079E  1D03               	btfss	3,2
  5719  079F  2FA2               	goto	l7427
  5720                           
  5721                           ;main.c: 142: mask = 0x0780;
  5722  07A0  3080               	movlw	128
  5723  07A1  2FBE               	goto	L8
  5724  07A2                     l7427:	
  5725                           
  5726                           ;main.c: 143: else if(row == 9)
  5727  07A2  3009               	movlw	9
  5728  07A3  0634               	xorwf	main@row^(0+256),w
  5729  07A4  1D03               	btfss	3,2
  5730  07A5  2FAD               	goto	L7
  5731                           
  5732                           ;main.c: 144: mask = 0x0007;
  5733  07A6  3007               	movlw	7
  5734  07A7  2FB6               	goto	L9
  5735  07A8                     l7433:	
  5736                           ;main.c: 147: }
  5737                           
  5738                           ;main.c: 145: else
  5739                           ;main.c: 146: mask = 0xFFFF;
  5740                           
  5741                           
  5742                           ;main.c: 148: else
  5743                           ;main.c: 149: {
  5744                           ;main.c: 150: if(row >= 0 && row < 4)
  5745  07A8  3004               	movlw	4
  5746  07A9  0022               	movlb	2	; select bank2
  5747  07AA  0234               	subwf	main@row^(0+256),w
  5748  07AB  1803               	skipnc
  5749  07AC  2FB1               	goto	l7437
  5750  07AD                     L7:	
  5751                           
  5752                           ;main.c: 151: mask = 0xFFFF;
  5753  07AD  30FF               	movlw	255
  5754  07AE  00B1               	movwf	main@mask^(0+256)
  5755  07AF  30FF               	movlw	255
  5756  07B0  2FC0               	goto	L5
  5757  07B1                     l7437:	
  5758                           
  5759                           ;main.c: 152: else if(row == 4)
  5760  07B1  3004               	movlw	4
  5761  07B2  0634               	xorwf	main@row^(0+256),w
  5762  07B3  1D03               	btfss	3,2
  5763  07B4  2FB9               	goto	l7441
  5764                           
  5765                           ;main.c: 153: mask = 0x000F;
  5766  07B5  300F               	movlw	15
  5767  07B6                     L9:	
  5768  07B6  00B1               	movwf	main@mask^(0+256)
  5769  07B7  3000               	movlw	0
  5770  07B8  2FC0               	goto	L5
  5771  07B9                     l7441:	
  5772                           
  5773                           ;main.c: 154: else if(row == 9)
  5774  07B9  3009               	movlw	9
  5775  07BA  0634               	xorwf	main@row^(0+256),w
  5776  07BB  1D03               	btfss	3,2
  5777  07BC  2FC3               	goto	L6
  5778                           
  5779                           ;main.c: 155: mask = 0x07E0;
  5780  07BD  30E0               	movlw	224
  5781  07BE                     L8:	
  5782  07BE  00B1               	movwf	main@mask^(0+256)
  5783  07BF  3007               	movlw	7
  5784  07C0                     L5:	
  5785  07C0  00B2               	movwf	(main@mask^(0+256)+1)
  5786  07C1  2FC5               	goto	l7449
  5787  07C2                     l7447:	
  5788                           ;main.c: 158: }
  5789                           ;main.c: 159: }
  5790                           
  5791                           ;main.c: 156: else
  5792                           ;main.c: 157: mask = 0x0000;
  5793                           
  5794                           
  5795                           ;main.c: 160: else
  5796                           ;main.c: 161: mask = 0x0000;
  5797  07C2  0022               	movlb	2	; select bank2
  5798  07C3                     L6:	
  5799  07C3  01B1               	clrf	main@mask^(0+256)
  5800  07C4  01B2               	clrf	(main@mask+1)^(0+256)
  5801  07C5                     l7449:	
  5802                           
  5803                           ;main.c: 162: LED_Row(row, DISPLAYBANK_col[i] | mask);
  5804  07C5  3533               	lslf	main@i^(0+256),w
  5805  07C6  3E35               	addlw	(low (_DISPLAYBANK_col| (0+256)))& (0+255)
  5806  07C7  0086               	movwf	6
  5807  07C8  3001               	movlw	1	; select bank2/3
  5808  07C9  0087               	movwf	7
  5809  07CA  3F40               	moviw [0]fsr1
  5810  07CB  00AF               	movwf	??_main^(0+256)
  5811  07CC  3F41               	moviw [1]fsr1
  5812  07CD  00B0               	movwf	(??_main^(0+256)+1)
  5813  07CE  0831               	movf	main@mask^(0+256),w
  5814  07CF  042F               	iorwf	??_main^(0+256),w
  5815  07D0  0021               	movlb	1	; select bank1
  5816  07D1  00B9               	movwf	LED_Row@mask^(0+128)
  5817  07D2  0022               	movlb	2	; select bank2
  5818  07D3  0832               	movf	(main@mask+1)^(0+256),w
  5819  07D4  0430               	iorwf	(??_main+1)^(0+256),w
  5820  07D5  0021               	movlb	1	; select bank1
  5821  07D6  00BA               	movwf	(LED_Row@mask+1)^(0+128)
  5822  07D7  0022               	movlb	2	; select bank2
  5823  07D8  0834               	movf	main@row^(0+256),w
  5824  07D9  318E  26C6  3187   	fcall	_LED_Row
  5825                           
  5826                           ;main.c: 164: switch(action)
  5827  07DC  2FE6               	goto	l7457
  5828  07DD                     l7451:	
  5829                           ;main.c: 165: {
  5830                           ;main.c: 166: case ACTION_GETTIME:
  5831                           
  5832                           
  5833                           ;main.c: 167: Clock_Display(1);
  5834  07DD  3001               	movlw	1
  5835  07DE  3183  2339  3187   	fcall	_Clock_Display
  5836                           
  5837                           ;main.c: 168: break;
  5838  07E1  2FEF               	goto	l7459
  5839  07E2                     l7453:	
  5840                           ;main.c: 169: case ACTION_SETTIME:
  5841                           
  5842                           
  5843                           ;main.c: 170: Clock_Write();
  5844  07E2  318A  22B5  3187   	fcall	_Clock_Write
  5845                           
  5846                           ;main.c: 174: }
  5847                           
  5848                           ;main.c: 173: break;
  5849                           
  5850                           ;main.c: 172: default:
  5851                           
  5852                           ;main.c: 171: break;
  5853  07E5  2FEF               	goto	l7459
  5854  07E6                     l7457:	
  5855  07E6  0021               	movlb	1	; select bank1
  5856  07E7  084C               	movf	_action^(0+128),w
  5857                           
  5858                           ; Switch size 1, requested type "space"
  5859                           ; Number of cases is 2, Range of values is 1 to 2
  5860                           ; switch strategies available:
  5861                           ; Name         Instructions Cycles
  5862                           ; simple_byte            7     4 (average)
  5863                           ; direct_byte           13     9 (fixed)
  5864                           ; jumptable            263     9 (fixed)
  5865                           ;	Chosen strategy is simple_byte
  5866  07E8  3A01               	xorlw	1	; case 1
  5867  07E9  1903               	skipnz
  5868  07EA  2FDD               	goto	l7451
  5869  07EB  3A03               	xorlw	3	; case 2
  5870  07EC  1903               	skipnz
  5871  07ED  2FE2               	goto	l7453
  5872  07EE  2FEF               	goto	l7459
  5873  07EF                     l7459:	
  5874                           
  5875                           ;main.c: 176: action = 0;
  5876  07EF  0021               	movlb	1	; select bank1
  5877  07F0  01CC               	clrf	_action^(0+128)
  5878  07F1  2F74               	goto	l7405
  5879  07F2                     __end_of_main:	
  5880                           
  5881                           	psect	text1
  5882  0965                     __ptext1:	
  5883 ;; *************** function _SYSTEM_Initialize *****************
  5884 ;; Defined at:
  5885 ;;		line 76 in file "mcc_generated_files/mcc.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, pclath, cstack
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:   11
  5906 ;; This function calls:
  5907 ;;		_I2C_Initialize
  5908 ;;		_OSCILLATOR_Initialize
  5909 ;;		_PIN_MANAGER_Initialize
  5910 ;;		_TMR1_Initialize
  5911 ;; This function is called by:
  5912 ;;		_main
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           
  5917                           ;psect for function _SYSTEM_Initialize
  5918  0965                     _SYSTEM_Initialize:	
  5919                           
  5920                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  5921                           
  5922                           ;incstack = 0
  5923                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5924  0965  318D  25AA  3189   	fcall	_PIN_MANAGER_Initialize
  5925                           
  5926                           ;mcc.c: 80: OSCILLATOR_Initialize();
  5927  0968  3189  213E  3189   	fcall	_OSCILLATOR_Initialize
  5928                           
  5929                           ;mcc.c: 81: I2C_Initialize();
  5930  096B  318A  220D  3189   	fcall	_I2C_Initialize
  5931                           
  5932                           ;mcc.c: 82: TMR1_Initialize();
  5933  096E  318A  2226         	fcall	_TMR1_Initialize
  5934  0970  0008               	return
  5935  0971                     __end_of_SYSTEM_Initialize:	
  5936                           
  5937                           	psect	text2
  5938  0A26                     __ptext2:	
  5939 ;; *************** function _TMR1_Initialize *****************
  5940 ;; Defined at:
  5941 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      void 
  5948 ;; Registers used:
  5949 ;;		wreg, status,2, status,0, pclath, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:   10
  5962 ;; This function calls:
  5963 ;;		_TMR1_SetInterruptHandler
  5964 ;;		_TMR1_StartTimer
  5965 ;; This function is called by:
  5966 ;;		_SYSTEM_Initialize
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           
  5971                           ;psect for function _TMR1_Initialize
  5972  0A26                     _TMR1_Initialize:	
  5973                           
  5974                           ;tmr1.c: 68: T1CON = 0xF0;
  5975                           
  5976                           ;incstack = 0
  5977                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5978  0A26  30F0               	movlw	240
  5979  0A27  0020               	movlb	0	; select bank0
  5980  0A28  0098               	movwf	24	;volatile
  5981                           
  5982                           ;tmr1.c: 71: T1GCON = 0x00;
  5983  0A29  0199               	clrf	25	;volatile
  5984                           
  5985                           ;tmr1.c: 74: TMR1H = 0xFC;
  5986  0A2A  30FC               	movlw	252
  5987  0A2B  0097               	movwf	23	;volatile
  5988                           
  5989                           ;tmr1.c: 77: TMR1L = 0x37;
  5990  0A2C  3037               	movlw	55
  5991  0A2D  0096               	movwf	22	;volatile
  5992                           
  5993                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  5994  0A2E  0817               	movf	23,w	;volatile
  5995  0A2F  00C2               	movwf	_timer1ReloadVal+1	;volatile
  5996  0A30  0816               	movf	22,w	;volatile
  5997  0A31  00C1               	movwf	_timer1ReloadVal	;volatile
  5998                           
  5999                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  6000  0A32  1010               	bcf	16,0	;volatile
  6001                           
  6002                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
  6003  0A33  0021               	movlb	1	; select bank1
  6004  0A34  1410               	bsf	16,0	;volatile
  6005                           
  6006                           ;tmr1.c: 89: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6007  0A35  30FF               	movlw	low _TMR1_DefaultInterruptHandler
  6008  0A36  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler^(0+128)
  6009  0A37  3007               	movlw	high _TMR1_DefaultInterruptHandler
  6010  0A38  00A1               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128)
  6011  0A39  3189  212C  318A   	fcall	_TMR1_SetInterruptHandler
  6012                           
  6013                           ;tmr1.c: 92: TMR1_StartTimer();
  6014  0A3C  3189  211A         	fcall	_TMR1_StartTimer
  6015  0A3E  0008               	return
  6016  0A3F                     __end_of_TMR1_Initialize:	
  6017                           
  6018                           	psect	text3
  6019  091A                     __ptext3:	
  6020 ;; *************** function _TMR1_StartTimer *****************
  6021 ;; Defined at:
  6022 ;;		line 95 in file "mcc_generated_files/tmr1.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;		None
  6025 ;; Auto vars:     Size  Location     Type
  6026 ;;		None
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  1    wreg      void 
  6029 ;; Registers used:
  6030 ;;		None
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;Total ram usage:        0 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    9
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_TMR1_Initialize
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           
  6051                           ;psect for function _TMR1_StartTimer
  6052  091A                     _TMR1_StartTimer:	
  6053                           
  6054                           ;tmr1.c: 98: T1CONbits.TMR1ON = 1;
  6055                           
  6056                           ;incstack = 0
  6057                           ; Regs used in _TMR1_StartTimer: []
  6058  091A  0020               	movlb	0	; select bank0
  6059  091B  1418               	bsf	24,0	;volatile
  6060  091C  0008               	return
  6061  091D                     __end_of_TMR1_StartTimer:	
  6062                           
  6063                           	psect	text4
  6064  092C                     __ptext4:	
  6065 ;; *************** function _TMR1_SetInterruptHandler *****************
  6066 ;; Defined at:
  6067 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  6070 ;;		 -> Tick(1), TMR1_DefaultInterruptHandler(1), 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		wreg
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:        2 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    9
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_TMR1_Initialize
  6093 ;;		_main
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           
  6098                           ;psect for function _TMR1_SetInterruptHandler
  6099  092C                     _TMR1_SetInterruptHandler:	
  6100                           
  6101                           ;tmr1.c: 186: TMR1_InterruptHandler = InterruptHandler;
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6105  092C  0021               	movlb	1	; select bank1
  6106  092D  0821               	movf	(TMR1_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6107  092E  00C7               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  6108  092F  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler^(0+128),w
  6109  0930  00C6               	movwf	_TMR1_InterruptHandler^(0+128)
  6110  0931  0008               	return
  6111  0932                     __end_of_TMR1_SetInterruptHandler:	
  6112                           
  6113                           	psect	text5
  6114  0DAA                     __ptext5:	
  6115 ;; *************** function _PIN_MANAGER_Initialize *****************
  6116 ;; Defined at:
  6117 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  state           1   27[BANK0 ] unsigned char 
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;Total ram usage:        1 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:   10
  6138 ;; This function calls:
  6139 ;;		_IOCCF2_SetInterruptHandler
  6140 ;;		_IOCCF3_SetInterruptHandler
  6141 ;; This function is called by:
  6142 ;;		_SYSTEM_Initialize
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _PIN_MANAGER_Initialize
  6148  0DAA                     _PIN_MANAGER_Initialize:	
  6149                           
  6150                           ;pin_manager.c: 59: LATA = 0x00;
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6154  0DAA  0022               	movlb	2	; select bank2
  6155  0DAB  018C               	clrf	12	;volatile
  6156                           
  6157                           ;pin_manager.c: 60: LATB = 0x00;
  6158  0DAC  018D               	clrf	13	;volatile
  6159                           
  6160                           ;pin_manager.c: 61: LATC = 0x00;
  6161  0DAD  018E               	clrf	14	;volatile
  6162                           
  6163                           ;pin_manager.c: 66: TRISA = 0x11;
  6164  0DAE  3011               	movlw	17
  6165  0DAF  0021               	movlb	1	; select bank1
  6166  0DB0  008C               	movwf	12	;volatile
  6167                           
  6168                           ;pin_manager.c: 67: TRISB = 0x70;
  6169  0DB1  3070               	movlw	112
  6170  0DB2  008D               	movwf	13	;volatile
  6171                           
  6172                           ;pin_manager.c: 68: TRISC = 0xDE;
  6173  0DB3  30DE               	movlw	222
  6174  0DB4  008E               	movwf	14	;volatile
  6175                           
  6176                           ;pin_manager.c: 73: ANSELC = 0xC3;
  6177  0DB5  30C3               	movlw	195
  6178  0DB6  0023               	movlb	3	; select bank3
  6179  0DB7  008E               	movwf	14	;volatile
  6180                           
  6181                           ;pin_manager.c: 74: ANSELB = 0xA0;
  6182  0DB8  30A0               	movlw	160
  6183  0DB9  008D               	movwf	13	;volatile
  6184                           
  6185                           ;pin_manager.c: 75: ANSELA = 0x11;
  6186  0DBA  3011               	movlw	17
  6187  0DBB  008C               	movwf	12	;volatile
  6188                           
  6189                           ;pin_manager.c: 80: WPUB = 0xF0;
  6190  0DBC  30F0               	movlw	240
  6191  0DBD  0024               	movlb	4	; select bank4
  6192  0DBE  008D               	movwf	13	;volatile
  6193                           
  6194                           ;pin_manager.c: 81: WPUA = 0x3F;
  6195  0DBF  303F               	movlw	63
  6196  0DC0  008C               	movwf	12	;volatile
  6197                           
  6198                           ;pin_manager.c: 82: WPUC = 0xFF;
  6199  0DC1  30FF               	movlw	255
  6200  0DC2  008E               	movwf	14	;volatile
  6201                           
  6202                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  6203  0DC3  0021               	movlb	1	; select bank1
  6204  0DC4  1395               	bcf	21,7	;volatile
  6205                           
  6206                           ;pin_manager.c: 88: ODCONA = 0x00;
  6207  0DC5  0025               	movlb	5	; select bank5
  6208  0DC6  018C               	clrf	12	;volatile
  6209                           
  6210                           ;pin_manager.c: 89: ODCONB = 0x00;
  6211  0DC7  018D               	clrf	13	;volatile
  6212                           
  6213                           ;pin_manager.c: 90: ODCONC = 0x00;
  6214  0DC8  018E               	clrf	14	;volatile
  6215                           
  6216                           ;pin_manager.c: 97: IOCCFbits.IOCCF2 = 0;
  6217  0DC9  0027               	movlb	7	; select bank7
  6218  0DCA  1119               	bcf	25,2	;volatile
  6219                           
  6220                           ;pin_manager.c: 98: IOCCFbits.IOCCF3 = 0;
  6221  0DCB  1199               	bcf	25,3	;volatile
  6222                           
  6223                           ;pin_manager.c: 100: IOCCNbits.IOCCN2 = 0;
  6224  0DCC  1118               	bcf	24,2	;volatile
  6225                           
  6226                           ;pin_manager.c: 101: IOCCNbits.IOCCN3 = 0;
  6227  0DCD  1198               	bcf	24,3	;volatile
  6228                           
  6229                           ;pin_manager.c: 103: IOCCPbits.IOCCP2 = 1;
  6230  0DCE  1517               	bsf	23,2	;volatile
  6231                           
  6232                           ;pin_manager.c: 104: IOCCPbits.IOCCP3 = 1;
  6233  0DCF  1597               	bsf	23,3	;volatile
  6234                           
  6235                           ;pin_manager.c: 107: IOCCF2_SetInterruptHandler(IOCCF2_DefaultInterruptHandler);
  6236  0DD0  3002               	movlw	low _IOCCF2_DefaultInterruptHandler
  6237  0DD1  0021               	movlb	1	; select bank1
  6238  0DD2  00A0               	movwf	IOCCF2_SetInterruptHandler@InterruptHandler^(0+128)
  6239  0DD3  3000               	movlw	high _IOCCF2_DefaultInterruptHandler
  6240  0DD4  00A1               	movwf	(IOCCF2_SetInterruptHandler@InterruptHandler+1)^(0+128)
  6241  0DD5  3189  2120  318D   	fcall	_IOCCF2_SetInterruptHandler
  6242                           
  6243                           ;pin_manager.c: 108: IOCCF3_SetInterruptHandler(IOCCF3_DefaultInterruptHandler);
  6244  0DD8  3003               	movlw	low _IOCCF3_DefaultInterruptHandler
  6245  0DD9  0021               	movlb	1	; select bank1
  6246  0DDA  00A0               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler^(0+128)
  6247  0DDB  3000               	movlw	high _IOCCF3_DefaultInterruptHandler
  6248  0DDC  00A1               	movwf	(IOCCF3_SetInterruptHandler@InterruptHandler+1)^(0+128)
  6249  0DDD  3189  2126  318D   	fcall	_IOCCF3_SetInterruptHandler
  6250                           
  6251                           ;pin_manager.c: 111: INTCONbits.IOCIE = 1;
  6252  0DE0  158B               	bsf	11,3	;volatile
  6253                           
  6254                           ;pin_manager.c: 114: bool state = GIE;
  6255  0DE1  3000               	movlw	0
  6256  0DE2  1B8B               	btfsc	11,7	;volatile
  6257  0DE3  3001               	movlw	1
  6258  0DE4  0020               	movlb	0	; select bank0
  6259  0DE5  00BB               	movwf	PIN_MANAGER_Initialize@state
  6260                           
  6261                           ;pin_manager.c: 115: GIE = 0;
  6262  0DE6  138B               	bcf	11,7	;volatile
  6263                           
  6264                           ;pin_manager.c: 116: PPSLOCK = 0x55;
  6265  0DE7  3055               	movlw	85
  6266  0DE8  003C               	movlb	28	; select bank28
  6267  0DE9  008F               	movwf	15	;volsfr
  6268                           
  6269                           ;pin_manager.c: 117: PPSLOCK = 0xAA;
  6270  0DEA  30AA               	movlw	170
  6271  0DEB  008F               	movwf	15	;volsfr
  6272                           
  6273                           ;pin_manager.c: 118: PPSLOCKbits.PPSLOCKED = 0x00;
  6274  0DEC  100F               	bcf	15,0	;volsfr
  6275                           
  6276                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  6277  0DED  300E               	movlw	14
  6278  0DEE  00A0               	movwf	32	;volatile
  6279                           
  6280                           ;pin_manager.c: 121: SSPDATPPS = 0x0C;
  6281  0DEF  300C               	movlw	12
  6282  0DF0  00A1               	movwf	33	;volatile
  6283                           
  6284                           ;pin_manager.c: 122: RB6PPS = 0x10;
  6285  0DF1  3010               	movlw	16
  6286  0DF2  003D               	movlb	29	; select bank29
  6287  0DF3  009E               	movwf	30	;volatile
  6288                           
  6289                           ;pin_manager.c: 123: RB4PPS = 0x11;
  6290  0DF4  3011               	movlw	17
  6291  0DF5  009C               	movwf	28	;volatile
  6292                           
  6293                           ;pin_manager.c: 125: PPSLOCK = 0x55;
  6294  0DF6  3055               	movlw	85
  6295  0DF7  003C               	movlb	28	; select bank28
  6296  0DF8  008F               	movwf	15	;volsfr
  6297                           
  6298                           ;pin_manager.c: 126: PPSLOCK = 0xAA;
  6299  0DF9  30AA               	movlw	170
  6300  0DFA  008F               	movwf	15	;volsfr
  6301                           
  6302                           ;pin_manager.c: 127: PPSLOCKbits.PPSLOCKED = 0x01;
  6303  0DFB  140F               	bsf	15,0	;volsfr
  6304                           
  6305                           ;pin_manager.c: 129: GIE = state;
  6306  0DFC  0020               	movlb	0	; select bank0
  6307  0DFD  1C3B               	btfss	PIN_MANAGER_Initialize@state,0
  6308  0DFE  2E01               	goto	u5790
  6309  0DFF  178B               	bsf	11,7	;volatile
  6310  0E00  0008               	return
  6311  0E01                     u5790:	
  6312  0E01  138B               	bcf	11,7	;volatile
  6313  0E02  0008               	return
  6314  0E03                     __end_of_PIN_MANAGER_Initialize:	
  6315                           
  6316                           	psect	text6
  6317  0926                     __ptext6:	
  6318 ;; *************** function _IOCCF3_SetInterruptHandler *****************
  6319 ;; Defined at:
  6320 ;;		line 197 in file "mcc_generated_files/pin_manager.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  6323 ;;		 -> SetTurn(1), IOCCF3_DefaultInterruptHandler(1), 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;		None
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      void 
  6328 ;; Registers used:
  6329 ;;		wreg
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6335 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;Total ram usage:        2 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    9
  6342 ;; This function calls:
  6343 ;;		Nothing
  6344 ;; This function is called by:
  6345 ;;		_PIN_MANAGER_Initialize
  6346 ;;		_main
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function _IOCCF3_SetInterruptHandler
  6352  0926                     _IOCCF3_SetInterruptHandler:	
  6353                           
  6354                           ;pin_manager.c: 198: IOCCF3_InterruptHandler = InterruptHandler;
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _IOCCF3_SetInterruptHandler: [wreg]
  6358  0926  0021               	movlb	1	; select bank1
  6359  0927  0821               	movf	(IOCCF3_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6360  0928  00EC               	movwf	(_IOCCF3_InterruptHandler+1)^(0+128)
  6361  0929  0820               	movf	IOCCF3_SetInterruptHandler@InterruptHandler^(0+128),w
  6362  092A  00EB               	movwf	_IOCCF3_InterruptHandler^(0+128)
  6363  092B  0008               	return
  6364  092C                     __end_of_IOCCF3_SetInterruptHandler:	
  6365                           
  6366                           	psect	text7
  6367  0920                     __ptext7:	
  6368 ;; *************** function _IOCCF2_SetInterruptHandler *****************
  6369 ;; Defined at:
  6370 ;;		line 167 in file "mcc_generated_files/pin_manager.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;  InterruptHan    2    0[BANK1 ] PTR void 
  6373 ;;		 -> TapTime(1), IOCCF2_DefaultInterruptHandler(1), 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;		None
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      void 
  6378 ;; Registers used:
  6379 ;;		wreg
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6385 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6388 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;Total ram usage:        2 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    9
  6392 ;; This function calls:
  6393 ;;		Nothing
  6394 ;; This function is called by:
  6395 ;;		_PIN_MANAGER_Initialize
  6396 ;;		_main
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           
  6401                           ;psect for function _IOCCF2_SetInterruptHandler
  6402  0920                     _IOCCF2_SetInterruptHandler:	
  6403                           
  6404                           ;pin_manager.c: 168: IOCCF2_InterruptHandler = InterruptHandler;
  6405                           
  6406                           ;incstack = 0
  6407                           ; Regs used in _IOCCF2_SetInterruptHandler: [wreg]
  6408  0920  0021               	movlb	1	; select bank1
  6409  0921  0821               	movf	(IOCCF2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6410  0922  00EE               	movwf	(_IOCCF2_InterruptHandler+1)^(0+128)
  6411  0923  0820               	movf	IOCCF2_SetInterruptHandler@InterruptHandler^(0+128),w
  6412  0924  00ED               	movwf	_IOCCF2_InterruptHandler^(0+128)
  6413  0925  0008               	return
  6414  0926                     __end_of_IOCCF2_SetInterruptHandler:	
  6415                           
  6416                           	psect	text8
  6417  093E                     __ptext8:	
  6418 ;; *************** function _OSCILLATOR_Initialize *****************
  6419 ;; Defined at:
  6420 ;;		line 85 in file "mcc_generated_files/mcc.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, status,2
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;Total ram usage:        0 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    9
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_SYSTEM_Initialize
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _OSCILLATOR_Initialize
  6450  093E                     _OSCILLATOR_Initialize:	
  6451                           
  6452                           ;mcc.c: 88: OSCCON = 0x78;
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6456  093E  3078               	movlw	120
  6457  093F  0021               	movlb	1	; select bank1
  6458  0940  0099               	movwf	25	;volatile
  6459                           
  6460                           ;mcc.c: 90: OSCTUNE = 0x00;
  6461  0941  0198               	clrf	24	;volatile
  6462  0942                     l20:	
  6463                           ;mcc.c: 93: {
  6464                           
  6465                           ;mcc.c: 92: while(PLLR == 0)
  6466                           
  6467  0942  1B1A               	btfsc	26,6	;volatile
  6468  0943  0008               	return
  6469  0944  2942               	goto	l20
  6470  0945                     __end_of_OSCILLATOR_Initialize:	
  6471                           
  6472                           	psect	text9
  6473  0A0D                     __ptext9:	
  6474 ;; *************** function _I2C_Initialize *****************
  6475 ;; Defined at:
  6476 ;;		line 198 in file "mcc_generated_files/i2c.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg, status,2
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;Total ram usage:        1 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    9
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_SYSTEM_Initialize
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           
  6505                           ;psect for function _I2C_Initialize
  6506  0A0D                     _I2C_Initialize:	
  6507                           
  6508                           ;i2c.c: 200: i2c_object.pTrHead = i2c_tr_queue;
  6509                           
  6510                           ;incstack = 0
  6511                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  6512  0A0D  30D9               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  6513  0A0E  0020               	movlb	0	; select bank0
  6514  0A0F  00BB               	movwf	??_I2C_Initialize
  6515  0A10  083B               	movf	??_I2C_Initialize,w
  6516  0A11  00BD               	movwf	low ((_i2c_object| 0+1))
  6517                           
  6518                           ;i2c.c: 201: i2c_object.pTrTail = i2c_tr_queue;
  6519  0A12  30D9               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  6520  0A13  00BB               	movwf	??_I2C_Initialize
  6521  0A14  083B               	movf	??_I2C_Initialize,w
  6522  0A15  00BC               	movwf	_i2c_object
  6523                           
  6524                           ;i2c.c: 202: i2c_object.trStatus.s.empty = 1;
  6525  0A16  14BE               	bsf	_i2c_object+2,1
  6526                           
  6527                           ;i2c.c: 203: i2c_object.trStatus.s.full = 0;
  6528  0A17  103E               	bcf	_i2c_object+2,0
  6529                           
  6530                           ;i2c.c: 205: i2c_object.i2cErrors = 0;
  6531  0A18  01C0               	clrf	_i2c_object+4
  6532                           
  6533                           ;i2c.c: 208: SSP1STAT = 0x80;
  6534  0A19  3080               	movlw	128
  6535  0A1A  0024               	movlb	4	; select bank4
  6536  0A1B  0094               	movwf	20	;volatile
  6537                           
  6538                           ;i2c.c: 210: SSP1CON1 = 0x28;
  6539  0A1C  3028               	movlw	40
  6540  0A1D  0095               	movwf	21	;volatile
  6541                           
  6542                           ;i2c.c: 212: SSP1CON3 = 0x00;
  6543  0A1E  0197               	clrf	23	;volatile
  6544                           
  6545                           ;i2c.c: 214: SSP1ADD = 0x13;
  6546  0A1F  3013               	movlw	19
  6547  0A20  0092               	movwf	18	;volatile
  6548                           
  6549                           ;i2c.c: 218: PIR1bits.SSP1IF = 0;
  6550  0A21  0020               	movlb	0	; select bank0
  6551  0A22  1190               	bcf	16,3	;volatile
  6552                           
  6553                           ;i2c.c: 220: PIE1bits.SSP1IE = 1;
  6554  0A23  0021               	movlb	1	; select bank1
  6555  0A24  1590               	bsf	16,3	;volatile
  6556  0A25  0008               	return
  6557  0A26                     __end_of_I2C_Initialize:	
  6558                           
  6559                           	psect	text10
  6560  0EC6                     __ptext10:	
  6561 ;; *************** function _LED_Row *****************
  6562 ;; Defined at:
  6563 ;;		line 18 in file "LEDArray.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;  row             1    wreg     unsigned char 
  6566 ;;  mask            2   25[BANK1 ] unsigned int 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;  row             1   32[BANK1 ] unsigned char 
  6569 ;;  writeBuffer     3   29[BANK1 ] unsigned char [3]
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  1    wreg      void 
  6572 ;; Registers used:
  6573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:        8 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:   12
  6586 ;; This function calls:
  6587 ;;		_I2CWrite
  6588 ;; This function is called by:
  6589 ;;		_main
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function _LED_Row
  6595  0EC6                     _LED_Row:	
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _LED_Row: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6599                           ;LED_Row@row stored from wreg
  6600  0EC6  0021               	movlb	1	; select bank1
  6601  0EC7  00C0               	movwf	LED_Row@row^(0+128)
  6602                           
  6603                           ;LEDArray.c: 20: uint8_t writeBuffer[3];
  6604                           ;LEDArray.c: 23: if(row != prevRow)
  6605  0EC8  0840               	movf	LED_Row@row^(0+128),w
  6606  0EC9  0020               	movlb	0	; select bank0
  6607  0ECA  0652               	xorwf	_prevRow,w
  6608  0ECB  1903               	skipnz
  6609  0ECC  2EEB               	goto	l7003
  6610                           
  6611                           ;LEDArray.c: 24: {
  6612                           ;LEDArray.c: 25: writeBuffer[0] = (prevRow>7?0x01:0x00);
  6613  0ECD  3008               	movlw	8
  6614  0ECE  0252               	subwf	_prevRow,w
  6615  0ECF  1C03               	btfss	3,0
  6616  0ED0  2ED3               	goto	u6110
  6617  0ED1  3001               	movlw	1
  6618  0ED2  2ED4               	goto	u6120
  6619  0ED3                     u6110:	
  6620  0ED3  3000               	movlw	0
  6621  0ED4                     u6120:	
  6622  0ED4  0021               	movlb	1	; select bank1
  6623  0ED5  00BB               	movwf	??_LED_Row^(0+128)
  6624  0ED6  083B               	movf	??_LED_Row^(0+128),w
  6625  0ED7  00BD               	movwf	LED_Row@writeBuffer^(0+128)
  6626                           
  6627                           ;LEDArray.c: 26: writeBuffer[1] = 0xFF;
  6628  0ED8  30FF               	movlw	255
  6629  0ED9  00BB               	movwf	??_LED_Row^(0+128)
  6630  0EDA  083B               	movf	??_LED_Row^(0+128),w
  6631  0EDB  00BE               	movwf	(LED_Row@writeBuffer^(0+128)+1)
  6632                           
  6633                           ;LEDArray.c: 27: I2CWrite(writeBuffer, 2, 0b0100001);
  6634  0EDC  30BD               	movlw	low LED_Row@writeBuffer
  6635  0EDD  00AF               	movwf	I2CWrite@pdata^(0+128)
  6636  0EDE  3000               	movlw	high LED_Row@writeBuffer
  6637  0EDF  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6638  0EE0  3002               	movlw	2
  6639  0EE1  00BB               	movwf	??_LED_Row^(0+128)
  6640  0EE2  083B               	movf	??_LED_Row^(0+128),w
  6641  0EE3  00B1               	movwf	I2CWrite@length^(0+128)
  6642  0EE4  3021               	movlw	33
  6643  0EE5  00B2               	movwf	I2CWrite@address^(0+128)
  6644  0EE6  3000               	movlw	0
  6645  0EE7  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6646  0EE8  318B  234A  318E   	fcall	_I2CWrite
  6647  0EEB                     l7003:	
  6648                           
  6649                           ;LEDArray.c: 28: }
  6650                           ;LEDArray.c: 31: writeBuffer[0] = 0x00;
  6651  0EEB  0021               	movlb	1	; select bank1
  6652  0EEC  01BD               	clrf	LED_Row@writeBuffer^(0+128)
  6653                           
  6654                           ;LEDArray.c: 32: writeBuffer[1] = mask & 0xFF;
  6655  0EED  0839               	movf	LED_Row@mask^(0+128),w
  6656  0EEE  00BB               	movwf	??_LED_Row^(0+128)
  6657  0EEF  083B               	movf	??_LED_Row^(0+128),w
  6658  0EF0  00BE               	movwf	(LED_Row@writeBuffer^(0+128)+1)
  6659                           
  6660                           ;LEDArray.c: 33: writeBuffer[2] = mask >> 8;
  6661  0EF1  083A               	movf	(LED_Row@mask+1)^(0+128),w
  6662  0EF2  00BB               	movwf	??_LED_Row^(0+128)
  6663  0EF3  083B               	movf	??_LED_Row^(0+128),w
  6664  0EF4  00BF               	movwf	(LED_Row@writeBuffer^(0+128)+2)
  6665                           
  6666                           ;LEDArray.c: 34: I2CWrite(writeBuffer, 3, 0b0100000);
  6667  0EF5  30BD               	movlw	low LED_Row@writeBuffer
  6668  0EF6  00AF               	movwf	I2CWrite@pdata^(0+128)
  6669  0EF7  3000               	movlw	high LED_Row@writeBuffer
  6670  0EF8  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6671  0EF9  3003               	movlw	3
  6672  0EFA  00BB               	movwf	??_LED_Row^(0+128)
  6673  0EFB  083B               	movf	??_LED_Row^(0+128),w
  6674  0EFC  00B1               	movwf	I2CWrite@length^(0+128)
  6675  0EFD  3020               	movlw	32
  6676  0EFE  00B2               	movwf	I2CWrite@address^(0+128)
  6677  0EFF  3000               	movlw	0
  6678  0F00  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6679  0F01  318B  234A  318E   	fcall	_I2CWrite
  6680                           
  6681                           ;LEDArray.c: 36: if(row != prevRow)
  6682  0F04  0021               	movlb	1	; select bank1
  6683  0F05  0840               	movf	LED_Row@row^(0+128),w
  6684  0F06  0020               	movlb	0	; select bank0
  6685  0F07  0652               	xorwf	_prevRow,w
  6686  0F08  1903               	skipnz
  6687  0F09  2F38               	goto	l7023
  6688                           
  6689                           ;LEDArray.c: 37: {
  6690                           ;LEDArray.c: 38: if(row > 7)
  6691  0F0A  3008               	movlw	8
  6692  0F0B  0021               	movlb	1	; select bank1
  6693  0F0C  0240               	subwf	LED_Row@row^(0+128),w
  6694  0F0D  1C03               	skipc
  6695  0F0E  2F1B               	goto	l7017
  6696                           
  6697                           ;LEDArray.c: 39: {
  6698                           ;LEDArray.c: 40: writeBuffer[0] = 0x01;
  6699  0F0F  01BD               	clrf	LED_Row@writeBuffer^(0+128)
  6700  0F10  0ABD               	incf	LED_Row@writeBuffer^(0+128),f
  6701                           
  6702                           ;LEDArray.c: 41: writeBuffer[1] = 0xFF - (1 << (row-8));
  6703  0F11  3001               	movlw	1
  6704  0F12  00BB               	movwf	??_LED_Row^(0+128)
  6705  0F13  0840               	movf	LED_Row@row^(0+128),w
  6706  0F14  3EF8               	addlw	-8
  6707  0F15  0A89               	incf	9,f
  6708  0F16  2F18               	goto	u6154
  6709  0F17                     u6155:	
  6710  0F17  35BB               	lslf	??_LED_Row^(0+128),f
  6711  0F18                     u6154:	
  6712  0F18  0B89               	decfsz	9,f
  6713  0F19  2F17               	goto	u6155
  6714  0F1A  2F23               	goto	L10
  6715  0F1B                     l7017:	
  6716                           ;LEDArray.c: 42: }
  6717                           
  6718                           
  6719                           ;LEDArray.c: 43: else
  6720                           ;LEDArray.c: 44: {
  6721                           ;LEDArray.c: 45: writeBuffer[0] = 0x00;
  6722  0F1B  01BD               	clrf	LED_Row@writeBuffer^(0+128)
  6723                           
  6724                           ;LEDArray.c: 46: writeBuffer[1] = 0xFF - (1 << row);
  6725  0F1C  3001               	movlw	1
  6726  0F1D  00BB               	movwf	??_LED_Row^(0+128)
  6727  0F1E  0A40               	incf	LED_Row@row^(0+128),w
  6728  0F1F  2F21               	goto	u6164
  6729  0F20                     u6165:	
  6730  0F20  35BB               	lslf	??_LED_Row^(0+128),f
  6731  0F21                     u6164:	
  6732  0F21  0B89               	decfsz	9,f
  6733  0F22  2F20               	goto	u6165
  6734  0F23                     L10:	
  6735  0F23  083B               	movf	??_LED_Row^(0+128),w
  6736  0F24  3AFF               	xorlw	255
  6737  0F25  3E01               	addlw	1
  6738  0F26  3EFF               	addlw	255
  6739  0F27  00BC               	movwf	(??_LED_Row+1)^(0+128)
  6740  0F28  083C               	movf	(??_LED_Row+1)^(0+128),w
  6741  0F29  00BE               	movwf	(LED_Row@writeBuffer^(0+128)+1)
  6742                           
  6743                           ;LEDArray.c: 47: }
  6744                           ;LEDArray.c: 48: I2CWrite(writeBuffer, 2, 0b0100001);
  6745  0F2A  30BD               	movlw	low LED_Row@writeBuffer
  6746  0F2B  00AF               	movwf	I2CWrite@pdata^(0+128)
  6747  0F2C  3000               	movlw	high LED_Row@writeBuffer
  6748  0F2D  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6749  0F2E  3002               	movlw	2
  6750  0F2F  00BB               	movwf	??_LED_Row^(0+128)
  6751  0F30  083B               	movf	??_LED_Row^(0+128),w
  6752  0F31  00B1               	movwf	I2CWrite@length^(0+128)
  6753  0F32  3021               	movlw	33
  6754  0F33  00B2               	movwf	I2CWrite@address^(0+128)
  6755  0F34  3000               	movlw	0
  6756  0F35  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6757  0F36  318B  234A         	fcall	_I2CWrite
  6758  0F38                     l7023:	
  6759                           
  6760                           ;LEDArray.c: 49: }
  6761                           ;LEDArray.c: 51: prevRow = row;
  6762  0F38  0021               	movlb	1	; select bank1
  6763  0F39  0840               	movf	LED_Row@row^(0+128),w
  6764  0F3A  00BB               	movwf	??_LED_Row^(0+128)
  6765  0F3B  083B               	movf	??_LED_Row^(0+128),w
  6766  0F3C  0020               	movlb	0	; select bank0
  6767  0F3D  00D2               	movwf	_prevRow
  6768  0F3E  0008               	return
  6769  0F3F                     __end_of_LED_Row:	
  6770                           
  6771                           	psect	text11
  6772  0C4F                     __ptext11:	
  6773 ;; *************** function _LED_Initialize *****************
  6774 ;; Defined at:
  6775 ;;		line 55 in file "LEDArray.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  writeBuffer     3   27[BANK1 ] unsigned char [3]
  6780 ;;  status          1   26[BANK1 ] enum E12012
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      void 
  6783 ;; Registers used:
  6784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6791 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;Total ram usage:        5 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:   12
  6797 ;; This function calls:
  6798 ;;		_I2CWrite
  6799 ;; This function is called by:
  6800 ;;		_main
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           
  6805                           ;psect for function _LED_Initialize
  6806  0C4F                     _LED_Initialize:	
  6807                           
  6808                           ;LEDArray.c: 57: uint8_t writeBuffer[3];
  6809                           ;LEDArray.c: 58: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  6810                           
  6811                           ;incstack = 0
  6812                           ; Regs used in _LED_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6813  0C4F  3002               	movlw	2
  6814  0C50  0021               	movlb	1	; select bank1
  6815  0C51  00B9               	movwf	??_LED_Initialize^(0+128)
  6816  0C52  0839               	movf	??_LED_Initialize^(0+128),w
  6817  0C53  00BA               	movwf	LED_Initialize@status^(0+128)
  6818                           
  6819                           ;LEDArray.c: 60: writeBuffer[0] = 0x00;
  6820  0C54  01BB               	clrf	LED_Initialize@writeBuffer^(0+128)
  6821                           
  6822                           ;LEDArray.c: 61: writeBuffer[1] = 0xFF;
  6823  0C55  30FF               	movlw	255
  6824  0C56  00B9               	movwf	??_LED_Initialize^(0+128)
  6825  0C57  0839               	movf	??_LED_Initialize^(0+128),w
  6826  0C58  00BC               	movwf	(LED_Initialize@writeBuffer^(0+128)+1)
  6827                           
  6828                           ;LEDArray.c: 62: writeBuffer[2] = 0xFF;
  6829  0C59  30FF               	movlw	255
  6830  0C5A  00B9               	movwf	??_LED_Initialize^(0+128)
  6831  0C5B  0839               	movf	??_LED_Initialize^(0+128),w
  6832  0C5C  00BD               	movwf	(LED_Initialize@writeBuffer^(0+128)+2)
  6833                           
  6834                           ;LEDArray.c: 63: I2CWrite(writeBuffer, 3, 0b0100001);
  6835  0C5D  30BB               	movlw	low LED_Initialize@writeBuffer
  6836  0C5E  00AF               	movwf	I2CWrite@pdata^(0+128)
  6837  0C5F  3000               	movlw	high LED_Initialize@writeBuffer
  6838  0C60  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6839  0C61  3003               	movlw	3
  6840  0C62  00B9               	movwf	??_LED_Initialize^(0+128)
  6841  0C63  0839               	movf	??_LED_Initialize^(0+128),w
  6842  0C64  00B1               	movwf	I2CWrite@length^(0+128)
  6843  0C65  3021               	movlw	33
  6844  0C66  00B2               	movwf	I2CWrite@address^(0+128)
  6845  0C67  3000               	movlw	0
  6846  0C68  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6847  0C69  318B  234A  318C   	fcall	_I2CWrite
  6848                           
  6849                           ;LEDArray.c: 64: I2CWrite(writeBuffer, 3, 0b0100000);
  6850  0C6C  30BB               	movlw	low LED_Initialize@writeBuffer
  6851  0C6D  0021               	movlb	1	; select bank1
  6852  0C6E  00AF               	movwf	I2CWrite@pdata^(0+128)
  6853  0C6F  3000               	movlw	high LED_Initialize@writeBuffer
  6854  0C70  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6855  0C71  3003               	movlw	3
  6856  0C72  00B9               	movwf	??_LED_Initialize^(0+128)
  6857  0C73  0839               	movf	??_LED_Initialize^(0+128),w
  6858  0C74  00B1               	movwf	I2CWrite@length^(0+128)
  6859  0C75  3020               	movlw	32
  6860  0C76  00B2               	movwf	I2CWrite@address^(0+128)
  6861  0C77  3000               	movlw	0
  6862  0C78  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6863  0C79  318B  234A  318C   	fcall	_I2CWrite
  6864                           
  6865                           ;LEDArray.c: 66: writeBuffer[0] = 0x14;
  6866  0C7C  3014               	movlw	20
  6867  0C7D  0021               	movlb	1	; select bank1
  6868  0C7E  00B9               	movwf	??_LED_Initialize^(0+128)
  6869  0C7F  0839               	movf	??_LED_Initialize^(0+128),w
  6870  0C80  00BB               	movwf	LED_Initialize@writeBuffer^(0+128)
  6871                           
  6872                           ;LEDArray.c: 67: I2CWrite(writeBuffer, 3, 0b0100000);
  6873  0C81  30BB               	movlw	low LED_Initialize@writeBuffer
  6874  0C82  00AF               	movwf	I2CWrite@pdata^(0+128)
  6875  0C83  3000               	movlw	high LED_Initialize@writeBuffer
  6876  0C84  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6877  0C85  3003               	movlw	3
  6878  0C86  00B9               	movwf	??_LED_Initialize^(0+128)
  6879  0C87  0839               	movf	??_LED_Initialize^(0+128),w
  6880  0C88  00B1               	movwf	I2CWrite@length^(0+128)
  6881  0C89  3020               	movlw	32
  6882  0C8A  00B2               	movwf	I2CWrite@address^(0+128)
  6883  0C8B  3000               	movlw	0
  6884  0C8C  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6885  0C8D  318B  234A         	fcall	_I2CWrite
  6886  0C8F  0008               	return
  6887  0C90                     __end_of_LED_Initialize:	
  6888                           
  6889                           	psect	text12
  6890  0AB5                     __ptext12:	
  6891 ;; *************** function _Clock_Write *****************
  6892 ;; Defined at:
  6893 ;;		line 93 in file "clock.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;		None
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;  writeBuffer     4   27[BANK1 ] unsigned char [4]
  6898 ;;  status          1   26[BANK1 ] enum E12012
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;Total ram usage:        6 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:   12
  6915 ;; This function calls:
  6916 ;;		_I2CWrite
  6917 ;; This function is called by:
  6918 ;;		_main
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _Clock_Write
  6924  0AB5                     _Clock_Write:	
  6925                           
  6926                           ;clock.c: 95: uint8_t writeBuffer[4];
  6927                           ;clock.c: 96: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  6928                           
  6929                           ;incstack = 0
  6930                           ; Regs used in _Clock_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6931  0AB5  3002               	movlw	2
  6932  0AB6  0021               	movlb	1	; select bank1
  6933  0AB7  00B9               	movwf	??_Clock_Write^(0+128)
  6934  0AB8  0839               	movf	??_Clock_Write^(0+128),w
  6935  0AB9  00BA               	movwf	Clock_Write@status^(0+128)
  6936                           
  6937                           ;clock.c: 98: writeBuffer[0] = 0x00;
  6938  0ABA  01BB               	clrf	Clock_Write@writeBuffer^(0+128)
  6939                           
  6940                           ;clock.c: 99: writeBuffer[1] = 0x80;
  6941  0ABB  3080               	movlw	128
  6942  0ABC  00B9               	movwf	??_Clock_Write^(0+128)
  6943  0ABD  0839               	movf	??_Clock_Write^(0+128),w
  6944  0ABE  00BC               	movwf	(Clock_Write@writeBuffer^(0+128)+1)
  6945                           
  6946                           ;clock.c: 100: writeBuffer[2] = min;
  6947  0ABF  0848               	movf	_min^(0+128),w
  6948  0AC0  00B9               	movwf	??_Clock_Write^(0+128)
  6949  0AC1  0839               	movf	??_Clock_Write^(0+128),w
  6950  0AC2  00BD               	movwf	(Clock_Write@writeBuffer^(0+128)+2)
  6951                           
  6952                           ;clock.c: 101: writeBuffer[3] = (hour | 0x40);
  6953  0AC3  085D               	movf	_hour^(0+128),w
  6954  0AC4  3840               	iorlw	64
  6955  0AC5  00B9               	movwf	??_Clock_Write^(0+128)
  6956  0AC6  0839               	movf	??_Clock_Write^(0+128),w
  6957  0AC7  00BE               	movwf	(Clock_Write@writeBuffer^(0+128)+3)
  6958                           
  6959                           ;clock.c: 102: I2CWrite(writeBuffer, 4, 0b1101111);
  6960  0AC8  30BB               	movlw	low Clock_Write@writeBuffer
  6961  0AC9  00AF               	movwf	I2CWrite@pdata^(0+128)
  6962  0ACA  3000               	movlw	high Clock_Write@writeBuffer
  6963  0ACB  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  6964  0ACC  3004               	movlw	4
  6965  0ACD  00B9               	movwf	??_Clock_Write^(0+128)
  6966  0ACE  0839               	movf	??_Clock_Write^(0+128),w
  6967  0ACF  00B1               	movwf	I2CWrite@length^(0+128)
  6968  0AD0  306F               	movlw	111
  6969  0AD1  00B2               	movwf	I2CWrite@address^(0+128)
  6970  0AD2  3000               	movlw	0
  6971  0AD3  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  6972  0AD4  318B  234A         	fcall	_I2CWrite
  6973  0AD6  0008               	return
  6974  0AD7                     __end_of_Clock_Write:	
  6975                           
  6976                           	psect	text13
  6977  0E03                     __ptext13:	
  6978 ;; *************** function _Clock_Initialize *****************
  6979 ;; Defined at:
  6980 ;;		line 39 in file "clock.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  start           1    wreg     unsigned char 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  start           1    1[BANK2 ] unsigned char 
  6985 ;;  writeBuffer     5    2[BANK2 ] unsigned char [5]
  6986 ;;  status          1    0[BANK2 ] enum E12012
  6987 ;; Return value:  Size  Location     Type
  6988 ;;                  1    wreg      void 
  6989 ;; Registers used:
  6990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6991 ;; Tracked objects:
  6992 ;;		On entry : 0/0
  6993 ;;		On exit  : 0/0
  6994 ;;		Unchanged: 0/0
  6995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6997 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0
  6998 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Totals:         0       0       1       7       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;Total ram usage:        8 bytes
  7001 ;; Hardware stack levels used:    1
  7002 ;; Hardware stack levels required when called:   12
  7003 ;; This function calls:
  7004 ;;		_Clock_Read
  7005 ;;		_Delay
  7006 ;;		_I2CWrite
  7007 ;; This function is called by:
  7008 ;;		_main
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           
  7013                           ;psect for function _Clock_Initialize
  7014  0E03                     _Clock_Initialize:	
  7015                           
  7016                           ;incstack = 0
  7017                           ; Regs used in _Clock_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7018                           ;Clock_Initialize@start stored from wreg
  7019  0E03  0022               	movlb	2	; select bank2
  7020  0E04  00A1               	movwf	Clock_Initialize@start^(0+256)
  7021                           
  7022                           ;clock.c: 41: uint8_t writeBuffer[5];
  7023                           ;clock.c: 42: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  7024  0E05  3002               	movlw	2
  7025  0E06  0021               	movlb	1	; select bank1
  7026  0E07  00BF               	movwf	??_Clock_Initialize^(0+128)
  7027  0E08  083F               	movf	??_Clock_Initialize^(0+128),w
  7028  0E09  0022               	movlb	2	; select bank2
  7029  0E0A  00A0               	movwf	Clock_Initialize@status^(0+256)
  7030                           
  7031                           ;clock.c: 44: if(start)
  7032  0E0B  0821               	movf	Clock_Initialize@start^(0+256),w
  7033  0E0C  1903               	btfsc	3,2
  7034  0E0D  2E11               	goto	l7031
  7035                           
  7036                           ;clock.c: 45: Clock_Read();
  7037  0E0E  318A  2295  318E   	fcall	_Clock_Read
  7038  0E11                     l7031:	
  7039                           
  7040                           ;clock.c: 47: writeBuffer[0] = 0x00;
  7041  0E11  0022               	movlb	2	; select bank2
  7042  0E12  01A2               	clrf	Clock_Initialize@writeBuffer^(0+256)
  7043                           
  7044                           ;clock.c: 48: if(start)
  7045  0E13  0821               	movf	Clock_Initialize@start^(0+256),w
  7046  0E14  1903               	btfsc	3,2
  7047  0E15  2E1D               	goto	l7037
  7048                           
  7049                           ;clock.c: 49: writeBuffer[1] = 0x80;
  7050  0E16  3080               	movlw	128
  7051  0E17  0021               	movlb	1	; select bank1
  7052  0E18  00BF               	movwf	??_Clock_Initialize^(0+128)
  7053  0E19  083F               	movf	??_Clock_Initialize^(0+128),w
  7054  0E1A  0022               	movlb	2	; select bank2
  7055  0E1B  00A3               	movwf	(Clock_Initialize@writeBuffer^(0+256)+1)
  7056  0E1C  2E1E               	goto	l7039
  7057  0E1D                     l7037:	
  7058                           
  7059                           ;clock.c: 50: else
  7060                           ;clock.c: 51: writeBuffer[1] = 0x00;
  7061  0E1D  01A3               	clrf	(Clock_Initialize@writeBuffer^(0+256)+1)
  7062  0E1E                     l7039:	
  7063                           
  7064                           ;clock.c: 52: writeBuffer[2] = min;
  7065  0E1E  0021               	movlb	1	; select bank1
  7066  0E1F  0848               	movf	_min^(0+128),w
  7067  0E20  00BF               	movwf	??_Clock_Initialize^(0+128)
  7068  0E21  083F               	movf	??_Clock_Initialize^(0+128),w
  7069  0E22  0022               	movlb	2	; select bank2
  7070  0E23  00A4               	movwf	(Clock_Initialize@writeBuffer^(0+256)+2)
  7071                           
  7072                           ;clock.c: 53: writeBuffer[3] = (0x40 | hour);
  7073  0E24  0021               	movlb	1	; select bank1
  7074  0E25  085D               	movf	_hour^(0+128),w
  7075  0E26  3840               	iorlw	64
  7076  0E27  00BF               	movwf	??_Clock_Initialize^(0+128)
  7077  0E28  083F               	movf	??_Clock_Initialize^(0+128),w
  7078  0E29  0022               	movlb	2	; select bank2
  7079  0E2A  00A5               	movwf	(Clock_Initialize@writeBuffer^(0+256)+3)
  7080                           
  7081                           ;clock.c: 54: writeBuffer[4] = 0x08;
  7082  0E2B  3008               	movlw	8
  7083  0E2C  0021               	movlb	1	; select bank1
  7084  0E2D  00BF               	movwf	??_Clock_Initialize^(0+128)
  7085  0E2E  083F               	movf	??_Clock_Initialize^(0+128),w
  7086  0E2F  0022               	movlb	2	; select bank2
  7087  0E30  00A6               	movwf	(Clock_Initialize@writeBuffer^(0+256)+4)
  7088                           
  7089                           ;clock.c: 55: I2CWrite(writeBuffer, 5, 0b1101111);
  7090  0E31  3022               	movlw	low Clock_Initialize@writeBuffer
  7091  0E32  0021               	movlb	1	; select bank1
  7092  0E33  00AF               	movwf	I2CWrite@pdata^(0+128)
  7093  0E34  3001               	movlw	high Clock_Initialize@writeBuffer
  7094  0E35  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  7095  0E36  3005               	movlw	5
  7096  0E37  00BF               	movwf	??_Clock_Initialize^(0+128)
  7097  0E38  083F               	movf	??_Clock_Initialize^(0+128),w
  7098  0E39  00B1               	movwf	I2CWrite@length^(0+128)
  7099  0E3A  306F               	movlw	111
  7100  0E3B  00B2               	movwf	I2CWrite@address^(0+128)
  7101  0E3C  3000               	movlw	0
  7102  0E3D  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  7103  0E3E  318B  234A  318E   	fcall	_I2CWrite
  7104                           
  7105                           ;clock.c: 57: Delay(0x10);
  7106  0E41  3010               	movlw	16
  7107  0E42  3189  21F5  318E   	fcall	_Delay
  7108                           
  7109                           ;clock.c: 59: writeBuffer[0] = 0x07;
  7110  0E45  3007               	movlw	7
  7111  0E46  0021               	movlb	1	; select bank1
  7112  0E47  00BF               	movwf	??_Clock_Initialize^(0+128)
  7113  0E48  083F               	movf	??_Clock_Initialize^(0+128),w
  7114  0E49  0022               	movlb	2	; select bank2
  7115  0E4A  00A2               	movwf	Clock_Initialize@writeBuffer^(0+256)
  7116                           
  7117                           ;clock.c: 61: writeBuffer[1] = 0x03;
  7118  0E4B  3003               	movlw	3
  7119  0E4C  0021               	movlb	1	; select bank1
  7120  0E4D  00BF               	movwf	??_Clock_Initialize^(0+128)
  7121  0E4E  083F               	movf	??_Clock_Initialize^(0+128),w
  7122  0E4F  0022               	movlb	2	; select bank2
  7123  0E50  00A3               	movwf	(Clock_Initialize@writeBuffer^(0+256)+1)
  7124                           
  7125                           ;clock.c: 62: I2CWrite(writeBuffer, 2, 0b1101111);
  7126  0E51  3022               	movlw	low Clock_Initialize@writeBuffer
  7127  0E52  0021               	movlb	1	; select bank1
  7128  0E53  00AF               	movwf	I2CWrite@pdata^(0+128)
  7129  0E54  3001               	movlw	high Clock_Initialize@writeBuffer
  7130  0E55  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  7131  0E56  3002               	movlw	2
  7132  0E57  00BF               	movwf	??_Clock_Initialize^(0+128)
  7133  0E58  083F               	movf	??_Clock_Initialize^(0+128),w
  7134  0E59  00B1               	movwf	I2CWrite@length^(0+128)
  7135  0E5A  306F               	movlw	111
  7136  0E5B  00B2               	movwf	I2CWrite@address^(0+128)
  7137  0E5C  3000               	movlw	0
  7138  0E5D  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  7139  0E5E  318B  234A         	fcall	_I2CWrite
  7140  0E60  0008               	return
  7141  0E61                     __end_of_Clock_Initialize:	
  7142                           
  7143                           	psect	text14
  7144  09F5                     __ptext14:	
  7145 ;; *************** function _Delay *****************
  7146 ;; Defined at:
  7147 ;;		line 11 in file "lib.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  length          1    wreg     unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  length          1    0[BANK1 ] unsigned char 
  7152 ;;  i               1    1[BANK1 ] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, status,2, status,0
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;Total ram usage:        3 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:    9
  7169 ;; This function calls:
  7170 ;;		Nothing
  7171 ;; This function is called by:
  7172 ;;		_main
  7173 ;;		_Clock_Initialize
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177                           
  7178                           ;psect for function _Delay
  7179  09F5                     _Delay:	
  7180                           
  7181                           ;incstack = 0
  7182                           ; Regs used in _Delay: [wreg+status,2+status,0]
  7183                           ;Delay@length stored from wreg
  7184  09F5  0021               	movlb	1	; select bank1
  7185  09F6  00A0               	movwf	Delay@length^(0+128)
  7186                           
  7187                           ;lib.c: 12: uint8_t i = 0;
  7188  09F7  01A1               	clrf	Delay@i^(0+128)
  7189                           
  7190                           ;lib.c: 13: for (i = 0; i < length; i++)
  7191  09F8  01A1               	clrf	Delay@i^(0+128)
  7192  09F9                     l6783:	
  7193  09F9  0820               	movf	Delay@length^(0+128),w
  7194  09FA  0221               	subwf	Delay@i^(0+128),w
  7195  09FB  1803               	btfsc	3,0
  7196  09FC  0008               	return
  7197                           
  7198                           ;lib.c: 14: _delay((unsigned long)((10)*(32000000/4000.0)));
  7199  09FD  3068               	movlw	104
  7200  09FE  0020               	movlb	0	; select bank0
  7201  09FF  00BB               	movwf	??_Delay
  7202  0A00  30E4               	movlw	228
  7203  0A01                     u6607:	
  7204  0A01  0B89               	decfsz	9,f
  7205  0A02  2A01               	goto	u6607
  7206  0A03  0BBB               	decfsz	??_Delay,f
  7207  0A04  2A01               	goto	u6607
  7208  0A05  0000               	nop
  7209  0A06  3001               	movlw	1
  7210  0A07  0020               	movlb	0	; select bank0
  7211  0A08  00BB               	movwf	??_Delay
  7212  0A09  083B               	movf	??_Delay,w
  7213  0A0A  0021               	movlb	1	; select bank1
  7214  0A0B  07A1               	addwf	Delay@i^(0+128),f
  7215  0A0C  29F9               	goto	l6783
  7216  0A0D                     __end_of_Delay:	
  7217                           
  7218                           	psect	text15
  7219  0339                     __ptext15:	
  7220 ;; *************** function _Clock_Display *****************
  7221 ;; Defined at:
  7222 ;;		line 115 in file "clock.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;  fetchTime       1    wreg     unsigned char 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;  fetchTime       1   32[BANK1 ] unsigned char 
  7227 ;;  row             1   35[BANK1 ] PTR char 
  7228 ;;		 -> DISPLAYBANK_row(11), 
  7229 ;;  col             1   34[BANK1 ] PTR unsigned int 
  7230 ;;		 -> DISPLAYBANK_col(20), 
  7231 ;;  hourDisplay     1   33[BANK1 ] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        5 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:   12
  7248 ;; This function calls:
  7249 ;;		_Clock_Read
  7250 ;;		_IncHour
  7251 ;; This function is called by:
  7252 ;;		_main
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           
  7257                           ;psect for function _Clock_Display
  7258  0339                     _Clock_Display:	
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in _Clock_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7262                           ;Clock_Display@fetchTime stored from wreg
  7263  0339  0021               	movlb	1	; select bank1
  7264  033A  00C0               	movwf	Clock_Display@fetchTime^(0+128)
  7265                           
  7266                           ;clock.c: 117: if(fetchTime)
  7267  033B  0840               	movf	Clock_Display@fetchTime^(0+128),w
  7268  033C  1903               	btfsc	3,2
  7269  033D  2B41               	goto	l7091
  7270                           
  7271                           ;clock.c: 118: Clock_Read();
  7272  033E  318A  2295  3183   	fcall	_Clock_Read
  7273  0341                     l7091:	
  7274                           
  7275                           ;clock.c: 120: int8_t* row = DISPLAYBANK_row;
  7276  0341  30E0               	movlw	(low (_DISPLAYBANK_row| 0))& (0+255)
  7277  0342  0021               	movlb	1	; select bank1
  7278  0343  00BF               	movwf	??_Clock_Display^(0+128)
  7279  0344  083F               	movf	??_Clock_Display^(0+128),w
  7280  0345  00C3               	movwf	Clock_Display@row^(0+128)
  7281                           
  7282                           ;clock.c: 121: uint16_t* col = DISPLAYBANK_col;
  7283  0346  3035               	movlw	(low (_DISPLAYBANK_col| (0+256)))& (0+255)
  7284  0347  00BF               	movwf	??_Clock_Display^(0+128)
  7285  0348  083F               	movf	??_Clock_Display^(0+128),w
  7286  0349  00C2               	movwf	Clock_Display@col^(0+128)
  7287                           
  7288                           ;clock.c: 123: *(row++) = 0;
  7289  034A  0843               	movf	Clock_Display@row^(0+128),w
  7290  034B  0086               	movwf	6
  7291  034C  0187               	clrf	7
  7292  034D  0181               	clrf	1
  7293  034E  3001               	movlw	1
  7294  034F  00BF               	movwf	??_Clock_Display^(0+128)
  7295  0350  083F               	movf	??_Clock_Display^(0+128),w
  7296  0351  07C3               	addwf	Clock_Display@row^(0+128),f
  7297                           
  7298                           ;clock.c: 124: *(col++) = 0x7E4;
  7299  0352  0842               	movf	Clock_Display@col^(0+128),w
  7300  0353  0086               	movwf	6
  7301  0354  3001               	movlw	1	; select bank2/3
  7302  0355  0087               	movwf	7
  7303  0356  30E4               	movlw	228
  7304  0357  3FC0               	movwi [0]fsr1
  7305  0358  3007               	movlw	7
  7306  0359  3FC1               	movwi [1]fsr1
  7307  035A  3002               	movlw	2
  7308  035B  00BF               	movwf	??_Clock_Display^(0+128)
  7309  035C  083F               	movf	??_Clock_Display^(0+128),w
  7310  035D  07C2               	addwf	Clock_Display@col^(0+128),f
  7311                           
  7312                           ;clock.c: 126: uint8_t hourDisplay = hour;
  7313  035E  085D               	movf	_hour^(0+128),w
  7314  035F  00BF               	movwf	??_Clock_Display^(0+128)
  7315  0360  083F               	movf	??_Clock_Display^(0+128),w
  7316  0361  00C1               	movwf	Clock_Display@hourDisplay^(0+128)
  7317                           
  7318                           ;clock.c: 128: if(min >= 0x05)
  7319  0362  3005               	movlw	5
  7320  0363  0248               	subwf	_min^(0+128),w
  7321  0364  1C03               	skipc
  7322  0365  2C7E               	goto	l7219
  7323                           
  7324                           ;clock.c: 129: {
  7325                           ;clock.c: 130: if(min < 0x10 || min >= 0x55)
  7326  0366  3010               	movlw	16
  7327  0367  0248               	subwf	_min^(0+128),w
  7328  0368  1C03               	skipc
  7329  0369  2B6E               	goto	l7111
  7330  036A  3055               	movlw	85
  7331  036B  0248               	subwf	_min^(0+128),w
  7332  036C  1C03               	skipc
  7333  036D  2B82               	goto	l7119
  7334  036E                     l7111:	
  7335                           
  7336                           ;clock.c: 131: {
  7337                           ;clock.c: 132: *(row++) = 2;
  7338  036E  3002               	movlw	2
  7339  036F  00BF               	movwf	??_Clock_Display^(0+128)
  7340  0370  0843               	movf	Clock_Display@row^(0+128),w
  7341  0371  0086               	movwf	6
  7342  0372  0187               	clrf	7
  7343  0373  083F               	movf	??_Clock_Display^(0+128),w
  7344  0374  0081               	movwf	1
  7345  0375  3001               	movlw	1
  7346  0376  00BF               	movwf	??_Clock_Display^(0+128)
  7347  0377  083F               	movf	??_Clock_Display^(0+128),w
  7348  0378  07C3               	addwf	Clock_Display@row^(0+128),f
  7349                           
  7350                           ;clock.c: 133: *(col++) = 0x43F;
  7351  0379  0842               	movf	Clock_Display@col^(0+128),w
  7352  037A  0086               	movwf	6
  7353  037B  3001               	movlw	1	; select bank2/3
  7354  037C  0087               	movwf	7
  7355  037D  303F               	movlw	63
  7356  037E  3FC0               	movwi [0]fsr1
  7357  037F  3004               	movlw	4
  7358  0380  3FC1               	movwi [1]fsr1
  7359  0381  2C1B               	goto	l7183
  7360  0382                     l7119:	
  7361                           ;clock.c: 134: }
  7362                           
  7363                           
  7364                           ;clock.c: 135: else if(min < 0x15 || min >= 0x50)
  7365  0382  3015               	movlw	21
  7366  0383  0248               	subwf	_min^(0+128),w
  7367  0384  1C03               	skipc
  7368  0385  2B8A               	goto	l7123
  7369  0386  3050               	movlw	80
  7370  0387  0248               	subwf	_min^(0+128),w
  7371  0388  1C03               	skipc
  7372  0389  2BB6               	goto	l7141
  7373  038A                     l7123:	
  7374                           
  7375                           ;clock.c: 136: {
  7376                           ;clock.c: 137: if(min >= 0x50)
  7377  038A  3050               	movlw	80
  7378  038B  0248               	subwf	_min^(0+128),w
  7379  038C  1C03               	skipc
  7380  038D  2BA2               	goto	l7133
  7381                           
  7382                           ;clock.c: 138: {
  7383                           ;clock.c: 139: *(row++) = 3;
  7384  038E  3003               	movlw	3
  7385  038F  00BF               	movwf	??_Clock_Display^(0+128)
  7386  0390  0843               	movf	Clock_Display@row^(0+128),w
  7387  0391  0086               	movwf	6
  7388  0392  0187               	clrf	7
  7389  0393  083F               	movf	??_Clock_Display^(0+128),w
  7390  0394  0081               	movwf	1
  7391  0395  3001               	movlw	1
  7392  0396  00BF               	movwf	??_Clock_Display^(0+128)
  7393  0397  083F               	movf	??_Clock_Display^(0+128),w
  7394  0398  07C3               	addwf	Clock_Display@row^(0+128),f
  7395                           
  7396                           ;clock.c: 140: *(col++) = 0x11F;
  7397  0399  0842               	movf	Clock_Display@col^(0+128),w
  7398  039A  0086               	movwf	6
  7399  039B  3001               	movlw	1	; select bank2/3
  7400  039C  0087               	movwf	7
  7401  039D  301F               	movlw	31
  7402  039E  3FC0               	movwi [0]fsr1
  7403  039F  3001               	movlw	1
  7404  03A0  3FC1               	movwi [1]fsr1
  7405  03A1  2C1B               	goto	l7183
  7406  03A2                     l7133:	
  7407                           ;clock.c: 141: }
  7408                           
  7409                           
  7410                           ;clock.c: 142: else
  7411                           ;clock.c: 143: {
  7412                           ;clock.c: 144: *(row++) = 3;
  7413  03A2  3003               	movlw	3
  7414  03A3  00BF               	movwf	??_Clock_Display^(0+128)
  7415  03A4  0843               	movf	Clock_Display@row^(0+128),w
  7416  03A5  0086               	movwf	6
  7417  03A6  0187               	clrf	7
  7418  03A7  083F               	movf	??_Clock_Display^(0+128),w
  7419  03A8  0081               	movwf	1
  7420  03A9  3001               	movlw	1
  7421  03AA  00BF               	movwf	??_Clock_Display^(0+128)
  7422  03AB  083F               	movf	??_Clock_Display^(0+128),w
  7423  03AC  07C3               	addwf	Clock_Display@row^(0+128),f
  7424                           
  7425                           ;clock.c: 145: *(col++) = 0x71F;
  7426  03AD  0842               	movf	Clock_Display@col^(0+128),w
  7427  03AE  0086               	movwf	6
  7428  03AF  3001               	movlw	1	; select bank2/3
  7429  03B0  0087               	movwf	7
  7430  03B1  301F               	movlw	31
  7431  03B2  3FC0               	movwi [0]fsr1
  7432  03B3  3007               	movlw	7
  7433  03B4  3FC1               	movwi [1]fsr1
  7434  03B5  2C1B               	goto	l7183
  7435  03B6                     l7141:	
  7436                           ;clock.c: 146: }
  7437                           ;clock.c: 147: }
  7438                           
  7439                           
  7440                           ;clock.c: 148: else if(min < 0x20 || min >= 0x45)
  7441  03B6  3020               	movlw	32
  7442  03B7  0248               	subwf	_min^(0+128),w
  7443  03B8  1C03               	skipc
  7444  03B9  2BBE               	goto	l7145
  7445  03BA  3045               	movlw	69
  7446  03BB  0248               	subwf	_min^(0+128),w
  7447  03BC  1C03               	skipc
  7448  03BD  2BD0               	goto	l7153
  7449  03BE                     l7145:	
  7450                           
  7451                           ;clock.c: 149: {
  7452                           ;clock.c: 150: *(row++) = 1;
  7453  03BE  0843               	movf	Clock_Display@row^(0+128),w
  7454  03BF  0086               	movwf	6
  7455  03C0  0187               	clrf	7
  7456  03C1  0181               	clrf	1
  7457  03C2  0A81               	incf	1,f
  7458  03C3  3001               	movlw	1
  7459  03C4  00BF               	movwf	??_Clock_Display^(0+128)
  7460  03C5  083F               	movf	??_Clock_Display^(0+128),w
  7461  03C6  07C3               	addwf	Clock_Display@row^(0+128),f
  7462                           
  7463                           ;clock.c: 151: *(col++) = 0x602;
  7464  03C7  0842               	movf	Clock_Display@col^(0+128),w
  7465  03C8  0086               	movwf	6
  7466  03C9  3001               	movlw	1	; select bank2/3
  7467  03CA  0087               	movwf	7
  7468  03CB  3002               	movlw	2
  7469  03CC  3FC0               	movwi [0]fsr1
  7470  03CD  3006               	movlw	6
  7471  03CE  3FC1               	movwi [1]fsr1
  7472  03CF  2C1B               	goto	l7183
  7473  03D0                     l7153:	
  7474                           ;clock.c: 152: }
  7475                           
  7476                           
  7477                           ;clock.c: 153: else if(min < 0x25 || min >= 0x40)
  7478  03D0  3025               	movlw	37
  7479  03D1  0248               	subwf	_min^(0+128),w
  7480  03D2  1C03               	skipc
  7481  03D3  2BD8               	goto	l7157
  7482  03D4  3040               	movlw	64
  7483  03D5  0248               	subwf	_min^(0+128),w
  7484  03D6  1C03               	skipc
  7485  03D7  2BEC               	goto	l7165
  7486  03D8                     l7157:	
  7487                           
  7488                           ;clock.c: 154: {
  7489                           ;clock.c: 155: *(row++) = 2;
  7490  03D8  3002               	movlw	2
  7491  03D9  00BF               	movwf	??_Clock_Display^(0+128)
  7492  03DA  0843               	movf	Clock_Display@row^(0+128),w
  7493  03DB  0086               	movwf	6
  7494  03DC  0187               	clrf	7
  7495  03DD  083F               	movf	??_Clock_Display^(0+128),w
  7496  03DE  0081               	movwf	1
  7497  03DF  3001               	movlw	1
  7498  03E0  00BF               	movwf	??_Clock_Display^(0+128)
  7499  03E1  083F               	movf	??_Clock_Display^(0+128),w
  7500  03E2  07C3               	addwf	Clock_Display@row^(0+128),f
  7501                           
  7502                           ;clock.c: 156: *(col++) = 0x7C0;
  7503  03E3  0842               	movf	Clock_Display@col^(0+128),w
  7504  03E4  0086               	movwf	6
  7505  03E5  3001               	movlw	1	; select bank2/3
  7506  03E6  0087               	movwf	7
  7507  03E7  30C0               	movlw	192
  7508  03E8  3FC0               	movwi [0]fsr1
  7509  03E9  3007               	movlw	7
  7510  03EA  3FC1               	movwi [1]fsr1
  7511  03EB  2C1B               	goto	l7183
  7512  03EC                     l7165:	
  7513                           ;clock.c: 157: }
  7514                           
  7515                           
  7516                           ;clock.c: 158: else if(min < 0x30 || min >= 0x35)
  7517  03EC  3030               	movlw	48
  7518  03ED  0248               	subwf	_min^(0+128),w
  7519  03EE  1C03               	skipc
  7520  03EF  2BF4               	goto	l7169
  7521  03F0  3035               	movlw	53
  7522  03F1  0248               	subwf	_min^(0+128),w
  7523  03F2  1C03               	skipc
  7524  03F3  2C08               	goto	l7177
  7525  03F4                     l7169:	
  7526                           
  7527                           ;clock.c: 159: {
  7528                           ;clock.c: 160: *(row++) = 2;
  7529  03F4  3002               	movlw	2
  7530  03F5  00BF               	movwf	??_Clock_Display^(0+128)
  7531  03F6  0843               	movf	Clock_Display@row^(0+128),w
  7532  03F7  0086               	movwf	6
  7533  03F8  0187               	clrf	7
  7534  03F9  083F               	movf	??_Clock_Display^(0+128),w
  7535  03FA  0081               	movwf	1
  7536  03FB  3001               	movlw	1
  7537  03FC  00BF               	movwf	??_Clock_Display^(0+128)
  7538  03FD  083F               	movf	??_Clock_Display^(0+128),w
  7539  03FE  07C3               	addwf	Clock_Display@row^(0+128),f
  7540                           
  7541                           ;clock.c: 161: *(col++) = 0x400;
  7542  03FF  0842               	movf	Clock_Display@col^(0+128),w
  7543  0400  0086               	movwf	6
  7544  0401  3001               	movlw	1	; select bank2/3
  7545  0402  0087               	movwf	7
  7546  0403  3000               	movlw	0
  7547  0404  3FC0               	movwi [0]fsr1
  7548  0405  3004               	movlw	4
  7549  0406  3FC1               	movwi [1]fsr1
  7550  0407  2C1B               	goto	l7183
  7551  0408                     l7177:	
  7552                           ;clock.c: 162: }
  7553                           
  7554                           
  7555                           ;clock.c: 163: else
  7556                           ;clock.c: 164: {
  7557                           ;clock.c: 165: *(row++) = 3;
  7558  0408  3003               	movlw	3
  7559  0409  00BF               	movwf	??_Clock_Display^(0+128)
  7560  040A  0843               	movf	Clock_Display@row^(0+128),w
  7561  040B  0086               	movwf	6
  7562  040C  0187               	clrf	7
  7563  040D  083F               	movf	??_Clock_Display^(0+128),w
  7564  040E  0081               	movwf	1
  7565  040F  3001               	movlw	1
  7566  0410  00BF               	movwf	??_Clock_Display^(0+128)
  7567  0411  083F               	movf	??_Clock_Display^(0+128),w
  7568  0412  07C3               	addwf	Clock_Display@row^(0+128),f
  7569                           
  7570                           ;clock.c: 166: *(col++) = 0x7F0;
  7571  0413  0842               	movf	Clock_Display@col^(0+128),w
  7572  0414  0086               	movwf	6
  7573  0415  3001               	movlw	1	; select bank2/3
  7574  0416  0087               	movwf	7
  7575  0417  30F0               	movlw	240
  7576  0418  3FC0               	movwi [0]fsr1
  7577  0419  3007               	movlw	7
  7578  041A  3FC1               	movwi [1]fsr1
  7579  041B                     l7183:	
  7580  041B  3002               	movlw	2
  7581  041C  00BF               	movwf	??_Clock_Display^(0+128)
  7582  041D  083F               	movf	??_Clock_Display^(0+128),w
  7583  041E  07C2               	addwf	Clock_Display@col^(0+128),f
  7584                           
  7585                           ;clock.c: 167: }
  7586                           ;clock.c: 168: if(min >= 0x35)
  7587  041F  3035               	movlw	53
  7588  0420  0248               	subwf	_min^(0+128),w
  7589  0421  1C03               	skipc
  7590  0422  2C4B               	goto	l7201
  7591                           
  7592                           ;clock.c: 169: {
  7593                           ;clock.c: 170: if(min < 0x50 || min >= 0x55)
  7594  0423  3050               	movlw	80
  7595  0424  0248               	subwf	_min^(0+128),w
  7596  0425  1C03               	skipc
  7597  0426  2C2B               	goto	l7191
  7598  0427  3055               	movlw	85
  7599  0428  0248               	subwf	_min^(0+128),w
  7600  0429  1C03               	skipc
  7601  042A  2C42               	goto	l7199
  7602  042B                     l7191:	
  7603                           
  7604                           ;clock.c: 171: {
  7605                           ;clock.c: 172: *(row++) = 3;
  7606  042B  3003               	movlw	3
  7607  042C  00BF               	movwf	??_Clock_Display^(0+128)
  7608  042D  0843               	movf	Clock_Display@row^(0+128),w
  7609  042E  0086               	movwf	6
  7610  042F  0187               	clrf	7
  7611  0430  083F               	movf	??_Clock_Display^(0+128),w
  7612  0431  0081               	movwf	1
  7613  0432  3001               	movlw	1
  7614  0433  00BF               	movwf	??_Clock_Display^(0+128)
  7615  0434  083F               	movf	??_Clock_Display^(0+128),w
  7616  0435  07C3               	addwf	Clock_Display@row^(0+128),f
  7617                           
  7618                           ;clock.c: 173: *(col++) = 0x1FF;
  7619  0436  0842               	movf	Clock_Display@col^(0+128),w
  7620  0437  0086               	movwf	6
  7621  0438  3001               	movlw	1	; select bank2/3
  7622  0439  0087               	movwf	7
  7623  043A  30FF               	movlw	255
  7624  043B  3FC0               	movwi [0]fsr1
  7625  043C  3001               	movlw	1
  7626  043D  3FC1               	movwi [1]fsr1
  7627  043E  3002               	movlw	2
  7628  043F  00BF               	movwf	??_Clock_Display^(0+128)
  7629  0440  083F               	movf	??_Clock_Display^(0+128),w
  7630  0441  07C2               	addwf	Clock_Display@col^(0+128),f
  7631  0442                     l7199:	
  7632                           
  7633                           ;clock.c: 174: }
  7634                           ;clock.c: 175: hourDisplay = IncHour(hourDisplay);
  7635  0442  0841               	movf	Clock_Display@hourDisplay^(0+128),w
  7636  0443  3189  21B8  3183   	fcall	_IncHour
  7637  0446  0021               	movlb	1	; select bank1
  7638  0447  00BF               	movwf	??_Clock_Display^(0+128)
  7639  0448  083F               	movf	??_Clock_Display^(0+128),w
  7640  0449  00C1               	movwf	Clock_Display@hourDisplay^(0+128)
  7641                           
  7642                           ;clock.c: 176: }
  7643  044A  2C7E               	goto	l7219
  7644  044B                     l7201:	
  7645                           
  7646                           ;clock.c: 177: else
  7647                           ;clock.c: 178: {
  7648                           ;clock.c: 179: if(hourDisplay == 0x09)
  7649  044B  3009               	movlw	9
  7650  044C  0641               	xorwf	Clock_Display@hourDisplay^(0+128),w
  7651  044D  1D03               	btfss	3,2
  7652  044E  2C67               	goto	l7211
  7653                           
  7654                           ;clock.c: 180: {
  7655                           ;clock.c: 181: hourDisplay = 13;
  7656  044F  300D               	movlw	13
  7657  0450  00BF               	movwf	??_Clock_Display^(0+128)
  7658  0451  083F               	movf	??_Clock_Display^(0+128),w
  7659  0452  00C1               	movwf	Clock_Display@hourDisplay^(0+128)
  7660                           
  7661                           ;clock.c: 182: *(row++) = 4;
  7662  0453  3004               	movlw	4
  7663  0454  00BF               	movwf	??_Clock_Display^(0+128)
  7664  0455  0843               	movf	Clock_Display@row^(0+128),w
  7665  0456  0086               	movwf	6
  7666  0457  0187               	clrf	7
  7667  0458  083F               	movf	??_Clock_Display^(0+128),w
  7668  0459  0081               	movwf	1
  7669  045A  3001               	movlw	1
  7670  045B  00BF               	movwf	??_Clock_Display^(0+128)
  7671  045C  083F               	movf	??_Clock_Display^(0+128),w
  7672  045D  07C3               	addwf	Clock_Display@row^(0+128),f
  7673                           
  7674                           ;clock.c: 183: *(col++) = 0x070;
  7675  045E  0842               	movf	Clock_Display@col^(0+128),w
  7676  045F  0086               	movwf	6
  7677  0460  3001               	movlw	1	; select bank2/3
  7678  0461  0087               	movwf	7
  7679  0462  3070               	movlw	112
  7680  0463  3FC0               	movwi [0]fsr1
  7681  0464  3000               	movlw	0
  7682  0465  3FC1               	movwi [1]fsr1
  7683  0466  2C7A               	goto	l7217
  7684  0467                     l7211:	
  7685                           ;clock.c: 184: }
  7686                           
  7687                           
  7688                           ;clock.c: 185: else
  7689                           ;clock.c: 186: {
  7690                           ;clock.c: 187: *(row++) = 4;
  7691  0467  3004               	movlw	4
  7692  0468  00BF               	movwf	??_Clock_Display^(0+128)
  7693  0469  0843               	movf	Clock_Display@row^(0+128),w
  7694  046A  0086               	movwf	6
  7695  046B  0187               	clrf	7
  7696  046C  083F               	movf	??_Clock_Display^(0+128),w
  7697  046D  0081               	movwf	1
  7698  046E  3001               	movlw	1
  7699  046F  00BF               	movwf	??_Clock_Display^(0+128)
  7700  0470  083F               	movf	??_Clock_Display^(0+128),w
  7701  0471  07C3               	addwf	Clock_Display@row^(0+128),f
  7702                           
  7703                           ;clock.c: 188: *(col++) = 0x7F0;
  7704  0472  0842               	movf	Clock_Display@col^(0+128),w
  7705  0473  0086               	movwf	6
  7706  0474  3001               	movlw	1	; select bank2/3
  7707  0475  0087               	movwf	7
  7708  0476  30F0               	movlw	240
  7709  0477  3FC0               	movwi [0]fsr1
  7710  0478  3007               	movlw	7
  7711  0479  3FC1               	movwi [1]fsr1
  7712  047A                     l7217:	
  7713  047A  3002               	movlw	2
  7714  047B  00BF               	movwf	??_Clock_Display^(0+128)
  7715  047C  083F               	movf	??_Clock_Display^(0+128),w
  7716  047D  07C2               	addwf	Clock_Display@col^(0+128),f
  7717  047E                     l7219:	
  7718                           
  7719                           ;clock.c: 189: }
  7720                           ;clock.c: 190: }
  7721                           ;clock.c: 191: }
  7722                           ;clock.c: 193: if(min < 0x05)
  7723  047E  3005               	movlw	5
  7724  047F  0248               	subwf	_min^(0+128),w
  7725  0480  1803               	skipnc
  7726  0481  2DA6               	goto	l7337
  7727                           
  7728                           ;clock.c: 194: {
  7729                           ;clock.c: 195: if(hourDisplay == 10)
  7730  0482  300A               	movlw	10
  7731  0483  0641               	xorwf	Clock_Display@hourDisplay^(0+128),w
  7732  0484  1D03               	btfss	3,2
  7733  0485  2C9A               	goto	l7231
  7734                           
  7735                           ;clock.c: 196: {
  7736                           ;clock.c: 197: *(row++) = 9;
  7737  0486  3009               	movlw	9
  7738  0487  00BF               	movwf	??_Clock_Display^(0+128)
  7739  0488  0843               	movf	Clock_Display@row^(0+128),w
  7740  0489  0086               	movwf	6
  7741  048A  0187               	clrf	7
  7742  048B  083F               	movf	??_Clock_Display^(0+128),w
  7743  048C  0081               	movwf	1
  7744  048D  3001               	movlw	1
  7745  048E  00BF               	movwf	??_Clock_Display^(0+128)
  7746  048F  083F               	movf	??_Clock_Display^(0+128),w
  7747  0490  07C3               	addwf	Clock_Display@row^(0+128),f
  7748                           
  7749                           ;clock.c: 198: *(col++) = 0x018;
  7750  0491  0842               	movf	Clock_Display@col^(0+128),w
  7751  0492  0086               	movwf	6
  7752  0493  3001               	movlw	1	; select bank2/3
  7753  0494  0087               	movwf	7
  7754  0495  3018               	movlw	24
  7755  0496  3FC0               	movwi [0]fsr1
  7756  0497  3000               	movlw	0
  7757  0498  3FC1               	movwi [1]fsr1
  7758  0499  2CAD               	goto	l7237
  7759  049A                     l7231:	
  7760                           ;clock.c: 199: }
  7761                           
  7762                           
  7763                           ;clock.c: 200: else
  7764                           ;clock.c: 201: {
  7765                           ;clock.c: 202: *(row++) = 9;
  7766  049A  3009               	movlw	9
  7767  049B  00BF               	movwf	??_Clock_Display^(0+128)
  7768  049C  0843               	movf	Clock_Display@row^(0+128),w
  7769  049D  0086               	movwf	6
  7770  049E  0187               	clrf	7
  7771  049F  083F               	movf	??_Clock_Display^(0+128),w
  7772  04A0  0081               	movwf	1
  7773  04A1  3001               	movlw	1
  7774  04A2  00BF               	movwf	??_Clock_Display^(0+128)
  7775  04A3  083F               	movf	??_Clock_Display^(0+128),w
  7776  04A4  07C3               	addwf	Clock_Display@row^(0+128),f
  7777                           
  7778                           ;clock.c: 203: *(col++) = 0x01F;
  7779  04A5  0842               	movf	Clock_Display@col^(0+128),w
  7780  04A6  0086               	movwf	6
  7781  04A7  3001               	movlw	1	; select bank2/3
  7782  04A8  0087               	movwf	7
  7783  04A9  301F               	movlw	31
  7784  04AA  3FC0               	movwi [0]fsr1
  7785  04AB  3000               	movlw	0
  7786  04AC  3FC1               	movwi [1]fsr1
  7787  04AD                     l7237:	
  7788  04AD  3002               	movlw	2
  7789  04AE  00BF               	movwf	??_Clock_Display^(0+128)
  7790  04AF  083F               	movf	??_Clock_Display^(0+128),w
  7791  04B0  07C2               	addwf	Clock_Display@col^(0+128),f
  7792                           
  7793                           ;clock.c: 204: }
  7794                           ;clock.c: 205: }
  7795                           ;clock.c: 207: switch(hourDisplay)
  7796  04B1  2DA6               	goto	l7337
  7797  04B2                     l7239:	
  7798                           ;clock.c: 208: {
  7799                           ;clock.c: 209: case 0x00:
  7800                           
  7801                           
  7802                           ;clock.c: 210: case 0x12:
  7803                           ;clock.c: 211: *(row++) = 8;
  7804  04B2  3008               	movlw	8
  7805  04B3  00BF               	movwf	??_Clock_Display^(0+128)
  7806  04B4  0843               	movf	Clock_Display@row^(0+128),w
  7807  04B5  0086               	movwf	6
  7808  04B6  0187               	clrf	7
  7809  04B7  083F               	movf	??_Clock_Display^(0+128),w
  7810  04B8  0081               	movwf	1
  7811  04B9  3001               	movlw	1
  7812  04BA  00BF               	movwf	??_Clock_Display^(0+128)
  7813  04BB  083F               	movf	??_Clock_Display^(0+128),w
  7814  04BC  07C3               	addwf	Clock_Display@row^(0+128),f
  7815                           
  7816                           ;clock.c: 212: *(col++) = 0x01F;
  7817  04BD  0842               	movf	Clock_Display@col^(0+128),w
  7818  04BE  0086               	movwf	6
  7819  04BF  3001               	movlw	1	; select bank2/3
  7820  04C0  0087               	movwf	7
  7821  04C1  301F               	movlw	31
  7822  04C2  3FC0               	movwi [0]fsr1
  7823  04C3  3000               	movlw	0
  7824  04C4  3FC1               	movwi [1]fsr1
  7825  04C5  2DA1               	goto	l7333
  7826  04C6                     l7247:	
  7827                           ;clock.c: 214: case 0x01:
  7828                           
  7829                           ;clock.c: 213: break;
  7830                           
  7831                           
  7832                           ;clock.c: 215: *(row++) = 5;
  7833  04C6  3005               	movlw	5
  7834  04C7  00BF               	movwf	??_Clock_Display^(0+128)
  7835  04C8  0843               	movf	Clock_Display@row^(0+128),w
  7836  04C9  0086               	movwf	6
  7837  04CA  0187               	clrf	7
  7838  04CB  083F               	movf	??_Clock_Display^(0+128),w
  7839  04CC  0081               	movwf	1
  7840  04CD  3001               	movlw	1
  7841  04CE  00BF               	movwf	??_Clock_Display^(0+128)
  7842  04CF  083F               	movf	??_Clock_Display^(0+128),w
  7843  04D0  07C3               	addwf	Clock_Display@row^(0+128),f
  7844                           
  7845                           ;clock.c: 216: *(col++) = 0x7F8;
  7846  04D1  0842               	movf	Clock_Display@col^(0+128),w
  7847  04D2  0086               	movwf	6
  7848  04D3  3001               	movlw	1	; select bank2/3
  7849  04D4  0087               	movwf	7
  7850  04D5  30F8               	movlw	248
  7851  04D6  3FC0               	movwi [0]fsr1
  7852  04D7  3007               	movlw	7
  7853  04D8  3FC1               	movwi [1]fsr1
  7854  04D9  2DA1               	goto	l7333
  7855  04DA                     l7255:	
  7856                           ;clock.c: 218: case 0x02:
  7857                           
  7858                           ;clock.c: 217: break;
  7859                           
  7860                           
  7861                           ;clock.c: 219: *(row++) = 6;
  7862  04DA  3006               	movlw	6
  7863  04DB  00BF               	movwf	??_Clock_Display^(0+128)
  7864  04DC  0843               	movf	Clock_Display@row^(0+128),w
  7865  04DD  0086               	movwf	6
  7866  04DE  0187               	clrf	7
  7867  04DF  083F               	movf	??_Clock_Display^(0+128),w
  7868  04E0  0081               	movwf	1
  7869  04E1  3001               	movlw	1
  7870  04E2  00BF               	movwf	??_Clock_Display^(0+128)
  7871  04E3  083F               	movf	??_Clock_Display^(0+128),w
  7872  04E4  07C3               	addwf	Clock_Display@row^(0+128),f
  7873                           
  7874                           ;clock.c: 220: *(col++) = 0x0FF;
  7875  04E5  0842               	movf	Clock_Display@col^(0+128),w
  7876  04E6  0086               	movwf	6
  7877  04E7  3001               	movlw	1	; select bank2/3
  7878  04E8  0087               	movwf	7
  7879  04E9  30FF               	movlw	255
  7880  04EA  3FC0               	movwi [0]fsr1
  7881  04EB  3000               	movlw	0
  7882  04EC  3FC1               	movwi [1]fsr1
  7883  04ED  2DA1               	goto	l7333
  7884  04EE                     l7263:	
  7885                           ;clock.c: 222: case 0x03:
  7886                           
  7887                           ;clock.c: 221: break;
  7888                           
  7889                           
  7890                           ;clock.c: 223: *(row++) = 5;
  7891  04EE  3005               	movlw	5
  7892  04EF  00BF               	movwf	??_Clock_Display^(0+128)
  7893  04F0  0843               	movf	Clock_Display@row^(0+128),w
  7894  04F1  0086               	movwf	6
  7895  04F2  0187               	clrf	7
  7896  04F3  083F               	movf	??_Clock_Display^(0+128),w
  7897  04F4  0081               	movwf	1
  7898  04F5  3001               	movlw	1
  7899  04F6  00BF               	movwf	??_Clock_Display^(0+128)
  7900  04F7  083F               	movf	??_Clock_Display^(0+128),w
  7901  04F8  07C3               	addwf	Clock_Display@row^(0+128),f
  7902                           
  7903                           ;clock.c: 224: *(col++) = 0x03F;
  7904  04F9  0842               	movf	Clock_Display@col^(0+128),w
  7905  04FA  0086               	movwf	6
  7906  04FB  3001               	movlw	1	; select bank2/3
  7907  04FC  0087               	movwf	7
  7908  04FD  303F               	movlw	63
  7909  04FE  3FC0               	movwi [0]fsr1
  7910  04FF  3000               	movlw	0
  7911  0500  3FC1               	movwi [1]fsr1
  7912  0501  2DA1               	goto	l7333
  7913  0502                     l7271:	
  7914                           ;clock.c: 226: case 0x04:
  7915                           
  7916                           ;clock.c: 225: break;
  7917                           
  7918                           
  7919                           ;clock.c: 227: *(row++) = 6;
  7920  0502  3006               	movlw	6
  7921  0503  00BF               	movwf	??_Clock_Display^(0+128)
  7922  0504  0843               	movf	Clock_Display@row^(0+128),w
  7923  0505  0086               	movwf	6
  7924  0506  0187               	clrf	7
  7925  0507  083F               	movf	??_Clock_Display^(0+128),w
  7926  0508  0081               	movwf	1
  7927  0509  3001               	movlw	1
  7928  050A  00BF               	movwf	??_Clock_Display^(0+128)
  7929  050B  083F               	movf	??_Clock_Display^(0+128),w
  7930  050C  07C3               	addwf	Clock_Display@row^(0+128),f
  7931                           
  7932                           ;clock.c: 228: *(col++) = 0x7F0;
  7933  050D  0842               	movf	Clock_Display@col^(0+128),w
  7934  050E  0086               	movwf	6
  7935  050F  3001               	movlw	1	; select bank2/3
  7936  0510  0087               	movwf	7
  7937  0511  30F0               	movlw	240
  7938  0512  3FC0               	movwi [0]fsr1
  7939  0513  3007               	movlw	7
  7940  0514  3FC1               	movwi [1]fsr1
  7941  0515  2DA1               	goto	l7333
  7942  0516                     l7279:	
  7943                           ;clock.c: 230: case 0x05:
  7944                           
  7945                           ;clock.c: 229: break;
  7946                           
  7947                           
  7948                           ;clock.c: 231: *(row++) = 6;
  7949  0516  3006               	movlw	6
  7950  0517  00BF               	movwf	??_Clock_Display^(0+128)
  7951  0518  0843               	movf	Clock_Display@row^(0+128),w
  7952  0519  0086               	movwf	6
  7953  051A  0187               	clrf	7
  7954  051B  083F               	movf	??_Clock_Display^(0+128),w
  7955  051C  0081               	movwf	1
  7956  051D  3001               	movlw	1
  7957  051E  00BF               	movwf	??_Clock_Display^(0+128)
  7958  051F  083F               	movf	??_Clock_Display^(0+128),w
  7959  0520  07C3               	addwf	Clock_Display@row^(0+128),f
  7960                           
  7961                           ;clock.c: 232: *(col++) = 0x70F;
  7962  0521  0842               	movf	Clock_Display@col^(0+128),w
  7963  0522  0086               	movwf	6
  7964  0523  3001               	movlw	1	; select bank2/3
  7965  0524  0087               	movwf	7
  7966  0525  300F               	movlw	15
  7967  0526  3FC0               	movwi [0]fsr1
  7968  0527  3007               	movlw	7
  7969  0528  3FC1               	movwi [1]fsr1
  7970  0529  2DA1               	goto	l7333
  7971  052A                     l7287:	
  7972                           ;clock.c: 234: case 0x06:
  7973                           
  7974                           ;clock.c: 233: break;
  7975                           
  7976                           
  7977                           ;clock.c: 235: *(row++) = 5;
  7978  052A  3005               	movlw	5
  7979  052B  00BF               	movwf	??_Clock_Display^(0+128)
  7980  052C  0843               	movf	Clock_Display@row^(0+128),w
  7981  052D  0086               	movwf	6
  7982  052E  0187               	clrf	7
  7983  052F  083F               	movf	??_Clock_Display^(0+128),w
  7984  0530  0081               	movwf	1
  7985  0531  3001               	movlw	1
  7986  0532  00BF               	movwf	??_Clock_Display^(0+128)
  7987  0533  083F               	movf	??_Clock_Display^(0+128),w
  7988  0534  07C3               	addwf	Clock_Display@row^(0+128),f
  7989                           
  7990                           ;clock.c: 236: *(col++) = 0x7C7;
  7991  0535  0842               	movf	Clock_Display@col^(0+128),w
  7992  0536  0086               	movwf	6
  7993  0537  3001               	movlw	1	; select bank2/3
  7994  0538  0087               	movwf	7
  7995  0539  30C7               	movlw	199
  7996  053A  3FC0               	movwi [0]fsr1
  7997  053B  3007               	movlw	7
  7998  053C  3FC1               	movwi [1]fsr1
  7999  053D  2DA1               	goto	l7333
  8000  053E                     l7295:	
  8001                           ;clock.c: 238: case 0x07:
  8002                           
  8003                           ;clock.c: 237: break;
  8004                           
  8005                           
  8006                           ;clock.c: 239: *(row++) = 8;
  8007  053E  3008               	movlw	8
  8008  053F  00BF               	movwf	??_Clock_Display^(0+128)
  8009  0540  0843               	movf	Clock_Display@row^(0+128),w
  8010  0541  0086               	movwf	6
  8011  0542  0187               	clrf	7
  8012  0543  083F               	movf	??_Clock_Display^(0+128),w
  8013  0544  0081               	movwf	1
  8014  0545  3001               	movlw	1
  8015  0546  00BF               	movwf	??_Clock_Display^(0+128)
  8016  0547  083F               	movf	??_Clock_Display^(0+128),w
  8017  0548  07C3               	addwf	Clock_Display@row^(0+128),f
  8018                           
  8019                           ;clock.c: 240: *(col++) = 0x7E0;
  8020  0549  0842               	movf	Clock_Display@col^(0+128),w
  8021  054A  0086               	movwf	6
  8022  054B  3001               	movlw	1	; select bank2/3
  8023  054C  0087               	movwf	7
  8024  054D  30E0               	movlw	224
  8025  054E  3FC0               	movwi [0]fsr1
  8026  054F  3007               	movlw	7
  8027  0550  3FC1               	movwi [1]fsr1
  8028  0551  2DA1               	goto	l7333
  8029  0552                     l7303:	
  8030                           ;clock.c: 242: case 0x08:
  8031                           
  8032                           ;clock.c: 241: break;
  8033                           
  8034                           
  8035                           ;clock.c: 243: *(row++) = 7;
  8036  0552  3007               	movlw	7
  8037  0553  00BF               	movwf	??_Clock_Display^(0+128)
  8038  0554  0843               	movf	Clock_Display@row^(0+128),w
  8039  0555  0086               	movwf	6
  8040  0556  0187               	clrf	7
  8041  0557  083F               	movf	??_Clock_Display^(0+128),w
  8042  0558  0081               	movwf	1
  8043  0559  3001               	movlw	1
  8044  055A  00BF               	movwf	??_Clock_Display^(0+128)
  8045  055B  083F               	movf	??_Clock_Display^(0+128),w
  8046  055C  07C3               	addwf	Clock_Display@row^(0+128),f
  8047                           
  8048                           ;clock.c: 244: *(col++) = 0x7E0;
  8049  055D  0842               	movf	Clock_Display@col^(0+128),w
  8050  055E  0086               	movwf	6
  8051  055F  3001               	movlw	1	; select bank2/3
  8052  0560  0087               	movwf	7
  8053  0561  30E0               	movlw	224
  8054  0562  3FC0               	movwi [0]fsr1
  8055  0563  3007               	movlw	7
  8056  0564  3FC1               	movwi [1]fsr1
  8057  0565  2DA1               	goto	l7333
  8058  0566                     l7311:	
  8059                           ;clock.c: 246: case 0x09:
  8060                           
  8061                           ;clock.c: 245: break;
  8062                           
  8063                           
  8064                           ;clock.c: 247: *(row++) = 4;
  8065  0566  3004               	movlw	4
  8066  0567  00BF               	movwf	??_Clock_Display^(0+128)
  8067  0568  0843               	movf	Clock_Display@row^(0+128),w
  8068  0569  0086               	movwf	6
  8069  056A  0187               	clrf	7
  8070  056B  083F               	movf	??_Clock_Display^(0+128),w
  8071  056C  0081               	movwf	1
  8072  056D  3001               	movlw	1
  8073  056E  00BF               	movwf	??_Clock_Display^(0+128)
  8074  056F  083F               	movf	??_Clock_Display^(0+128),w
  8075  0570  07C3               	addwf	Clock_Display@row^(0+128),f
  8076                           
  8077                           ;clock.c: 248: *(col++) = 0x07F;
  8078  0571  0842               	movf	Clock_Display@col^(0+128),w
  8079  0572  0086               	movwf	6
  8080  0573  3001               	movlw	1	; select bank2/3
  8081  0574  0087               	movwf	7
  8082  0575  307F               	movlw	127
  8083  0576  3FC0               	movwi [0]fsr1
  8084  0577  3000               	movlw	0
  8085  0578  3FC1               	movwi [1]fsr1
  8086  0579  2DA1               	goto	l7333
  8087  057A                     l7319:	
  8088                           ;clock.c: 250: case 0x10:
  8089                           
  8090                           ;clock.c: 249: break;
  8091                           
  8092                           
  8093                           ;clock.c: 251: *(row++) = 9;
  8094  057A  3009               	movlw	9
  8095  057B  00BF               	movwf	??_Clock_Display^(0+128)
  8096  057C  0843               	movf	Clock_Display@row^(0+128),w
  8097  057D  0086               	movwf	6
  8098  057E  0187               	clrf	7
  8099  057F  083F               	movf	??_Clock_Display^(0+128),w
  8100  0580  0081               	movwf	1
  8101  0581  3001               	movlw	1
  8102  0582  00BF               	movwf	??_Clock_Display^(0+128)
  8103  0583  083F               	movf	??_Clock_Display^(0+128),w
  8104  0584  07C3               	addwf	Clock_Display@row^(0+128),f
  8105                           
  8106                           ;clock.c: 252: *(col++) = 0x7F8;
  8107  0585  0842               	movf	Clock_Display@col^(0+128),w
  8108  0586  0086               	movwf	6
  8109  0587  3001               	movlw	1	; select bank2/3
  8110  0588  0087               	movwf	7
  8111  0589  30F8               	movlw	248
  8112  058A  3FC0               	movwi [0]fsr1
  8113  058B  3007               	movlw	7
  8114  058C  3FC1               	movwi [1]fsr1
  8115  058D  2DA1               	goto	l7333
  8116  058E                     l7327:	
  8117                           ;clock.c: 254: case 0x11:
  8118                           
  8119                           ;clock.c: 253: break;
  8120                           
  8121                           
  8122                           ;clock.c: 255: *(row++) = 7;
  8123  058E  3007               	movlw	7
  8124  058F  00BF               	movwf	??_Clock_Display^(0+128)
  8125  0590  0843               	movf	Clock_Display@row^(0+128),w
  8126  0591  0086               	movwf	6
  8127  0592  0187               	clrf	7
  8128  0593  083F               	movf	??_Clock_Display^(0+128),w
  8129  0594  0081               	movwf	1
  8130  0595  3001               	movlw	1
  8131  0596  00BF               	movwf	??_Clock_Display^(0+128)
  8132  0597  083F               	movf	??_Clock_Display^(0+128),w
  8133  0598  07C3               	addwf	Clock_Display@row^(0+128),f
  8134                           
  8135                           ;clock.c: 256: *(col++) = 0x01F;
  8136  0599  0842               	movf	Clock_Display@col^(0+128),w
  8137  059A  0086               	movwf	6
  8138  059B  3001               	movlw	1	; select bank2/3
  8139  059C  0087               	movwf	7
  8140  059D  301F               	movlw	31
  8141  059E  3FC0               	movwi [0]fsr1
  8142  059F  3000               	movlw	0
  8143  05A0  3FC1               	movwi [1]fsr1
  8144  05A1                     l7333:	
  8145  05A1  3002               	movlw	2
  8146  05A2  00BF               	movwf	??_Clock_Display^(0+128)
  8147  05A3  083F               	movf	??_Clock_Display^(0+128),w
  8148  05A4  07C2               	addwf	Clock_Display@col^(0+128),f
  8149                           
  8150                           ;clock.c: 258: }
  8151                           
  8152                           ;clock.c: 257: break;
  8153  05A5  2DCF               	goto	l7339
  8154  05A6                     l7337:	
  8155  05A6  0841               	movf	Clock_Display@hourDisplay^(0+128),w
  8156                           
  8157                           ; Switch size 1, requested type "space"
  8158                           ; Number of cases is 13, Range of values is 0 to 18
  8159                           ; switch strategies available:
  8160                           ; Name         Instructions Cycles
  8161                           ; simple_byte           40    21 (average)
  8162                           ; direct_byte           44     6 (fixed)
  8163                           ; jumptable            260     6 (fixed)
  8164                           ;	Chosen strategy is simple_byte
  8165  05A7  3A00               	xorlw	0	; case 0
  8166  05A8  1903               	skipnz
  8167  05A9  2CB2               	goto	l7239
  8168  05AA  3A01               	xorlw	1	; case 1
  8169  05AB  1903               	skipnz
  8170  05AC  2CC6               	goto	l7247
  8171  05AD  3A03               	xorlw	3	; case 2
  8172  05AE  1903               	skipnz
  8173  05AF  2CDA               	goto	l7255
  8174  05B0  3A01               	xorlw	1	; case 3
  8175  05B1  1903               	skipnz
  8176  05B2  2CEE               	goto	l7263
  8177  05B3  3A07               	xorlw	7	; case 4
  8178  05B4  1903               	skipnz
  8179  05B5  2D02               	goto	l7271
  8180  05B6  3A01               	xorlw	1	; case 5
  8181  05B7  1903               	skipnz
  8182  05B8  2D16               	goto	l7279
  8183  05B9  3A03               	xorlw	3	; case 6
  8184  05BA  1903               	skipnz
  8185  05BB  2D2A               	goto	l7287
  8186  05BC  3A01               	xorlw	1	; case 7
  8187  05BD  1903               	skipnz
  8188  05BE  2D3E               	goto	l7295
  8189  05BF  3A0F               	xorlw	15	; case 8
  8190  05C0  1903               	skipnz
  8191  05C1  2D52               	goto	l7303
  8192  05C2  3A01               	xorlw	1	; case 9
  8193  05C3  1903               	skipnz
  8194  05C4  2D66               	goto	l7311
  8195  05C5  3A19               	xorlw	25	; case 16
  8196  05C6  1903               	skipnz
  8197  05C7  2D7A               	goto	l7319
  8198  05C8  3A01               	xorlw	1	; case 17
  8199  05C9  1903               	skipnz
  8200  05CA  2D8E               	goto	l7327
  8201  05CB  3A03               	xorlw	3	; case 18
  8202  05CC  1903               	skipnz
  8203  05CD  2CB2               	goto	l7239
  8204  05CE  2DCF               	goto	l7339
  8205  05CF                     l7339:	
  8206                           
  8207                           ;clock.c: 260: *(row++) = -1;
  8208  05CF  0843               	movf	Clock_Display@row^(0+128),w
  8209  05D0  0086               	movwf	6
  8210  05D1  0187               	clrf	7
  8211  05D2  0181               	clrf	1
  8212  05D3  0381               	decf	1,f
  8213  05D4  3001               	movlw	1
  8214  05D5  00BF               	movwf	??_Clock_Display^(0+128)
  8215  05D6  083F               	movf	??_Clock_Display^(0+128),w
  8216  05D7  07C3               	addwf	Clock_Display@row^(0+128),f
  8217  05D8  0008               	return
  8218  05D9                     __end_of_Clock_Display:	
  8219                           
  8220                           	psect	text16
  8221  09B8                     __ptext16:	
  8222 ;; *************** function _IncHour *****************
  8223 ;; Defined at:
  8224 ;;		line 66 in file "clock.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  in              1    wreg     unsigned char 
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;  in              1   27[BANK0 ] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      unsigned char 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;Total ram usage:        1 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    9
  8245 ;; This function calls:
  8246 ;;		Nothing
  8247 ;; This function is called by:
  8248 ;;		_Clock_Display
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function _IncHour
  8254  09B8                     _IncHour:	
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in _IncHour: [wreg+status,2+status,0]
  8258                           ;IncHour@in stored from wreg
  8259  09B8  0020               	movlb	0	; select bank0
  8260  09B9  00BB               	movwf	IncHour@in
  8261                           
  8262                           ;clock.c: 68: if(in == 0x09)
  8263  09BA  3009               	movlw	9
  8264  09BB  063B               	xorwf	IncHour@in,w
  8265  09BC  1D03               	btfss	3,2
  8266  09BD  29C0               	goto	l6819
  8267                           
  8268                           ;clock.c: 69: return 0x10;
  8269  09BE  3010               	movlw	16
  8270  09BF  0008               	return
  8271  09C0                     l6819:	
  8272                           
  8273                           ;clock.c: 70: else if(in == 0x12)
  8274  09C0  3012               	movlw	18
  8275  09C1  063B               	xorwf	IncHour@in,w
  8276  09C2  1D03               	btfss	3,2
  8277  09C3  29C6               	goto	l6827
  8278                           
  8279                           ;clock.c: 71: return 0x01;
  8280  09C4  3001               	movlw	1
  8281  09C5  0008               	return
  8282  09C6                     l6827:	
  8283                           
  8284                           ;clock.c: 72: else
  8285                           ;clock.c: 73: return in + 1;
  8286  09C6  083B               	movf	IncHour@in,w
  8287  09C7  3E01               	addlw	1
  8288  09C8  0008               	return
  8289  09C9                     __end_of_IncHour:	
  8290                           
  8291                           	psect	text17
  8292  0A95                     __ptext17:	
  8293 ;; *************** function _Clock_Read *****************
  8294 ;; Defined at:
  8295 ;;		line 105 in file "clock.c"
  8296 ;; Parameters:    Size  Location     Type
  8297 ;;		None
  8298 ;; Auto vars:     Size  Location     Type
  8299 ;;  dataBuffer      3   28[BANK1 ] unsigned char [3]
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8310 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8311 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8312 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8313 ;;Total ram usage:        4 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:   11
  8316 ;; This function calls:
  8317 ;;		_I2CRead
  8318 ;; This function is called by:
  8319 ;;		_Clock_Initialize
  8320 ;;		_Clock_Display
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           
  8325                           ;psect for function _Clock_Read
  8326  0A95                     _Clock_Read:	
  8327                           
  8328                           ;clock.c: 107: uint8_t dataBuffer[3];
  8329                           ;clock.c: 109: I2CRead(dataBuffer, 0x00, 3, 0b1101111);
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in _Clock_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8333  0A95  30BC               	movlw	low Clock_Read@dataBuffer
  8334  0A96  0021               	movlb	1	; select bank1
  8335  0A97  00A7               	movwf	I2CRead@pdata^(0+128)
  8336  0A98  3000               	movlw	high Clock_Read@dataBuffer
  8337  0A99  00A8               	movwf	(I2CRead@pdata+1)^(0+128)
  8338  0A9A  01A9               	clrf	I2CRead@registerAddress^(0+128)
  8339  0A9B  3003               	movlw	3
  8340  0A9C  00BB               	movwf	??_Clock_Read^(0+128)
  8341  0A9D  083B               	movf	??_Clock_Read^(0+128),w
  8342  0A9E  00AA               	movwf	I2CRead@length^(0+128)
  8343  0A9F  306F               	movlw	111
  8344  0AA0  00AB               	movwf	I2CRead@address^(0+128)
  8345  0AA1  3000               	movlw	0
  8346  0AA2  00AC               	movwf	(I2CRead@address^(0+128)+1)
  8347  0AA3  318C  24D2         	fcall	_I2CRead
  8348                           
  8349                           ;clock.c: 110: sec = (dataBuffer[0] & 0x7f);
  8350  0AA5  0021               	movlb	1	; select bank1
  8351  0AA6  083C               	movf	Clock_Read@dataBuffer^(0+128),w
  8352  0AA7  397F               	andlw	127
  8353  0AA8  00BB               	movwf	??_Clock_Read^(0+128)
  8354  0AA9  083B               	movf	??_Clock_Read^(0+128),w
  8355  0AAA  00C9               	movwf	_sec^(0+128)
  8356                           
  8357                           ;clock.c: 111: min = dataBuffer[1];
  8358  0AAB  083D               	movf	(Clock_Read@dataBuffer^(0+128)+1),w
  8359  0AAC  00BB               	movwf	??_Clock_Read^(0+128)
  8360  0AAD  083B               	movf	??_Clock_Read^(0+128),w
  8361  0AAE  00C8               	movwf	_min^(0+128)
  8362                           
  8363                           ;clock.c: 112: hour = (dataBuffer[2] & 0x1F);
  8364  0AAF  083E               	movf	(Clock_Read@dataBuffer^(0+128)+2),w
  8365  0AB0  391F               	andlw	31
  8366  0AB1  00BB               	movwf	??_Clock_Read^(0+128)
  8367  0AB2  083B               	movf	??_Clock_Read^(0+128),w
  8368  0AB3  00DD               	movwf	_hour^(0+128)
  8369  0AB4  0008               	return
  8370  0AB5                     __end_of_Clock_Read:	
  8371                           
  8372                           	psect	text18
  8373  0F3F                     __ptext18:	
  8374 ;; *************** function _Acc_Initialize *****************
  8375 ;; Defined at:
  8376 ;;		line 13 in file "accelerometer.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;		None
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;  writeBuffer     8    7[BANK2 ] unsigned char [8]
  8381 ;;  dataBuffer      6    0[BANK2 ] unsigned char [6]
  8382 ;;  status          1    6[BANK2 ] enum E12012
  8383 ;; Return value:  Size  Location     Type
  8384 ;;                  1    wreg      void 
  8385 ;; Registers used:
  8386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         0       0       1      15       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:       16 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:   12
  8399 ;; This function calls:
  8400 ;;		_I2CRead
  8401 ;;		_I2CWrite
  8402 ;; This function is called by:
  8403 ;;		_main
  8404 ;; This function uses a non-reentrant model
  8405 ;;
  8406                           
  8407                           
  8408                           ;psect for function _Acc_Initialize
  8409  0F3F                     _Acc_Initialize:	
  8410                           
  8411                           ;accelerometer.c: 15: uint8_t writeBuffer[8];
  8412                           ;accelerometer.c: 16: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _Acc_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8416  0F3F  3002               	movlw	2
  8417  0F40  0021               	movlb	1	; select bank1
  8418  0F41  00BB               	movwf	??_Acc_Initialize^(0+128)
  8419  0F42  083B               	movf	??_Acc_Initialize^(0+128),w
  8420  0F43  0022               	movlb	2	; select bank2
  8421  0F44  00A6               	movwf	Acc_Initialize@status^(0+256)
  8422                           
  8423                           ;accelerometer.c: 18: writeBuffer[0] = 0xA0;
  8424  0F45  30A0               	movlw	160
  8425  0F46  0021               	movlb	1	; select bank1
  8426  0F47  00BB               	movwf	??_Acc_Initialize^(0+128)
  8427  0F48  083B               	movf	??_Acc_Initialize^(0+128),w
  8428  0F49  0022               	movlb	2	; select bank2
  8429  0F4A  00A7               	movwf	Acc_Initialize@writeBuffer^(0+256)
  8430                           
  8431                           ;accelerometer.c: 19: writeBuffer[1] = 0x57;
  8432  0F4B  3057               	movlw	87
  8433  0F4C  0021               	movlb	1	; select bank1
  8434  0F4D  00BB               	movwf	??_Acc_Initialize^(0+128)
  8435  0F4E  083B               	movf	??_Acc_Initialize^(0+128),w
  8436  0F4F  0022               	movlb	2	; select bank2
  8437  0F50  00A8               	movwf	(Acc_Initialize@writeBuffer^(0+256)+1)
  8438                           
  8439                           ;accelerometer.c: 20: writeBuffer[2] = 0x04;
  8440  0F51  3004               	movlw	4
  8441  0F52  0021               	movlb	1	; select bank1
  8442  0F53  00BB               	movwf	??_Acc_Initialize^(0+128)
  8443  0F54  083B               	movf	??_Acc_Initialize^(0+128),w
  8444  0F55  0022               	movlb	2	; select bank2
  8445  0F56  00A9               	movwf	(Acc_Initialize@writeBuffer^(0+256)+2)
  8446                           
  8447                           ;accelerometer.c: 21: writeBuffer[3] = 0x80;
  8448  0F57  3080               	movlw	128
  8449  0F58  0021               	movlb	1	; select bank1
  8450  0F59  00BB               	movwf	??_Acc_Initialize^(0+128)
  8451  0F5A  083B               	movf	??_Acc_Initialize^(0+128),w
  8452  0F5B  0022               	movlb	2	; select bank2
  8453  0F5C  00AA               	movwf	(Acc_Initialize@writeBuffer^(0+256)+3)
  8454                           
  8455                           ;accelerometer.c: 22: writeBuffer[4] = 0x80;
  8456  0F5D  3080               	movlw	128
  8457  0F5E  0021               	movlb	1	; select bank1
  8458  0F5F  00BB               	movwf	??_Acc_Initialize^(0+128)
  8459  0F60  083B               	movf	??_Acc_Initialize^(0+128),w
  8460  0F61  0022               	movlb	2	; select bank2
  8461  0F62  00AB               	movwf	(Acc_Initialize@writeBuffer^(0+256)+4)
  8462                           
  8463                           ;accelerometer.c: 23: writeBuffer[5] = 0x08;
  8464  0F63  3008               	movlw	8
  8465  0F64  0021               	movlb	1	; select bank1
  8466  0F65  00BB               	movwf	??_Acc_Initialize^(0+128)
  8467  0F66  083B               	movf	??_Acc_Initialize^(0+128),w
  8468  0F67  0022               	movlb	2	; select bank2
  8469  0F68  00AC               	movwf	(Acc_Initialize@writeBuffer^(0+256)+5)
  8470                           
  8471                           ;accelerometer.c: 24: writeBuffer[6] = 0x20;
  8472  0F69  3020               	movlw	32
  8473  0F6A  0021               	movlb	1	; select bank1
  8474  0F6B  00BB               	movwf	??_Acc_Initialize^(0+128)
  8475  0F6C  083B               	movf	??_Acc_Initialize^(0+128),w
  8476  0F6D  0022               	movlb	2	; select bank2
  8477  0F6E  00AD               	movwf	(Acc_Initialize@writeBuffer^(0+256)+6)
  8478                           
  8479                           ;accelerometer.c: 25: I2CWrite(writeBuffer, 7, 0b0011000);
  8480  0F6F  3027               	movlw	low Acc_Initialize@writeBuffer
  8481  0F70  0021               	movlb	1	; select bank1
  8482  0F71  00AF               	movwf	I2CWrite@pdata^(0+128)
  8483  0F72  3001               	movlw	high Acc_Initialize@writeBuffer
  8484  0F73  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  8485  0F74  3007               	movlw	7
  8486  0F75  00BB               	movwf	??_Acc_Initialize^(0+128)
  8487  0F76  083B               	movf	??_Acc_Initialize^(0+128),w
  8488  0F77  00B1               	movwf	I2CWrite@length^(0+128)
  8489  0F78  3018               	movlw	24
  8490  0F79  00B2               	movwf	I2CWrite@address^(0+128)
  8491  0F7A  3000               	movlw	0
  8492  0F7B  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  8493  0F7C  318B  234A  318F   	fcall	_I2CWrite
  8494                           
  8495                           ;accelerometer.c: 27: uint8_t dataBuffer[6];
  8496                           ;accelerometer.c: 28: I2CRead(dataBuffer, 0x31, 1, 0b0011000);
  8497  0F7F  3020               	movlw	low Acc_Initialize@dataBuffer
  8498  0F80  0021               	movlb	1	; select bank1
  8499  0F81  00A7               	movwf	I2CRead@pdata^(0+128)
  8500  0F82  3001               	movlw	high Acc_Initialize@dataBuffer
  8501  0F83  00A8               	movwf	(I2CRead@pdata+1)^(0+128)
  8502  0F84  3031               	movlw	49
  8503  0F85  00BB               	movwf	??_Acc_Initialize^(0+128)
  8504  0F86  083B               	movf	??_Acc_Initialize^(0+128),w
  8505  0F87  00A9               	movwf	I2CRead@registerAddress^(0+128)
  8506  0F88  01AA               	clrf	I2CRead@length^(0+128)
  8507  0F89  0AAA               	incf	I2CRead@length^(0+128),f
  8508  0F8A  3018               	movlw	24
  8509  0F8B  00AB               	movwf	I2CRead@address^(0+128)
  8510  0F8C  3000               	movlw	0
  8511  0F8D  00AC               	movwf	(I2CRead@address^(0+128)+1)
  8512  0F8E  318C  24D2  318F   	fcall	_I2CRead
  8513                           
  8514                           ;accelerometer.c: 30: writeBuffer[0] = 0x30;
  8515  0F91  3030               	movlw	48
  8516  0F92  0021               	movlb	1	; select bank1
  8517  0F93  00BB               	movwf	??_Acc_Initialize^(0+128)
  8518  0F94  083B               	movf	??_Acc_Initialize^(0+128),w
  8519  0F95  0022               	movlb	2	; select bank2
  8520  0F96  00A7               	movwf	Acc_Initialize@writeBuffer^(0+256)
  8521                           
  8522                           ;accelerometer.c: 31: writeBuffer[1] = 0x00;
  8523  0F97  01A8               	clrf	(Acc_Initialize@writeBuffer^(0+256)+1)
  8524                           
  8525                           ;accelerometer.c: 32: I2CWrite(writeBuffer, 2, 0b0011000);
  8526  0F98  3027               	movlw	low Acc_Initialize@writeBuffer
  8527  0F99  0021               	movlb	1	; select bank1
  8528  0F9A  00AF               	movwf	I2CWrite@pdata^(0+128)
  8529  0F9B  3001               	movlw	high Acc_Initialize@writeBuffer
  8530  0F9C  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  8531  0F9D  3002               	movlw	2
  8532  0F9E  00BB               	movwf	??_Acc_Initialize^(0+128)
  8533  0F9F  083B               	movf	??_Acc_Initialize^(0+128),w
  8534  0FA0  00B1               	movwf	I2CWrite@length^(0+128)
  8535  0FA1  3018               	movlw	24
  8536  0FA2  00B2               	movwf	I2CWrite@address^(0+128)
  8537  0FA3  3000               	movlw	0
  8538  0FA4  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  8539  0FA5  318B  234A  318F   	fcall	_I2CWrite
  8540                           
  8541                           ;accelerometer.c: 34: writeBuffer[0] = 0xB4;
  8542  0FA8  30B4               	movlw	180
  8543  0FA9  0021               	movlb	1	; select bank1
  8544  0FAA  00BB               	movwf	??_Acc_Initialize^(0+128)
  8545  0FAB  083B               	movf	??_Acc_Initialize^(0+128),w
  8546  0FAC  0022               	movlb	2	; select bank2
  8547  0FAD  00A7               	movwf	Acc_Initialize@writeBuffer^(0+256)
  8548                           
  8549                           ;accelerometer.c: 35: writeBuffer[1] = 0x04;
  8550  0FAE  3004               	movlw	4
  8551  0FAF  0021               	movlb	1	; select bank1
  8552  0FB0  00BB               	movwf	??_Acc_Initialize^(0+128)
  8553  0FB1  083B               	movf	??_Acc_Initialize^(0+128),w
  8554  0FB2  0022               	movlb	2	; select bank2
  8555  0FB3  00A8               	movwf	(Acc_Initialize@writeBuffer^(0+256)+1)
  8556                           
  8557                           ;accelerometer.c: 36: I2CWrite(writeBuffer, 2, 0b0011000);
  8558  0FB4  3027               	movlw	low Acc_Initialize@writeBuffer
  8559  0FB5  0021               	movlb	1	; select bank1
  8560  0FB6  00AF               	movwf	I2CWrite@pdata^(0+128)
  8561  0FB7  3001               	movlw	high Acc_Initialize@writeBuffer
  8562  0FB8  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  8563  0FB9  3002               	movlw	2
  8564  0FBA  00BB               	movwf	??_Acc_Initialize^(0+128)
  8565  0FBB  083B               	movf	??_Acc_Initialize^(0+128),w
  8566  0FBC  00B1               	movwf	I2CWrite@length^(0+128)
  8567  0FBD  3018               	movlw	24
  8568  0FBE  00B2               	movwf	I2CWrite@address^(0+128)
  8569  0FBF  3000               	movlw	0
  8570  0FC0  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  8571  0FC1  318B  234A  318F   	fcall	_I2CWrite
  8572                           
  8573                           ;accelerometer.c: 38: writeBuffer[0] = 0xB6;
  8574  0FC4  30B6               	movlw	182
  8575  0FC5  0021               	movlb	1	; select bank1
  8576  0FC6  00BB               	movwf	??_Acc_Initialize^(0+128)
  8577  0FC7  083B               	movf	??_Acc_Initialize^(0+128),w
  8578  0FC8  0022               	movlb	2	; select bank2
  8579  0FC9  00A7               	movwf	Acc_Initialize@writeBuffer^(0+256)
  8580                           
  8581                           ;accelerometer.c: 39: writeBuffer[1] = 0x1f;
  8582  0FCA  301F               	movlw	31
  8583  0FCB  0021               	movlb	1	; select bank1
  8584  0FCC  00BB               	movwf	??_Acc_Initialize^(0+128)
  8585  0FCD  083B               	movf	??_Acc_Initialize^(0+128),w
  8586  0FCE  0022               	movlb	2	; select bank2
  8587  0FCF  00A8               	movwf	(Acc_Initialize@writeBuffer^(0+256)+1)
  8588                           
  8589                           ;accelerometer.c: 40: writeBuffer[2] = 0x10;
  8590  0FD0  3010               	movlw	16
  8591  0FD1  0021               	movlb	1	; select bank1
  8592  0FD2  00BB               	movwf	??_Acc_Initialize^(0+128)
  8593  0FD3  083B               	movf	??_Acc_Initialize^(0+128),w
  8594  0FD4  0022               	movlb	2	; select bank2
  8595  0FD5  00A9               	movwf	(Acc_Initialize@writeBuffer^(0+256)+2)
  8596                           
  8597                           ;accelerometer.c: 41: writeBuffer[3] = 0x01;
  8598  0FD6  01AA               	clrf	(Acc_Initialize@writeBuffer^(0+256)+3)
  8599  0FD7  0AAA               	incf	(Acc_Initialize@writeBuffer^(0+256)+3),f
  8600                           
  8601                           ;accelerometer.c: 42: writeBuffer[4] = 0x10;
  8602  0FD8  3010               	movlw	16
  8603  0FD9  0021               	movlb	1	; select bank1
  8604  0FDA  00BB               	movwf	??_Acc_Initialize^(0+128)
  8605  0FDB  083B               	movf	??_Acc_Initialize^(0+128),w
  8606  0FDC  0022               	movlb	2	; select bank2
  8607  0FDD  00AB               	movwf	(Acc_Initialize@writeBuffer^(0+256)+4)
  8608                           
  8609                           ;accelerometer.c: 43: writeBuffer[5] = 0x40;
  8610  0FDE  3040               	movlw	64
  8611  0FDF  0021               	movlb	1	; select bank1
  8612  0FE0  00BB               	movwf	??_Acc_Initialize^(0+128)
  8613  0FE1  083B               	movf	??_Acc_Initialize^(0+128),w
  8614  0FE2  0022               	movlb	2	; select bank2
  8615  0FE3  00AC               	movwf	(Acc_Initialize@writeBuffer^(0+256)+5)
  8616                           
  8617                           ;accelerometer.c: 44: writeBuffer[6] = 0x05;
  8618  0FE4  3005               	movlw	5
  8619  0FE5  0021               	movlb	1	; select bank1
  8620  0FE6  00BB               	movwf	??_Acc_Initialize^(0+128)
  8621  0FE7  083B               	movf	??_Acc_Initialize^(0+128),w
  8622  0FE8  0022               	movlb	2	; select bank2
  8623  0FE9  00AD               	movwf	(Acc_Initialize@writeBuffer^(0+256)+6)
  8624                           
  8625                           ;accelerometer.c: 45: writeBuffer[7] = 0x10;
  8626  0FEA  3010               	movlw	16
  8627  0FEB  0021               	movlb	1	; select bank1
  8628  0FEC  00BB               	movwf	??_Acc_Initialize^(0+128)
  8629  0FED  083B               	movf	??_Acc_Initialize^(0+128),w
  8630  0FEE  0022               	movlb	2	; select bank2
  8631  0FEF  00AE               	movwf	(Acc_Initialize@writeBuffer^(0+256)+7)
  8632                           
  8633                           ;accelerometer.c: 46: I2CWrite(writeBuffer, 8, 0b0011000);
  8634  0FF0  3027               	movlw	low Acc_Initialize@writeBuffer
  8635  0FF1  0021               	movlb	1	; select bank1
  8636  0FF2  00AF               	movwf	I2CWrite@pdata^(0+128)
  8637  0FF3  3001               	movlw	high Acc_Initialize@writeBuffer
  8638  0FF4  00B0               	movwf	(I2CWrite@pdata+1)^(0+128)
  8639  0FF5  3008               	movlw	8
  8640  0FF6  00BB               	movwf	??_Acc_Initialize^(0+128)
  8641  0FF7  083B               	movf	??_Acc_Initialize^(0+128),w
  8642  0FF8  00B1               	movwf	I2CWrite@length^(0+128)
  8643  0FF9  3018               	movlw	24
  8644  0FFA  00B2               	movwf	I2CWrite@address^(0+128)
  8645  0FFB  3000               	movlw	0
  8646  0FFC  00B3               	movwf	(I2CWrite@address^(0+128)+1)
  8647  0FFD  318B  234A         	fcall	_I2CWrite
  8648  0FFF  0008               	return
  8649  1000                     __end_of_Acc_Initialize:	
  8650                           
  8651                           	psect	text19
  8652  0B4A                     __ptext19:	
  8653 ;; *************** function _I2CWrite *****************
  8654 ;; Defined at:
  8655 ;;		line 17 in file "lib.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  pdata           2   15[BANK1 ] PTR unsigned char 
  8658 ;;		 -> Acc_Initialize@writeBuffer(8), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5), LED_Initialize@write
      +Buffer(3), 
  8659 ;;		 -> LED_Row@writeBuffer(3), 
  8660 ;;  length          1   17[BANK1 ] unsigned char 
  8661 ;;  address         2   18[BANK1 ] unsigned int 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  i               2   22[BANK1 ] int 
  8664 ;;  status          1   24[BANK1 ] enum E12012
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      void 
  8667 ;; Registers used:
  8668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8674 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;Total ram usage:       10 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:   11
  8681 ;; This function calls:
  8682 ;;		_I2C_MasterWrite
  8683 ;; This function is called by:
  8684 ;;		_LED_Row
  8685 ;;		_LED_Initialize
  8686 ;;		_Clock_Initialize
  8687 ;;		_Clock_Write
  8688 ;;		_Acc_Initialize
  8689 ;; This function uses a non-reentrant model
  8690 ;;
  8691                           
  8692                           
  8693                           ;psect for function _I2CWrite
  8694  0B4A                     _I2CWrite:	
  8695                           
  8696                           ;lib.c: 21: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  8697                           
  8698                           ;incstack = 0
  8699                           ; Regs used in _I2CWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8700  0B4A  3002               	movlw	2
  8701  0B4B  0021               	movlb	1	; select bank1
  8702  0B4C  00B4               	movwf	??_I2CWrite^(0+128)
  8703  0B4D  0834               	movf	??_I2CWrite^(0+128),w
  8704  0B4E  00B8               	movwf	I2CWrite@status^(0+128)
  8705                           
  8706                           ;lib.c: 23: for(int i = 0; i==0; )
  8707  0B4F  01B6               	clrf	I2CWrite@i^(0+128)
  8708  0B50  01B7               	clrf	(I2CWrite@i+1)^(0+128)
  8709  0B51                     L11:	
  8710  0B51  0836               	movf	I2CWrite@i^(0+128),w
  8711  0B52  0437               	iorwf	(I2CWrite@i+1)^(0+128),w
  8712  0B53  1D03               	btfss	3,2
  8713  0B54  0008               	return
  8714                           
  8715                           ;lib.c: 24: {
  8716                           ;lib.c: 25: I2C_MasterWrite(pdata, length, address, &status);
  8717  0B55  0830               	movf	(I2CWrite@pdata+1)^(0+128),w
  8718  0B56  00A8               	movwf	(I2C_MasterWrite@pdata+1)^(0+128)
  8719  0B57  082F               	movf	I2CWrite@pdata^(0+128),w
  8720  0B58  00A7               	movwf	I2C_MasterWrite@pdata^(0+128)
  8721  0B59  0831               	movf	I2CWrite@length^(0+128),w
  8722  0B5A  00B4               	movwf	??_I2CWrite^(0+128)
  8723  0B5B  0834               	movf	??_I2CWrite^(0+128),w
  8724  0B5C  00A9               	movwf	I2C_MasterWrite@length^(0+128)
  8725  0B5D  0833               	movf	(I2CWrite@address+1)^(0+128),w
  8726  0B5E  00AB               	movwf	(I2C_MasterWrite@address+1)^(0+128)
  8727  0B5F  0832               	movf	I2CWrite@address^(0+128),w
  8728  0B60  00AA               	movwf	I2C_MasterWrite@address^(0+128)
  8729  0B61  30B8               	movlw	(low (I2CWrite@status| 0))& (0+255)
  8730  0B62  00B5               	movwf	(??_I2CWrite+1)^(0+128)
  8731  0B63  0835               	movf	(??_I2CWrite+1)^(0+128),w
  8732  0B64  00AC               	movwf	I2C_MasterWrite@pflag^(0+128)
  8733  0B65  318B  2371  318B   	fcall	_I2C_MasterWrite
  8734  0B68                     l6795:	
  8735                           ;lib.c: 26: while(status == I2C_MESSAGE_PENDING);
  8736                           
  8737  0B68  3002               	movlw	2
  8738  0B69  0021               	movlb	1	; select bank1
  8739  0B6A  0638               	xorwf	I2CWrite@status^(0+128),w
  8740  0B6B  1903               	btfsc	3,2
  8741  0B6C  2B68               	goto	l6795
  8742                           
  8743                           ;lib.c: 28: if (status == I2C_MESSAGE_COMPLETE)
  8744  0B6D  0838               	movf	I2CWrite@status^(0+128),w
  8745  0B6E  1903               	btfsc	3,2
  8746  0B6F  0008               	return
  8747  0B70  2B51               	goto	L11
  8748  0B71                     __end_of_I2CWrite:	
  8749                           ;lib.c: 29: break;
  8750                           
  8751                           
  8752                           	psect	text20
  8753  0B71                     __ptext20:	
  8754 ;; *************** function _I2C_MasterWrite *****************
  8755 ;; Defined at:
  8756 ;;		line 598 in file "mcc_generated_files/i2c.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;  pdata           2    7[BANK1 ] PTR unsigned char 
  8759 ;;		 -> Acc_Initialize@writeBuffer(8), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5), LED_Initialize@write
      +Buffer(3), 
  8760 ;;		 -> LED_Row@writeBuffer(3), 
  8761 ;;  length          1    9[BANK1 ] unsigned char 
  8762 ;;  address         2   10[BANK1 ] unsigned int 
  8763 ;;  pflag           1   12[BANK1 ] PTR enum E11987
  8764 ;;		 -> I2CWrite@status(1), 
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;		None
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  1    wreg      void 
  8769 ;; Registers used:
  8770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8776 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;Total ram usage:        8 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:   10
  8783 ;; This function calls:
  8784 ;;		_I2C_MasterTRBInsert
  8785 ;;		_I2C_MasterWriteTRBBuild
  8786 ;; This function is called by:
  8787 ;;		_I2CWrite
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           
  8792                           ;psect for function _I2C_MasterWrite
  8793  0B71                     _I2C_MasterWrite:	
  8794                           
  8795                           ;i2c.c: 604: static I2C_TRANSACTION_REQUEST_BLOCK trBlock;
  8796                           ;i2c.c: 607: if (i2c_object.trStatus.s.full != 1)
  8797                           
  8798                           ;incstack = 0
  8799                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8800  0B71  0020               	movlb	0	; select bank0
  8801  0B72  183E               	btfsc	_i2c_object+2,0
  8802  0B73  2B92               	goto	l6615
  8803                           
  8804                           ;i2c.c: 608: {
  8805                           ;i2c.c: 609: I2C_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  8806  0B74  0021               	movlb	1	; select bank1
  8807  0B75  0828               	movf	(I2C_MasterWrite@pdata+1)^(0+128),w
  8808  0B76  00A1               	movwf	(I2C_MasterWriteTRBBuild@pdata+1)^(0+128)
  8809  0B77  0827               	movf	I2C_MasterWrite@pdata^(0+128),w
  8810  0B78  00A0               	movwf	I2C_MasterWriteTRBBuild@pdata^(0+128)
  8811  0B79  0829               	movf	I2C_MasterWrite@length^(0+128),w
  8812  0B7A  00AD               	movwf	??_I2C_MasterWrite^(0+128)
  8813  0B7B  082D               	movf	??_I2C_MasterWrite^(0+128),w
  8814  0B7C  00A2               	movwf	I2C_MasterWriteTRBBuild@length^(0+128)
  8815  0B7D  082B               	movf	(I2C_MasterWrite@address+1)^(0+128),w
  8816  0B7E  00A4               	movwf	(I2C_MasterWriteTRBBuild@address+1)^(0+128)
  8817  0B7F  082A               	movf	I2C_MasterWrite@address^(0+128),w
  8818  0B80  00A3               	movwf	I2C_MasterWriteTRBBuild@address^(0+128)
  8819  0B81  30D4               	movlw	(low (I2C_MasterWrite@trBlock| 0))& (0+255)
  8820  0B82  318B  2323  318B   	fcall	_I2C_MasterWriteTRBBuild
  8821                           
  8822                           ;i2c.c: 610: I2C_MasterTRBInsert(1, &trBlock, pflag);
  8823  0B85  30D4               	movlw	(low (I2C_MasterWrite@trBlock| 0))& (0+255)
  8824  0B86  0021               	movlb	1	; select bank1
  8825  0B87  00AD               	movwf	??_I2C_MasterWrite^(0+128)
  8826  0B88  082D               	movf	??_I2C_MasterWrite^(0+128),w
  8827  0B89  00A0               	movwf	I2C_MasterTRBInsert@ptrb_list^(0+128)
  8828  0B8A  082C               	movf	I2C_MasterWrite@pflag^(0+128),w
  8829  0B8B  00AE               	movwf	(??_I2C_MasterWrite+1)^(0+128)
  8830  0B8C  082E               	movf	(??_I2C_MasterWrite+1)^(0+128),w
  8831  0B8D  00A1               	movwf	I2C_MasterTRBInsert@pflag^(0+128)
  8832  0B8E  3001               	movlw	1
  8833  0B8F  318D  2559         	fcall	_I2C_MasterTRBInsert
  8834                           
  8835                           ;i2c.c: 611: }
  8836  0B91  0008               	return
  8837  0B92                     l6615:	
  8838                           
  8839                           ;i2c.c: 612: else
  8840                           ;i2c.c: 613: {
  8841                           ;i2c.c: 614: *pflag = I2C_MESSAGE_FAIL;
  8842  0B92  0021               	movlb	1	; select bank1
  8843  0B93  082C               	movf	I2C_MasterWrite@pflag^(0+128),w
  8844  0B94  0086               	movwf	6
  8845  0B95  0187               	clrf	7
  8846  0B96  0181               	clrf	1
  8847  0B97  0A81               	incf	1,f
  8848  0B98  0008               	return
  8849  0B99                     __end_of_I2C_MasterWrite:	
  8850                           
  8851                           	psect	text21
  8852  0CD2                     __ptext21:	
  8853 ;; *************** function _I2CRead *****************
  8854 ;; Defined at:
  8855 ;;		line 35 in file "lib.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;  pdata           2    7[BANK1 ] PTR unsigned char 
  8858 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
  8859 ;;  registerAddr    1    9[BANK1 ] unsigned char 
  8860 ;;  length          1   10[BANK1 ] unsigned char 
  8861 ;;  address         2   11[BANK1 ] unsigned int 
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;  readTRB        10   16[BANK1 ] struct .[2]
  8864 ;;  status          1   26[BANK1 ] enum E12012
  8865 ;;  readBuffer      1   15[BANK1 ] unsigned char [1]
  8866 ;; Return value:  Size  Location     Type
  8867 ;;                  1    wreg      void 
  8868 ;; Registers used:
  8869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8870 ;; Tracked objects:
  8871 ;;		On entry : 0/0
  8872 ;;		On exit  : 0/0
  8873 ;;		Unchanged: 0/0
  8874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8875 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;Total ram usage:       20 bytes
  8880 ;; Hardware stack levels used:    1
  8881 ;; Hardware stack levels required when called:   10
  8882 ;; This function calls:
  8883 ;;		_I2C_MasterReadTRBBuild
  8884 ;;		_I2C_MasterTRBInsert
  8885 ;;		_I2C_MasterWriteTRBBuild
  8886 ;; This function is called by:
  8887 ;;		_Clock_Read
  8888 ;;		_Acc_Initialize
  8889 ;;		_Acc_ProcessClickSrc
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           
  8894                           ;psect for function _I2CRead
  8895  0CD2                     _I2CRead:	
  8896                           
  8897                           ;lib.c: 40: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in _I2CRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8901  0CD2  3002               	movlw	2
  8902  0CD3  0021               	movlb	1	; select bank1
  8903  0CD4  00AD               	movwf	??_I2CRead^(0+128)
  8904  0CD5  082D               	movf	??_I2CRead^(0+128),w
  8905  0CD6  00BA               	movwf	I2CRead@status^(0+128)
  8906                           
  8907                           ;lib.c: 41: I2C_TRANSACTION_REQUEST_BLOCK readTRB[2];
  8908                           ;lib.c: 42: uint8_t readBuffer[1];
  8909                           ;lib.c: 44: readBuffer[0] = registerAddress;
  8910  0CD7  0829               	movf	I2CRead@registerAddress^(0+128),w
  8911  0CD8  00AD               	movwf	??_I2CRead^(0+128)
  8912  0CD9  082D               	movf	??_I2CRead^(0+128),w
  8913  0CDA  00AF               	movwf	I2CRead@readBuffer^(0+128)
  8914                           
  8915                           ;lib.c: 46: I2C_MasterWriteTRBBuild( &readTRB[0],
  8916                           ;lib.c: 47: readBuffer,
  8917                           ;lib.c: 48: 1,
  8918                           ;lib.c: 49: address);
  8919  0CDB  30AF               	movlw	low I2CRead@readBuffer
  8920  0CDC  00A0               	movwf	I2C_MasterWriteTRBBuild@pdata^(0+128)
  8921  0CDD  3000               	movlw	high I2CRead@readBuffer
  8922  0CDE  00A1               	movwf	(I2C_MasterWriteTRBBuild@pdata+1)^(0+128)
  8923  0CDF  01A2               	clrf	I2C_MasterWriteTRBBuild@length^(0+128)
  8924  0CE0  0AA2               	incf	I2C_MasterWriteTRBBuild@length^(0+128),f
  8925  0CE1  082C               	movf	(I2CRead@address+1)^(0+128),w
  8926  0CE2  00A4               	movwf	(I2C_MasterWriteTRBBuild@address+1)^(0+128)
  8927  0CE3  082B               	movf	I2CRead@address^(0+128),w
  8928  0CE4  00A3               	movwf	I2C_MasterWriteTRBBuild@address^(0+128)
  8929  0CE5  30B0               	movlw	(low (I2CRead@readTRB| 0))& (0+255)
  8930  0CE6  318B  2323  318C   	fcall	_I2C_MasterWriteTRBBuild
  8931                           
  8932                           ;lib.c: 51: I2C_MasterReadTRBBuild( &readTRB[1],
  8933                           ;lib.c: 52: pdata,
  8934                           ;lib.c: 53: 2,
  8935                           ;lib.c: 54: address);
  8936  0CE9  0021               	movlb	1	; select bank1
  8937  0CEA  0828               	movf	(I2CRead@pdata+1)^(0+128),w
  8938  0CEB  00A1               	movwf	(I2C_MasterReadTRBBuild@pdata+1)^(0+128)
  8939  0CEC  0827               	movf	I2CRead@pdata^(0+128),w
  8940  0CED  00A0               	movwf	I2C_MasterReadTRBBuild@pdata^(0+128)
  8941  0CEE  3002               	movlw	2
  8942  0CEF  00AD               	movwf	??_I2CRead^(0+128)
  8943  0CF0  082D               	movf	??_I2CRead^(0+128),w
  8944  0CF1  00A2               	movwf	I2C_MasterReadTRBBuild@length^(0+128)
  8945  0CF2  082C               	movf	(I2CRead@address+1)^(0+128),w
  8946  0CF3  00A4               	movwf	(I2C_MasterReadTRBBuild@address+1)^(0+128)
  8947  0CF4  082B               	movf	I2CRead@address^(0+128),w
  8948  0CF5  00A3               	movwf	I2C_MasterReadTRBBuild@address^(0+128)
  8949  0CF6  30B5               	movlw	(low ((I2CRead@readTRB| 0+5)))& (0+255)
  8950  0CF7  318C  241E  318C   	fcall	_I2C_MasterReadTRBBuild
  8951  0CFA                     l6645:	
  8952                           ;lib.c: 56: while(status != I2C_MESSAGE_FAIL)
  8953                           
  8954  0CFA  0021               	movlb	1	; select bank1
  8955  0CFB  033A               	decf	I2CRead@status^(0+128),w
  8956  0CFC  1903               	btfsc	3,2
  8957  0CFD  0008               	return
  8958                           
  8959                           ;lib.c: 57: {
  8960                           ;lib.c: 58: I2C_MasterTRBInsert(2, readTRB, &status);
  8961  0CFE  30B0               	movlw	(low (I2CRead@readTRB| 0))& (0+255)
  8962  0CFF  0021               	movlb	1	; select bank1
  8963  0D00  00AD               	movwf	??_I2CRead^(0+128)
  8964  0D01  082D               	movf	??_I2CRead^(0+128),w
  8965  0D02  00A0               	movwf	I2C_MasterTRBInsert@ptrb_list^(0+128)
  8966  0D03  30BA               	movlw	(low (I2CRead@status| 0))& (0+255)
  8967  0D04  00AE               	movwf	(??_I2CRead+1)^(0+128)
  8968  0D05  082E               	movf	(??_I2CRead+1)^(0+128),w
  8969  0D06  00A1               	movwf	I2C_MasterTRBInsert@pflag^(0+128)
  8970  0D07  3002               	movlw	2
  8971  0D08  318D  2559  318C   	fcall	_I2C_MasterTRBInsert
  8972  0D0B                     l6639:	
  8973                           ;lib.c: 61: while(status == I2C_MESSAGE_PENDING);
  8974                           
  8975  0D0B  3002               	movlw	2
  8976  0D0C  0021               	movlb	1	; select bank1
  8977  0D0D  063A               	xorwf	I2CRead@status^(0+128),w
  8978  0D0E  1903               	btfsc	3,2
  8979  0D0F  2D0B               	goto	l6639
  8980                           
  8981                           ;lib.c: 63: if (status == I2C_MESSAGE_COMPLETE)
  8982  0D10  083A               	movf	I2CRead@status^(0+128),w
  8983  0D11  1903               	btfsc	3,2
  8984  0D12  0008               	return
  8985  0D13  2CFA               	goto	l6645
  8986  0D14                     __end_of_I2CRead:	
  8987                           ;lib.c: 64: break;
  8988                           
  8989                           
  8990                           	psect	text22
  8991  0B23                     __ptext22:	
  8992 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  8993 ;; Defined at:
  8994 ;;		line 707 in file "mcc_generated_files/i2c.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  ptrb            1    wreg     PTR struct .
  8997 ;;		 -> I2CRead@readTRB(10), I2C_MasterWrite@trBlock(5), 
  8998 ;;  pdata           2    0[BANK1 ] PTR unsigned char 
  8999 ;;		 -> Acc_Initialize@writeBuffer(8), I2CRead@readBuffer(1), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5
      +), 
  9000 ;;		 -> LED_Initialize@writeBuffer(3), LED_Row@writeBuffer(3), 
  9001 ;;  length          1    2[BANK1 ] unsigned char 
  9002 ;;  address         2    3[BANK1 ] unsigned int 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  ptrb            1   27[BANK0 ] PTR struct .
  9005 ;;		 -> I2CRead@readTRB(10), I2C_MasterWrite@trBlock(5), 
  9006 ;; Return value:  Size  Location     Type
  9007 ;;                  1    wreg      void 
  9008 ;; Registers used:
  9009 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9015 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;Total ram usage:        8 bytes
  9020 ;; Hardware stack levels used:    1
  9021 ;; Hardware stack levels required when called:    9
  9022 ;; This function calls:
  9023 ;;		Nothing
  9024 ;; This function is called by:
  9025 ;;		_I2C_MasterWrite
  9026 ;;		_I2CRead
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           
  9031                           ;psect for function _I2C_MasterWriteTRBBuild
  9032  0B23                     _I2C_MasterWriteTRBBuild:	
  9033                           
  9034                           ;incstack = 0
  9035                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9036                           ;I2C_MasterWriteTRBBuild@ptrb stored from wreg
  9037  0B23  0020               	movlb	0	; select bank0
  9038  0B24  00BB               	movwf	I2C_MasterWriteTRBBuild@ptrb
  9039                           
  9040                           ;i2c.c: 713: ptrb->address = address << 1;
  9041  0B25  0021               	movlb	1	; select bank1
  9042  0B26  0824               	movf	(I2C_MasterWriteTRBBuild@address+1)^(0+128),w
  9043  0B27  00A6               	movwf	(??_I2C_MasterWriteTRBBuild^(0+128)+1)
  9044  0B28  0823               	movf	I2C_MasterWriteTRBBuild@address^(0+128),w
  9045  0B29  00A5               	movwf	??_I2C_MasterWriteTRBBuild^(0+128)
  9046  0B2A  35A5               	lslf	??_I2C_MasterWriteTRBBuild^(0+128),f
  9047  0B2B  0DA6               	rlf	(??_I2C_MasterWriteTRBBuild^(0+128)+1),f
  9048  0B2C  0020               	movlb	0	; select bank0
  9049  0B2D  083B               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  9050  0B2E  0086               	movwf	6
  9051  0B2F  0187               	clrf	7
  9052  0B30  0021               	movlb	1	; select bank1
  9053  0B31  0825               	movf	??_I2C_MasterWriteTRBBuild^(0+128),w
  9054  0B32  3FC0               	movwi [0]fsr1
  9055  0B33  0826               	movf	(??_I2C_MasterWriteTRBBuild+1)^(0+128),w
  9056  0B34  3FC1               	movwi [1]fsr1
  9057                           
  9058                           ;i2c.c: 714: ptrb->length = length;
  9059  0B35  0822               	movf	I2C_MasterWriteTRBBuild@length^(0+128),w
  9060  0B36  00A5               	movwf	??_I2C_MasterWriteTRBBuild^(0+128)
  9061  0B37  0020               	movlb	0	; select bank0
  9062  0B38  083B               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  9063  0B39  3E02               	addlw	2
  9064  0B3A  0086               	movwf	6
  9065  0B3B  0187               	clrf	7
  9066  0B3C  0021               	movlb	1	; select bank1
  9067  0B3D  0825               	movf	??_I2C_MasterWriteTRBBuild^(0+128),w
  9068  0B3E  0081               	movwf	1
  9069                           
  9070                           ;i2c.c: 715: ptrb->pbuffer = pdata;
  9071  0B3F  0020               	movlb	0	; select bank0
  9072  0B40  083B               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  9073  0B41  3E03               	addlw	3
  9074  0B42  0086               	movwf	6
  9075  0B43  0187               	clrf	7
  9076  0B44  0021               	movlb	1	; select bank1
  9077  0B45  0820               	movf	I2C_MasterWriteTRBBuild@pdata^(0+128),w
  9078  0B46  3FC0               	movwi [0]fsr1
  9079  0B47  0821               	movf	(I2C_MasterWriteTRBBuild@pdata+1)^(0+128),w
  9080  0B48  3FC1               	movwi [1]fsr1
  9081  0B49  0008               	return
  9082  0B4A                     __end_of_I2C_MasterWriteTRBBuild:	
  9083                           
  9084                           	psect	text23
  9085  0D59                     __ptext23:	
  9086 ;; *************** function _I2C_MasterTRBInsert *****************
  9087 ;; Defined at:
  9088 ;;		line 641 in file "mcc_generated_files/i2c.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;  count           1    wreg     unsigned char 
  9091 ;;  ptrb_list       1    0[BANK1 ] PTR struct .
  9092 ;;		 -> I2CRead@readTRB(10), I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
  9093 ;;  pflag           1    1[BANK1 ] PTR enum E11987
  9094 ;;		 -> I2CRead@status(1), I2CWrite@status(1), 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  count           1    2[BANK1 ] unsigned char 
  9097 ;; Return value:  Size  Location     Type
  9098 ;;                  1    wreg      void 
  9099 ;; Registers used:
  9100 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9101 ;; Tracked objects:
  9102 ;;		On entry : 0/0
  9103 ;;		On exit  : 0/0
  9104 ;;		Unchanged: 0/0
  9105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9106 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;Total ram usage:        4 bytes
  9111 ;; Hardware stack levels used:    1
  9112 ;; Hardware stack levels required when called:    9
  9113 ;; This function calls:
  9114 ;;		Nothing
  9115 ;; This function is called by:
  9116 ;;		_I2C_MasterWrite
  9117 ;;		_I2CRead
  9118 ;;		_I2C_MasterRead
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           
  9123                           ;psect for function _I2C_MasterTRBInsert
  9124  0D59                     _I2C_MasterTRBInsert:	
  9125                           
  9126                           ;incstack = 0
  9127                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9128                           ;I2C_MasterTRBInsert@count stored from wreg
  9129  0D59  0021               	movlb	1	; select bank1
  9130  0D5A  00A2               	movwf	I2C_MasterTRBInsert@count^(0+128)
  9131                           
  9132                           ;i2c.c: 648: if (i2c_object.trStatus.s.full != 1)
  9133  0D5B  0020               	movlb	0	; select bank0
  9134  0D5C  183E               	btfsc	_i2c_object+2,0
  9135  0D5D  2D96               	goto	l6581
  9136                           
  9137                           ;i2c.c: 649: {
  9138                           ;i2c.c: 650: *pflag = I2C_MESSAGE_PENDING;
  9139  0D5E  3002               	movlw	2
  9140  0D5F  00BB               	movwf	??_I2C_MasterTRBInsert
  9141  0D60  0021               	movlb	1	; select bank1
  9142  0D61  0821               	movf	I2C_MasterTRBInsert@pflag^(0+128),w
  9143  0D62  0086               	movwf	6
  9144  0D63  0187               	clrf	7
  9145  0D64  0020               	movlb	0	; select bank0
  9146  0D65  083B               	movf	??_I2C_MasterTRBInsert,w
  9147  0D66  0081               	movwf	1
  9148                           
  9149                           ;i2c.c: 652: i2c_object.pTrTail->ptrb_list = ptrb_list;
  9150  0D67  0021               	movlb	1	; select bank1
  9151  0D68  0820               	movf	I2C_MasterTRBInsert@ptrb_list^(0+128),w
  9152  0D69  0020               	movlb	0	; select bank0
  9153  0D6A  00BB               	movwf	??_I2C_MasterTRBInsert
  9154  0D6B  0A3C               	incf	_i2c_object,w
  9155  0D6C  0086               	movwf	6
  9156  0D6D  0187               	clrf	7
  9157  0D6E  083B               	movf	??_I2C_MasterTRBInsert,w
  9158  0D6F  0081               	movwf	1
  9159                           
  9160                           ;i2c.c: 653: i2c_object.pTrTail->count = count;
  9161  0D70  0021               	movlb	1	; select bank1
  9162  0D71  0822               	movf	I2C_MasterTRBInsert@count^(0+128),w
  9163  0D72  0020               	movlb	0	; select bank0
  9164  0D73  00BB               	movwf	??_I2C_MasterTRBInsert
  9165  0D74  083C               	movf	_i2c_object,w
  9166  0D75  0086               	movwf	6
  9167  0D76  0187               	clrf	7
  9168  0D77  083B               	movf	??_I2C_MasterTRBInsert,w
  9169  0D78  0081               	movwf	1
  9170                           
  9171                           ;i2c.c: 654: i2c_object.pTrTail->pTrFlag = pflag;
  9172  0D79  083C               	movf	_i2c_object,w
  9173  0D7A  3E02               	addlw	2
  9174  0D7B  0086               	movwf	6
  9175  0D7C  0187               	clrf	7
  9176  0D7D  0021               	movlb	1	; select bank1
  9177  0D7E  0821               	movf	I2C_MasterTRBInsert@pflag^(0+128),w
  9178  0D7F  3FC0               	movwi [0]fsr1
  9179  0D80  3000               	movlw	0
  9180  0D81  3FC1               	movwi [1]fsr1
  9181                           
  9182                           ;i2c.c: 655: i2c_object.pTrTail++;
  9183  0D82  3004               	movlw	4
  9184  0D83  0020               	movlb	0	; select bank0
  9185  0D84  00BB               	movwf	??_I2C_MasterTRBInsert
  9186  0D85  083B               	movf	??_I2C_MasterTRBInsert,w
  9187  0D86  07BC               	addwf	_i2c_object,f
  9188                           
  9189                           ;i2c.c: 658: if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  9190  0D87  083C               	movf	_i2c_object,w
  9191  0D88  3ADD               	xorlw	(low ((_i2c_tr_queue| 0+4)))& (0+255)
  9192  0D89  1D03               	skipz
  9193  0D8A  2D8F               	goto	l6577
  9194                           
  9195                           ;i2c.c: 659: {
  9196                           ;i2c.c: 661: i2c_object.pTrTail = i2c_tr_queue;
  9197  0D8B  30D9               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  9198  0D8C  00BB               	movwf	??_I2C_MasterTRBInsert
  9199  0D8D  083B               	movf	??_I2C_MasterTRBInsert,w
  9200  0D8E  00BC               	movwf	_i2c_object
  9201  0D8F                     l6577:	
  9202                           
  9203                           ;i2c.c: 662: }
  9204                           ;i2c.c: 666: i2c_object.trStatus.s.empty = 0;
  9205  0D8F  10BE               	bcf	_i2c_object+2,1
  9206                           
  9207                           ;i2c.c: 669: if (i2c_object.pTrHead == i2c_object.pTrTail)
  9208  0D90  083D               	movf	low ((_i2c_object| 0+1)),w
  9209  0D91  063C               	xorwf	_i2c_object,w
  9210  0D92  1D03               	skipz
  9211  0D93  2D9C               	goto	l6583
  9212                           
  9213                           ;i2c.c: 670: {
  9214                           ;i2c.c: 672: i2c_object.trStatus.s.full = 1;
  9215  0D94  143E               	bsf	_i2c_object+2,0
  9216                           
  9217                           ;i2c.c: 673: }
  9218                           ;i2c.c: 675: }
  9219  0D95  2D9C               	goto	l6583
  9220  0D96                     l6581:	
  9221                           
  9222                           ;i2c.c: 676: else
  9223                           ;i2c.c: 677: {
  9224                           ;i2c.c: 678: *pflag = I2C_MESSAGE_FAIL;
  9225  0D96  0021               	movlb	1	; select bank1
  9226  0D97  0821               	movf	I2C_MasterTRBInsert@pflag^(0+128),w
  9227  0D98  0086               	movwf	6
  9228  0D99  0187               	clrf	7
  9229  0D9A  0181               	clrf	1
  9230  0D9B  0A81               	incf	1,f
  9231  0D9C                     l6583:	
  9232                           
  9233                           ;i2c.c: 679: }
  9234                           ;i2c.c: 682: if (*pflag == I2C_MESSAGE_PENDING)
  9235  0D9C  0021               	movlb	1	; select bank1
  9236  0D9D  0821               	movf	I2C_MasterTRBInsert@pflag^(0+128),w
  9237  0D9E  0086               	movwf	6
  9238  0D9F  0187               	clrf	7
  9239  0DA0  3002               	movlw	2
  9240  0DA1  0601               	xorwf	1,w
  9241  0DA2  1D03               	btfss	3,2
  9242  0DA3  0008               	return
  9243  0DA4                     l6587:	
  9244                           ;i2c.c: 683: {
  9245                           ;i2c.c: 684: while(i2c_state != S_MASTER_IDLE);
  9246                           
  9247  0DA4  0020               	movlb	0	; select bank0
  9248  0DA5  084F               	movf	_i2c_state,w
  9249  0DA6  1D03               	btfss	3,2
  9250  0DA7  2DA4               	goto	l6587
  9251                           
  9252                           ;i2c.c: 685: {
  9253                           ;i2c.c: 688: PIR1bits.SSP1IF = 1;
  9254  0DA8  1590               	bsf	16,3	;volatile
  9255  0DA9  0008               	return
  9256  0DAA                     __end_of_I2C_MasterTRBInsert:	
  9257                           
  9258                           	psect	text24
  9259  0C1E                     __ptext24:	
  9260 ;; *************** function _I2C_MasterReadTRBBuild *****************
  9261 ;; Defined at:
  9262 ;;		line 694 in file "mcc_generated_files/i2c.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  ptrb            1    wreg     PTR struct .
  9265 ;;		 -> I2CRead@readTRB(10), I2C_MasterRead@trBlock(5), 
  9266 ;;  pdata           2    0[BANK1 ] PTR unsigned char 
  9267 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
  9268 ;;  length          1    2[BANK1 ] unsigned char 
  9269 ;;  address         2    3[BANK1 ] unsigned int 
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;  ptrb            1   27[BANK0 ] PTR struct .
  9272 ;;		 -> I2CRead@readTRB(10), I2C_MasterRead@trBlock(5), 
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  1    wreg      void 
  9275 ;; Registers used:
  9276 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9282 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;Total ram usage:        8 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    9
  9289 ;; This function calls:
  9290 ;;		Nothing
  9291 ;; This function is called by:
  9292 ;;		_I2CRead
  9293 ;;		_I2C_MasterRead
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           
  9298                           ;psect for function _I2C_MasterReadTRBBuild
  9299  0C1E                     _I2C_MasterReadTRBBuild:	
  9300                           
  9301                           ;incstack = 0
  9302                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9303                           ;I2C_MasterReadTRBBuild@ptrb stored from wreg
  9304  0C1E  0020               	movlb	0	; select bank0
  9305  0C1F  00BB               	movwf	I2C_MasterReadTRBBuild@ptrb
  9306                           
  9307                           ;i2c.c: 700: ptrb->address = address << 1;
  9308  0C20  0021               	movlb	1	; select bank1
  9309  0C21  0824               	movf	(I2C_MasterReadTRBBuild@address+1)^(0+128),w
  9310  0C22  00A6               	movwf	(??_I2C_MasterReadTRBBuild^(0+128)+1)
  9311  0C23  0823               	movf	I2C_MasterReadTRBBuild@address^(0+128),w
  9312  0C24  00A5               	movwf	??_I2C_MasterReadTRBBuild^(0+128)
  9313  0C25  35A5               	lslf	??_I2C_MasterReadTRBBuild^(0+128),f
  9314  0C26  0DA6               	rlf	(??_I2C_MasterReadTRBBuild^(0+128)+1),f
  9315  0C27  0020               	movlb	0	; select bank0
  9316  0C28  083B               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9317  0C29  0086               	movwf	6
  9318  0C2A  0187               	clrf	7
  9319  0C2B  0021               	movlb	1	; select bank1
  9320  0C2C  0825               	movf	??_I2C_MasterReadTRBBuild^(0+128),w
  9321  0C2D  3FC0               	movwi [0]fsr1
  9322  0C2E  0826               	movf	(??_I2C_MasterReadTRBBuild+1)^(0+128),w
  9323  0C2F  3FC1               	movwi [1]fsr1
  9324                           
  9325                           ;i2c.c: 702: ptrb->address |= 0x01;
  9326  0C30  0020               	movlb	0	; select bank0
  9327  0C31  083B               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9328  0C32  0086               	movwf	6
  9329  0C33  0187               	clrf	7
  9330  0C34  3001               	movlw	1
  9331  0C35  0481               	iorwf	1,f
  9332  0C36  3141               	addfsr 1,1
  9333  0C37  3000               	movlw	0
  9334  0C38  0481               	iorwf	1,f
  9335                           
  9336                           ;i2c.c: 703: ptrb->length = length;
  9337  0C39  0021               	movlb	1	; select bank1
  9338  0C3A  0822               	movf	I2C_MasterReadTRBBuild@length^(0+128),w
  9339  0C3B  00A5               	movwf	??_I2C_MasterReadTRBBuild^(0+128)
  9340  0C3C  0020               	movlb	0	; select bank0
  9341  0C3D  083B               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9342  0C3E  3E02               	addlw	2
  9343  0C3F  0086               	movwf	6
  9344  0C40  0187               	clrf	7
  9345  0C41  0021               	movlb	1	; select bank1
  9346  0C42  0825               	movf	??_I2C_MasterReadTRBBuild^(0+128),w
  9347  0C43  0081               	movwf	1
  9348                           
  9349                           ;i2c.c: 704: ptrb->pbuffer = pdata;
  9350  0C44  0020               	movlb	0	; select bank0
  9351  0C45  083B               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9352  0C46  3E03               	addlw	3
  9353  0C47  0086               	movwf	6
  9354  0C48  0187               	clrf	7
  9355  0C49  0021               	movlb	1	; select bank1
  9356  0C4A  0820               	movf	I2C_MasterReadTRBBuild@pdata^(0+128),w
  9357  0C4B  3FC0               	movwi [0]fsr1
  9358  0C4C  0821               	movf	(I2C_MasterReadTRBBuild@pdata+1)^(0+128),w
  9359  0C4D  3FC1               	movwi [1]fsr1
  9360  0C4E  0008               	return
  9361  0C4F                     __end_of_I2C_MasterReadTRBBuild:	
  9362                           
  9363                           	psect	intentry
  9364  0004                     __pintentry:	
  9365 ;; *************** function _INTERRUPT_InterruptManager *****************
  9366 ;; Defined at:
  9367 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;		None
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;		None
  9372 ;; Return value:  Size  Location     Type
  9373 ;;                  1    wreg      void 
  9374 ;; Registers used:
  9375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;Total ram usage:        1 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    8
  9388 ;; This function calls:
  9389 ;;		_I2C_BusCollisionISR
  9390 ;;		_I2C_ISR
  9391 ;;		_PIN_MANAGER_IOC
  9392 ;;		_TMR1_ISR
  9393 ;; This function is called by:
  9394 ;;		Interrupt level 1
  9395 ;; This function uses a non-reentrant model
  9396 ;;
  9397                           
  9398  0004                     _INTERRUPT_InterruptManager:	
  9399                           
  9400                           ;incstack = 0
  9401  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9402                           
  9403                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9404  0005  3180               	pagesel	$
  9405  0006  0020               	movlb	0	; select bank0
  9406  0007  087F               	movf	127,w
  9407  0008  00BA               	movwf	??_INTERRUPT_InterruptManager
  9408                           
  9409                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  9410  0009  198B               	btfsc	11,3	;volatile
  9411  000A  1C0B               	btfss	11,0	;volatile
  9412  000B  2810               	goto	i1l291
  9413                           
  9414                           ;interrupt_manager.c: 55: {
  9415                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
  9416  000C  3189  2159  3180   	fcall	_PIN_MANAGER_IOC
  9417                           
  9418                           ;interrupt_manager.c: 57: }
  9419  000F  2832               	goto	i1l299
  9420  0010                     i1l291:	
  9421                           
  9422                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
  9423  0010  1F0B               	btfss	11,6	;volatile
  9424  0011  281C               	goto	i1l293
  9425  0012  0021               	movlb	1	; select bank1
  9426  0013  1D91               	btfss	17,3	;volatile
  9427  0014  281C               	goto	i1l293
  9428  0015  0020               	movlb	0	; select bank0
  9429  0016  1D91               	btfss	17,3	;volatile
  9430  0017  281C               	goto	i1l293
  9431                           
  9432                           ;interrupt_manager.c: 59: {
  9433                           ;interrupt_manager.c: 60: I2C_BusCollisionISR();
  9434  0018  3189  2119  3180   	fcall	_I2C_BusCollisionISR
  9435                           
  9436                           ;interrupt_manager.c: 61: }
  9437  001B  2832               	goto	i1l299
  9438  001C                     i1l293:	
  9439                           
  9440                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9441  001C  1F0B               	btfss	11,6	;volatile
  9442  001D  2828               	goto	i1l295
  9443  001E  0021               	movlb	1	; select bank1
  9444  001F  1D90               	btfss	16,3	;volatile
  9445  0020  2828               	goto	i1l295
  9446  0021  0020               	movlb	0	; select bank0
  9447  0022  1D90               	btfss	16,3	;volatile
  9448  0023  2828               	goto	i1l295
  9449                           
  9450                           ;interrupt_manager.c: 63: {
  9451                           ;interrupt_manager.c: 64: I2C_ISR();
  9452  0024  3185  25D9  3180   	fcall	_I2C_ISR
  9453                           
  9454                           ;interrupt_manager.c: 65: }
  9455  0027  2832               	goto	i1l299
  9456  0028                     i1l295:	
  9457                           
  9458                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  9459  0028  1F0B               	btfss	11,6	;volatile
  9460  0029  2832               	goto	i1l299
  9461  002A  0021               	movlb	1	; select bank1
  9462  002B  1C10               	btfss	16,0	;volatile
  9463  002C  2832               	goto	i1l299
  9464  002D  0020               	movlb	0	; select bank0
  9465  002E  1C10               	btfss	16,0	;volatile
  9466  002F  2832               	goto	i1l299
  9467                           
  9468                           ;interrupt_manager.c: 67: {
  9469                           ;interrupt_manager.c: 68: TMR1_ISR();
  9470  0030  3189  21C9         	fcall	_TMR1_ISR
  9471  0032                     i1l299:	
  9472                           ;interrupt_manager.c: 70: else
  9473                           ;interrupt_manager.c: 71: {
  9474                           
  9475                           ;interrupt_manager.c: 69: }
  9476                           
  9477  0032  0020               	movlb	0	; select bank0
  9478  0033  083A               	movf	??_INTERRUPT_InterruptManager,w
  9479  0034  00FF               	movwf	127
  9480  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9481  0036  0009               	retfie
  9482  0037                     __end_of_INTERRUPT_InterruptManager:	
  9483                           
  9484                           	psect	text26
  9485  09C9                     __ptext26:	
  9486 ;; *************** function _TMR1_ISR *****************
  9487 ;; Defined at:
  9488 ;;		line 155 in file "mcc_generated_files/tmr1.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;		None
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;		None
  9493 ;; Return value:  Size  Location     Type
  9494 ;;                  1    wreg      void 
  9495 ;; Registers used:
  9496 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;Total ram usage:        0 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    3
  9509 ;; This function calls:
  9510 ;;		_TMR1_CallBack
  9511 ;; This function is called by:
  9512 ;;		_INTERRUPT_InterruptManager
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           
  9517                           ;psect for function _TMR1_ISR
  9518  09C9                     _TMR1_ISR:	
  9519                           
  9520                           ;tmr1.c: 157: static volatile unsigned int CountCallBack = 0;
  9521                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
  9522                           
  9523                           ;incstack = 0
  9524                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9525  09C9  0020               	movlb	0	; select bank0
  9526  09CA  1010               	bcf	16,0	;volatile
  9527                           
  9528                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
  9529  09CB  0842               	movf	_timer1ReloadVal+1,w	;volatile
  9530  09CC  0097               	movwf	23	;volatile
  9531                           
  9532                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
  9533  09CD  0841               	movf	_timer1ReloadVal,w	;volatile
  9534  09CE  0096               	movwf	22	;volatile
  9535                           
  9536                           ;tmr1.c: 166: if (++CountCallBack >= 1)
  9537  09CF  3001               	movlw	1
  9538  09D0  0021               	movlb	1	; select bank1
  9539  09D1  07C4               	addwf	TMR1_ISR@CountCallBack^(0+128),f	;volatile
  9540  09D2  3000               	movlw	0
  9541  09D3  3DC5               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+128),f	;volatile
  9542  09D4  0844               	movf	TMR1_ISR@CountCallBack^(0+128),w	;volatile
  9543  09D5  0445               	iorwf	(TMR1_ISR@CountCallBack+1)^(0+128),w	;volatile
  9544  09D6  1903               	btfsc	3,2
  9545  09D7  0008               	return
  9546                           
  9547                           ;tmr1.c: 167: {
  9548                           ;tmr1.c: 169: TMR1_CallBack();
  9549  09D8  3189  214E         	fcall	_TMR1_CallBack
  9550                           
  9551                           ;tmr1.c: 172: CountCallBack = 0;
  9552  09DA  0021               	movlb	1	; select bank1
  9553  09DB  01C4               	clrf	TMR1_ISR@CountCallBack^(0+128)	;volatile
  9554  09DC  01C5               	clrf	(TMR1_ISR@CountCallBack+1)^(0+128)	;volatile
  9555  09DD  0008               	return
  9556  09DE                     __end_of_TMR1_ISR:	
  9557                           
  9558                           	psect	text27
  9559  094E                     __ptext27:	
  9560 ;; *************** function _TMR1_CallBack *****************
  9561 ;; Defined at:
  9562 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;		None
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;		None
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  1    wreg      void 
  9569 ;; Registers used:
  9570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9580 ;;Total ram usage:        0 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    2
  9583 ;; This function calls:
  9584 ;;		Absolute function
  9585 ;;		_TMR1_DefaultInterruptHandler
  9586 ;;		_Tick
  9587 ;; This function is called by:
  9588 ;;		_TMR1_ISR
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           
  9593                           ;psect for function _TMR1_CallBack
  9594  094E                     _TMR1_CallBack:	
  9595                           
  9596                           ;tmr1.c: 179: if(TMR1_InterruptHandler)
  9597                           
  9598                           ;incstack = 0
  9599                           ; Regs used in _TMR1_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9600  094E  0021               	movlb	1	; select bank1
  9601  094F  0846               	movf	_TMR1_InterruptHandler^(0+128),w
  9602  0950  0447               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  9603  0951  1903               	btfsc	3,2
  9604  0952  0008               	return
  9605                           
  9606                           ;tmr1.c: 180: {
  9607                           ;tmr1.c: 181: TMR1_InterruptHandler();
  9608  0953  0847               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  9609  0954  008A               	movwf	10
  9610  0955  0846               	movf	_TMR1_InterruptHandler^(0+128),w
  9611  0956  000A               	callw
  9612  0957  3189               	pagesel	$
  9613  0958  0008               	return
  9614  0959                     __end_of_TMR1_CallBack:	
  9615                           
  9616                           	psect	text28
  9617  07FF                     __ptext28:	
  9618 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  9619 ;; Defined at:
  9620 ;;		line 189 in file "mcc_generated_files/tmr1.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;		None
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;		None
  9625 ;; Return value:  Size  Location     Type
  9626 ;;                  1    wreg      void 
  9627 ;; Registers used:
  9628 ;;		None
  9629 ;; Tracked objects:
  9630 ;;		On entry : 0/0
  9631 ;;		On exit  : 0/0
  9632 ;;		Unchanged: 0/0
  9633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9638 ;;Total ram usage:        0 bytes
  9639 ;; Hardware stack levels used:    1
  9640 ;; This function calls:
  9641 ;;		Nothing
  9642 ;; This function is called by:
  9643 ;;		_TMR1_Initialize
  9644 ;;		_TMR1_CallBack
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           
  9649                           ;psect for function _TMR1_DefaultInterruptHandler
  9650  07FF                     _TMR1_DefaultInterruptHandler:	
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  9654  07FF  0008               	return
  9655  0800                     __end_of_TMR1_DefaultInterruptHandler:	
  9656                           
  9657                           	psect	text29
  9658  0E61                     __ptext29:	
  9659 ;; *************** function _Tick *****************
  9660 ;; Defined at:
  9661 ;;		line 180 in file "main.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;		None
  9664 ;; Auto vars:     Size  Location     Type
  9665 ;;		None
  9666 ;; Return value:  Size  Location     Type
  9667 ;;                  1    wreg      void 
  9668 ;; Registers used:
  9669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9670 ;; Tracked objects:
  9671 ;;		On entry : 0/0
  9672 ;;		On exit  : 0/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;Total ram usage:        2 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    1
  9682 ;; This function calls:
  9683 ;;		___lwmod
  9684 ;;		___wmul
  9685 ;; This function is called by:
  9686 ;;		_main
  9687 ;;		_TMR1_CallBack
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           
  9692                           ;psect for function _Tick
  9693  0E61                     _Tick:	
  9694                           
  9695                           ;main.c: 182: if(action > 0)
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _Tick: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9699  0E61  0021               	movlb	1	; select bank1
  9700  0E62  084C               	movf	_action^(0+128),w
  9701  0E63  1D03               	btfss	3,2
  9702  0E64  0008               	return
  9703  0E65  2EBA               	goto	i1l2911
  9704  0E66                     i1l2883:	
  9705                           ;main.c: 186: {
  9706                           ;main.c: 187: case STATE_RUNNING:
  9707                           
  9708                           ;main.c: 185: switch(mainState)
  9709                           
  9710                           ;main.c: 183: return;
  9711                           
  9712                           
  9713                           ;main.c: 188: if((tick % (10 * SECOND_MULTIPLIER)) == 0)
  9714  0E66  0020               	movlb	0	; select bank0
  9715  0E67  0854               	movf	_SECOND_MULTIPLIER,w
  9716  0E68  00FC               	movwf	??_Tick
  9717  0E69  01FD               	clrf	??_Tick+1
  9718  0E6A  087C               	movf	??_Tick,w
  9719  0E6B  00F0               	movwf	___wmul@multiplier
  9720  0E6C  087D               	movf	??_Tick+1,w
  9721  0E6D  00F1               	movwf	___wmul@multiplier+1
  9722  0E6E  300A               	movlw	10
  9723  0E6F  00F2               	movwf	___wmul@multiplicand
  9724  0E70  3000               	movlw	0
  9725  0E71  00F3               	movwf	___wmul@multiplicand+1
  9726  0E72  318A  223F  318E   	fcall	___wmul
  9727  0E75  0871               	movf	?___wmul+1,w
  9728  0E76  00F7               	movwf	___lwmod@divisor+1
  9729  0E77  0870               	movf	?___wmul,w
  9730  0E78  00F6               	movwf	___lwmod@divisor
  9731  0E79  0021               	movlb	1	; select bank1
  9732  0E7A  085F               	movf	(_tick+1)^(0+128),w
  9733  0E7B  00F9               	movwf	___lwmod@dividend+1
  9734  0E7C  085E               	movf	_tick^(0+128),w
  9735  0E7D  00F8               	movwf	___lwmod@dividend
  9736  0E7E  318B  23C1  318E   	fcall	___lwmod
  9737  0E81  0876               	movf	?___lwmod,w
  9738  0E82  0477               	iorwf	?___lwmod+1,w
  9739  0E83  1D03               	btfss	3,2
  9740  0E84  2E88               	goto	i1l2887
  9741                           
  9742                           ;main.c: 189: action = ACTION_GETTIME;
  9743  0E85  0021               	movlb	1	; select bank1
  9744  0E86  01CC               	clrf	_action^(0+128)
  9745  0E87  0ACC               	incf	_action^(0+128),f
  9746  0E88                     i1l2887:	
  9747                           
  9748                           ;main.c: 190: tick++;
  9749  0E88  3001               	movlw	1
  9750  0E89  0021               	movlb	1	; select bank1
  9751  0E8A  07DE               	addwf	_tick^(0+128),f
  9752  0E8B  3000               	movlw	0
  9753  0E8C  3DDF               	addwfc	(_tick+1)^(0+128),f
  9754                           
  9755                           ;main.c: 191: break;
  9756  0E8D  0008               	return
  9757  0E8E                     i1l2889:	
  9758                           ;main.c: 192: case STATE_SET_MINS:
  9759                           
  9760                           
  9761                           ;main.c: 193: blank = (secondaryTick++ & 0x1);
  9762  0E8E  0020               	movlb	0	; select bank0
  9763  0E8F  0845               	movf	_secondaryTick,w
  9764  0E90  3901               	andlw	1
  9765  0E91  00FC               	movwf	??_Tick
  9766  0E92  087C               	movf	??_Tick,w
  9767  0E93  0021               	movlb	1	; select bank1
  9768  0E94  00CD               	movwf	_blank^(0+128)
  9769  0E95  3001               	movlw	1
  9770  0E96  00FC               	movwf	??_Tick
  9771  0E97  087C               	movf	??_Tick,w
  9772  0E98  0020               	movlb	0	; select bank0
  9773  0E99  07C5               	addwf	_secondaryTick,f
  9774                           
  9775                           ;main.c: 194: if(secondaryTick == 41)
  9776  0E9A  3029               	movlw	41
  9777  0E9B  0645               	xorwf	_secondaryTick,w
  9778  0E9C  1D03               	btfss	3,2
  9779  0E9D  0008               	return
  9780                           
  9781                           ;main.c: 195: {
  9782                           ;main.c: 196: secondaryTick = 0;
  9783  0E9E  01C5               	clrf	_secondaryTick
  9784                           
  9785                           ;main.c: 197: mainState = STATE_SET_HOURS;
  9786  0E9F  0021               	movlb	1	; select bank1
  9787  0EA0  01CE               	clrf	_mainState^(0+128)
  9788  0EA1  0ACE               	incf	_mainState^(0+128),f
  9789                           
  9790                           ;main.c: 198: }
  9791                           ;main.c: 199: break;
  9792  0EA2  0008               	return
  9793  0EA3                     i1l2899:	
  9794                           ;main.c: 200: case STATE_SET_HOURS:
  9795                           
  9796                           
  9797                           ;main.c: 201: blank = (secondaryTick++ & 0x1);
  9798  0EA3  0020               	movlb	0	; select bank0
  9799  0EA4  0845               	movf	_secondaryTick,w
  9800  0EA5  3901               	andlw	1
  9801  0EA6  00FC               	movwf	??_Tick
  9802  0EA7  087C               	movf	??_Tick,w
  9803  0EA8  0021               	movlb	1	; select bank1
  9804  0EA9  00CD               	movwf	_blank^(0+128)
  9805  0EAA  3001               	movlw	1
  9806  0EAB  00FC               	movwf	??_Tick
  9807  0EAC  087C               	movf	??_Tick,w
  9808  0EAD  0020               	movlb	0	; select bank0
  9809  0EAE  07C5               	addwf	_secondaryTick,f
  9810                           
  9811                           ;main.c: 202: if(secondaryTick == 41)
  9812  0EAF  3029               	movlw	41
  9813  0EB0  0645               	xorwf	_secondaryTick,w
  9814  0EB1  1D03               	btfss	3,2
  9815  0EB2  0008               	return
  9816                           
  9817                           ;main.c: 203: {
  9818                           ;main.c: 204: action = ACTION_SETTIME;
  9819  0EB3  3002               	movlw	2
  9820  0EB4  00FC               	movwf	??_Tick
  9821  0EB5  087C               	movf	??_Tick,w
  9822  0EB6  0021               	movlb	1	; select bank1
  9823  0EB7  00CC               	movwf	_action^(0+128)
  9824                           
  9825                           ;main.c: 205: mainState = STATE_RUNNING;
  9826  0EB8  01CE               	clrf	_mainState^(0+128)
  9827                           
  9828                           ;main.c: 208: }
  9829                           
  9830                           ;main.c: 206: }
  9831                           ;main.c: 207: break;
  9832  0EB9  0008               	return
  9833  0EBA                     i1l2911:	
  9834  0EBA  084E               	movf	_mainState^(0+128),w
  9835                           
  9836                           ; Switch size 1, requested type "space"
  9837                           ; Number of cases is 3, Range of values is 0 to 2
  9838                           ; switch strategies available:
  9839                           ; Name         Instructions Cycles
  9840                           ; simple_byte           10     6 (average)
  9841                           ; direct_byte           12     6 (fixed)
  9842                           ; jumptable            260     6 (fixed)
  9843                           ;	Chosen strategy is simple_byte
  9844  0EBB  3A00               	xorlw	0	; case 0
  9845  0EBC  1903               	skipnz
  9846  0EBD  2E66               	goto	i1l2883
  9847  0EBE  3A01               	xorlw	1	; case 1
  9848  0EBF  1903               	skipnz
  9849  0EC0  2EA3               	goto	i1l2899
  9850  0EC1  3A03               	xorlw	3	; case 2
  9851  0EC2  1903               	skipnz
  9852  0EC3  2E8E               	goto	i1l2889
  9853  0EC4  2EC5               	goto	i1l467
  9854  0EC5                     i1l467:	
  9855  0EC5  0008               	return
  9856  0EC6                     __end_of_Tick:	
  9857                           
  9858                           	psect	text30
  9859  0A3F                     __ptext30:	
  9860 ;; *************** function ___wmul *****************
  9861 ;; Defined at:
  9862 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9863 ;; Parameters:    Size  Location     Type
  9864 ;;  multiplier      2    0[COMMON] unsigned int 
  9865 ;;  multiplicand    2    2[COMMON] unsigned int 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  product         2    4[COMMON] unsigned int 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  2    0[COMMON] unsigned int 
  9870 ;; Registers used:
  9871 ;;		wreg, status,2, status,0
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        6 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; This function calls:
  9884 ;;		Nothing
  9885 ;; This function is called by:
  9886 ;;		_Tick
  9887 ;; This function uses a non-reentrant model
  9888 ;;
  9889                           
  9890                           
  9891                           ;psect for function ___wmul
  9892  0A3F                     ___wmul:	
  9893                           
  9894                           ;incstack = 0
  9895                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9896  0A3F  01F4               	clrf	___wmul@product
  9897  0A40  01F5               	clrf	___wmul@product+1
  9898  0A41                     i1l2831:	
  9899  0A41  1C70               	btfss	___wmul@multiplier,0
  9900  0A42  2A47               	goto	i1l693
  9901  0A43  0872               	movf	___wmul@multiplicand,w
  9902  0A44  07F4               	addwf	___wmul@product,f
  9903  0A45  0873               	movf	___wmul@multiplicand+1,w
  9904  0A46  3DF5               	addwfc	___wmul@product+1,f
  9905  0A47                     i1l693:	
  9906  0A47  3001               	movlw	1
  9907  0A48                     u183_25:	
  9908  0A48  35F2               	lslf	___wmul@multiplicand,f
  9909  0A49  0DF3               	rlf	___wmul@multiplicand+1,f
  9910  0A4A  0B89               	decfsz	9,f
  9911  0A4B  2A48               	goto	u183_25
  9912  0A4C  3001               	movlw	1
  9913  0A4D                     u184_25:	
  9914  0A4D  36F1               	lsrf	___wmul@multiplier+1,f
  9915  0A4E  0CF0               	rrf	___wmul@multiplier,f
  9916  0A4F  0B89               	decfsz	9,f
  9917  0A50  2A4D               	goto	u184_25
  9918  0A51  0870               	movf	___wmul@multiplier,w
  9919  0A52  0471               	iorwf	___wmul@multiplier+1,w
  9920  0A53  1D03               	btfss	3,2
  9921  0A54  2A41               	goto	i1l2831
  9922  0A55  0875               	movf	___wmul@product+1,w
  9923  0A56  00F1               	movwf	?___wmul+1
  9924  0A57  0874               	movf	___wmul@product,w
  9925  0A58  00F0               	movwf	?___wmul
  9926  0A59  0008               	return
  9927  0A5A                     __end_of___wmul:	
  9928                           
  9929                           	psect	text31
  9930  0BC1                     __ptext31:	
  9931 ;; *************** function ___lwmod *****************
  9932 ;; Defined at:
  9933 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;  divisor         2    6[COMMON] unsigned int 
  9936 ;;  dividend        2    8[COMMON] unsigned int 
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;  counter         1   11[COMMON] unsigned char 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  2    6[COMMON] unsigned int 
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, status,0
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9948 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;Total ram usage:        6 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; This function calls:
  9955 ;;		Nothing
  9956 ;; This function is called by:
  9957 ;;		_Tick
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           
  9962                           ;psect for function ___lwmod
  9963  0BC1                     ___lwmod:	
  9964                           
  9965                           ;incstack = 0
  9966                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9967  0BC1  0876               	movf	___lwmod@divisor,w
  9968  0BC2  0477               	iorwf	___lwmod@divisor+1,w
  9969  0BC3  1903               	btfsc	3,2
  9970  0BC4  2BE8               	goto	i1l2861
  9971  0BC5  01FB               	clrf	___lwmod@counter
  9972  0BC6  0AFB               	incf	___lwmod@counter,f
  9973  0BC7                     i1l2851:	
  9974  0BC7  1BF7               	btfsc	___lwmod@divisor+1,7
  9975  0BC8  2BD3               	goto	i1l2853
  9976  0BC9  3001               	movlw	1
  9977  0BCA                     u187_25:	
  9978  0BCA  35F6               	lslf	___lwmod@divisor,f
  9979  0BCB  0DF7               	rlf	___lwmod@divisor+1,f
  9980  0BCC  0B89               	decfsz	9,f
  9981  0BCD  2BCA               	goto	u187_25
  9982  0BCE  3001               	movlw	1
  9983  0BCF  00FA               	movwf	??___lwmod
  9984  0BD0  087A               	movf	??___lwmod,w
  9985  0BD1  07FB               	addwf	___lwmod@counter,f
  9986  0BD2  2BC7               	goto	i1l2851
  9987  0BD3                     i1l2853:	
  9988  0BD3  0877               	movf	___lwmod@divisor+1,w
  9989  0BD4  0279               	subwf	___lwmod@dividend+1,w
  9990  0BD5  1D03               	skipz
  9991  0BD6  2BD9               	goto	u189_25
  9992  0BD7  0876               	movf	___lwmod@divisor,w
  9993  0BD8  0278               	subwf	___lwmod@dividend,w
  9994  0BD9                     u189_25:	
  9995  0BD9  1C03               	skipc
  9996  0BDA  2BDF               	goto	i1l2857
  9997  0BDB  0876               	movf	___lwmod@divisor,w
  9998  0BDC  02F8               	subwf	___lwmod@dividend,f
  9999  0BDD  0877               	movf	___lwmod@divisor+1,w
 10000  0BDE  3BF9               	subwfb	___lwmod@dividend+1,f
 10001  0BDF                     i1l2857:	
 10002  0BDF  3001               	movlw	1
 10003  0BE0                     u190_25:	
 10004  0BE0  36F7               	lsrf	___lwmod@divisor+1,f
 10005  0BE1  0CF6               	rrf	___lwmod@divisor,f
 10006  0BE2  0B89               	decfsz	9,f
 10007  0BE3  2BE0               	goto	u190_25
 10008  0BE4  3001               	movlw	1
 10009  0BE5  02FB               	subwf	___lwmod@counter,f
 10010  0BE6  1D03               	btfss	3,2
 10011  0BE7  2BD3               	goto	i1l2853
 10012  0BE8                     i1l2861:	
 10013  0BE8  0879               	movf	___lwmod@dividend+1,w
 10014  0BE9  00F7               	movwf	?___lwmod+1
 10015  0BEA  0878               	movf	___lwmod@dividend,w
 10016  0BEB  00F6               	movwf	?___lwmod
 10017  0BEC  0008               	return
 10018  0BED                     __end_of___lwmod:	
 10019                           
 10020                           	psect	text32
 10021  0959                     __ptext32:	
 10022 ;; *************** function _PIN_MANAGER_IOC *****************
 10023 ;; Defined at:
 10024 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      void 
 10031 ;; Registers used:
 10032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;Total ram usage:        0 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    7
 10045 ;; This function calls:
 10046 ;;		_IOCCF2_ISR
 10047 ;;		_IOCCF3_ISR
 10048 ;; This function is called by:
 10049 ;;		_INTERRUPT_InterruptManager
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           
 10054                           ;psect for function _PIN_MANAGER_IOC
 10055  0959                     _PIN_MANAGER_IOC:	
 10056                           
 10057                           ;pin_manager.c: 135: if(IOCCFbits.IOCCF2 == 1)
 10058                           
 10059                           ;incstack = 0
 10060                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10061  0959  0027               	movlb	7	; select bank7
 10062  095A  1D19               	btfss	25,2	;volatile
 10063  095B  295F               	goto	i1l6837
 10064                           
 10065                           ;pin_manager.c: 136: {
 10066                           ;pin_manager.c: 137: IOCCF2_ISR();
 10067  095C  3189  217D  3189   	fcall	_IOCCF2_ISR
 10068  095F                     i1l6837:	
 10069                           
 10070                           ;pin_manager.c: 138: }
 10071                           ;pin_manager.c: 141: if(IOCCFbits.IOCCF3 == 1)
 10072  095F  0027               	movlb	7	; select bank7
 10073  0960  1D99               	btfss	25,3	;volatile
 10074  0961  0008               	return
 10075                           
 10076                           ;pin_manager.c: 142: {
 10077                           ;pin_manager.c: 143: IOCCF3_ISR();
 10078  0962  3189  218A         	fcall	_IOCCF3_ISR
 10079  0964  0008               	return
 10080  0965                     __end_of_PIN_MANAGER_IOC:	
 10081                           
 10082                           	psect	text33
 10083  098A                     __ptext33:	
 10084 ;; *************** function _IOCCF3_ISR *****************
 10085 ;; Defined at:
 10086 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;		None
 10089 ;; Auto vars:     Size  Location     Type
 10090 ;;		None
 10091 ;; Return value:  Size  Location     Type
 10092 ;;                  1    wreg      void 
 10093 ;; Registers used:
 10094 ;;		wreg, status,2, status,0, pclath, cstack
 10095 ;; Tracked objects:
 10096 ;;		On entry : 0/0
 10097 ;;		On exit  : 0/0
 10098 ;;		Unchanged: 0/0
 10099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;Total ram usage:        0 bytes
 10105 ;; Hardware stack levels used:    1
 10106 ;; Hardware stack levels required when called:    1
 10107 ;; This function calls:
 10108 ;;		Absolute function
 10109 ;;		_IOCCF3_DefaultInterruptHandler
 10110 ;;		_SetTurn
 10111 ;; This function is called by:
 10112 ;;		_PIN_MANAGER_IOC
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _IOCCF3_ISR
 10118  098A                     _IOCCF3_ISR:	
 10119                           
 10120                           ;pin_manager.c: 187: if(IOCCF3_InterruptHandler)
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in _IOCCF3_ISR: [wreg+status,2+status,0+pclath+cstack]
 10124  098A  0021               	movlb	1	; select bank1
 10125  098B  086B               	movf	_IOCCF3_InterruptHandler^(0+128),w
 10126  098C  046C               	iorwf	(_IOCCF3_InterruptHandler+1)^(0+128),w
 10127  098D  1903               	btfsc	3,2
 10128  098E  2994               	goto	i1l3065
 10129                           
 10130                           ;pin_manager.c: 188: {
 10131                           ;pin_manager.c: 189: IOCCF3_InterruptHandler();
 10132  098F  086C               	movf	(_IOCCF3_InterruptHandler+1)^(0+128),w
 10133  0990  008A               	movwf	10
 10134  0991  086B               	movf	_IOCCF3_InterruptHandler^(0+128),w
 10135  0992  000A               	callw
 10136  0993  3189               	pagesel	$
 10137  0994                     i1l3065:	
 10138                           
 10139                           ;pin_manager.c: 190: }
 10140                           ;pin_manager.c: 191: IOCCFbits.IOCCF3 = 0;
 10141  0994  0027               	movlb	7	; select bank7
 10142  0995  1199               	bcf	25,3	;volatile
 10143  0996  0008               	return
 10144  0997                     __end_of_IOCCF3_ISR:	
 10145                           
 10146                           	psect	text34
 10147  0003                     __ptext34:	
 10148 ;; *************** function _IOCCF3_DefaultInterruptHandler *****************
 10149 ;; Defined at:
 10150 ;;		line 204 in file "mcc_generated_files/pin_manager.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;		None
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      void 
 10157 ;; Registers used:
 10158 ;;		None
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;Total ram usage:        0 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; This function calls:
 10171 ;;		Nothing
 10172 ;; This function is called by:
 10173 ;;		_PIN_MANAGER_Initialize
 10174 ;;		_IOCCF3_ISR
 10175 ;; This function uses a non-reentrant model
 10176 ;;
 10177                           
 10178                           
 10179                           ;psect for function _IOCCF3_DefaultInterruptHandler
 10180  0003                     _IOCCF3_DefaultInterruptHandler:	
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in _IOCCF3_DefaultInterruptHandler: []
 10184  0003  0008               	return
 10185  0004                     __end_of_IOCCF3_DefaultInterruptHandler:	
 10186                           
 10187                           	psect	text35
 10188  0945                     __ptext35:	
 10189 ;; *************** function _SetTurn *****************
 10190 ;; Defined at:
 10191 ;;		line 211 in file "main.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;		None
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;		None
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		wreg, status,2
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;Total ram usage:        1 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; This function calls:
 10212 ;;		Nothing
 10213 ;; This function is called by:
 10214 ;;		_main
 10215 ;;		_IOCCF3_ISR
 10216 ;; This function uses a non-reentrant model
 10217 ;;
 10218                           
 10219                           
 10220                           ;psect for function _SetTurn
 10221  0945                     _SetTurn:	
 10222                           
 10223                           ;main.c: 213: secondaryTick = 0;
 10224                           
 10225                           ;incstack = 0
 10226                           ; Regs used in _SetTurn: [wreg+status,2]
 10227  0945  0020               	movlb	0	; select bank0
 10228  0946  01C5               	clrf	_secondaryTick
 10229                           
 10230                           ;main.c: 214: action = 0;
 10231  0947  0021               	movlb	1	; select bank1
 10232  0948  01CC               	clrf	_action^(0+128)
 10233                           
 10234                           ;main.c: 215: mainState = STATE_SET_MINS;
 10235  0949  3002               	movlw	2
 10236  094A  00F0               	movwf	??_SetTurn
 10237  094B  0870               	movf	??_SetTurn,w
 10238  094C  00CE               	movwf	_mainState^(0+128)
 10239  094D  0008               	return
 10240  094E                     __end_of_SetTurn:	
 10241                           
 10242                           	psect	text36
 10243  097D                     __ptext36:	
 10244 ;; *************** function _IOCCF2_ISR *****************
 10245 ;; Defined at:
 10246 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;		None
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;		None
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;Total ram usage:        0 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    6
 10267 ;; This function calls:
 10268 ;;		Absolute function
 10269 ;;		_IOCCF2_DefaultInterruptHandler
 10270 ;;		_TapTime
 10271 ;; This function is called by:
 10272 ;;		_PIN_MANAGER_IOC
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           
 10277                           ;psect for function _IOCCF2_ISR
 10278  097D                     _IOCCF2_ISR:	
 10279                           
 10280                           ;pin_manager.c: 157: if(IOCCF2_InterruptHandler)
 10281                           
 10282                           ;incstack = 0
 10283                           ; Regs used in _IOCCF2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10284  097D  0021               	movlb	1	; select bank1
 10285  097E  086D               	movf	_IOCCF2_InterruptHandler^(0+128),w
 10286  097F  046E               	iorwf	(_IOCCF2_InterruptHandler+1)^(0+128),w
 10287  0980  1903               	btfsc	3,2
 10288  0981  2987               	goto	i1l6763
 10289                           
 10290                           ;pin_manager.c: 158: {
 10291                           ;pin_manager.c: 159: IOCCF2_InterruptHandler();
 10292  0982  086E               	movf	(_IOCCF2_InterruptHandler+1)^(0+128),w
 10293  0983  008A               	movwf	10
 10294  0984  086D               	movf	_IOCCF2_InterruptHandler^(0+128),w
 10295  0985  000A               	callw
 10296  0986  3189               	pagesel	$
 10297  0987                     i1l6763:	
 10298                           
 10299                           ;pin_manager.c: 160: }
 10300                           ;pin_manager.c: 161: IOCCFbits.IOCCF2 = 0;
 10301  0987  0027               	movlb	7	; select bank7
 10302  0988  1119               	bcf	25,2	;volatile
 10303  0989  0008               	return
 10304  098A                     __end_of_IOCCF2_ISR:	
 10305                           
 10306                           	psect	text37
 10307  0002                     __ptext37:	
 10308 ;; *************** function _IOCCF2_DefaultInterruptHandler *****************
 10309 ;; Defined at:
 10310 ;;		line 174 in file "mcc_generated_files/pin_manager.c"
 10311 ;; Parameters:    Size  Location     Type
 10312 ;;		None
 10313 ;; Auto vars:     Size  Location     Type
 10314 ;;		None
 10315 ;; Return value:  Size  Location     Type
 10316 ;;                  1    wreg      void 
 10317 ;; Registers used:
 10318 ;;		None
 10319 ;; Tracked objects:
 10320 ;;		On entry : 0/0
 10321 ;;		On exit  : 0/0
 10322 ;;		Unchanged: 0/0
 10323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;Total ram usage:        0 bytes
 10329 ;; Hardware stack levels used:    1
 10330 ;; This function calls:
 10331 ;;		Nothing
 10332 ;; This function is called by:
 10333 ;;		_PIN_MANAGER_Initialize
 10334 ;;		_IOCCF2_ISR
 10335 ;; This function uses a non-reentrant model
 10336 ;;
 10337                           
 10338                           
 10339                           ;psect for function _IOCCF2_DefaultInterruptHandler
 10340  0002                     _IOCCF2_DefaultInterruptHandler:	
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _IOCCF2_DefaultInterruptHandler: []
 10344  0002  0008               	return
 10345  0003                     __end_of_IOCCF2_DefaultInterruptHandler:	
 10346                           
 10347                           	psect	text38
 10348  09DE                     __ptext38:	
 10349 ;; *************** function _TapTime *****************
 10350 ;; Defined at:
 10351 ;;		line 218 in file "main.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;		None
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;		None
 10356 ;; Return value:  Size  Location     Type
 10357 ;;                  1    wreg      void 
 10358 ;; Registers used:
 10359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/0
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;Total ram usage:        1 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:    5
 10372 ;; This function calls:
 10373 ;;		_Clock_Tap
 10374 ;; This function is called by:
 10375 ;;		_main
 10376 ;;		_IOCCF2_ISR
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           
 10381                           ;psect for function _TapTime
 10382  09DE                     _TapTime:	
 10383                           
 10384                           ;main.c: 220: if(mainState != STATE_SET_HOURS && mainState != STATE_SET_MINS)
 10385                           
 10386                           ;incstack = 0
 10387                           ; Regs used in _TapTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10388  09DE  0021               	movlb	1	; select bank1
 10389  09DF  034E               	decf	_mainState^(0+128),w
 10390  09E0  1903               	btfsc	3,2
 10391  09E1  29E6               	goto	i1l6627
 10392  09E2  3002               	movlw	2
 10393  09E3  064E               	xorwf	_mainState^(0+128),w
 10394  09E4  1D03               	btfss	3,2
 10395  09E5  0008               	return
 10396  09E6                     i1l6627:	
 10397                           ;main.c: 221: return;
 10398                           
 10399                           
 10400                           ;main.c: 223: secondaryTick &= 0x1;
 10401  09E6  3001               	movlw	1
 10402  09E7  0020               	movlb	0	; select bank0
 10403  09E8  00B9               	movwf	??_TapTime
 10404  09E9  0839               	movf	??_TapTime,w
 10405  09EA  05C5               	andwf	_secondaryTick,f
 10406                           
 10407                           ;main.c: 224: Clock_Tap(mainState == STATE_SET_HOURS);
 10408  09EB  0021               	movlb	1	; select bank1
 10409  09EC  034E               	decf	_mainState^(0+128),w
 10410  09ED  1D03               	btfss	3,2
 10411  09EE  29F1               	goto	u574_20
 10412  09EF  3001               	movlw	1
 10413  09F0  29F2               	goto	u575_20
 10414  09F1                     u574_20:	
 10415  09F1  3000               	movlw	0
 10416  09F2                     u575_20:	
 10417  09F2  318B  23ED         	fcall	_Clock_Tap
 10418  09F4  0008               	return
 10419  09F5                     __end_of_TapTime:	
 10420                           
 10421                           	psect	text39
 10422  0BED                     __ptext39:	
 10423 ;; *************** function _Clock_Tap *****************
 10424 ;; Defined at:
 10425 ;;		line 76 in file "clock.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  hours           1    wreg     unsigned char 
 10428 ;; Auto vars:     Size  Location     Type
 10429 ;;  hours           1   24[BANK0 ] unsigned char 
 10430 ;; Return value:  Size  Location     Type
 10431 ;;                  1    wreg      void 
 10432 ;; Registers used:
 10433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10434 ;; Tracked objects:
 10435 ;;		On entry : 0/0
 10436 ;;		On exit  : 0/0
 10437 ;;		Unchanged: 0/0
 10438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;Total ram usage:        2 bytes
 10444 ;; Hardware stack levels used:    1
 10445 ;; Hardware stack levels required when called:    4
 10446 ;; This function calls:
 10447 ;;		i1_Clock_Display
 10448 ;;		i1_IncHour
 10449 ;; This function is called by:
 10450 ;;		_TapTime
 10451 ;; This function uses a non-reentrant model
 10452 ;;
 10453                           
 10454                           
 10455                           ;psect for function _Clock_Tap
 10456  0BED                     _Clock_Tap:	
 10457                           
 10458                           ;incstack = 0
 10459                           ; Regs used in _Clock_Tap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10460                           ;Clock_Tap@hours stored from wreg
 10461  0BED  0020               	movlb	0	; select bank0
 10462  0BEE  00B8               	movwf	Clock_Tap@hours
 10463                           
 10464                           ;clock.c: 78: if(hours)
 10465  0BEF  0838               	movf	Clock_Tap@hours,w
 10466  0BF0  1903               	btfsc	3,2
 10467  0BF1  2BFD               	goto	i1l6595
 10468                           
 10469                           ;clock.c: 79: hour = IncHour(hour);
 10470  0BF2  0021               	movlb	1	; select bank1
 10471  0BF3  085D               	movf	_hour^(0+128),w
 10472  0BF4  3189  2197  318B   	fcall	i1_IncHour
 10473  0BF7  0020               	movlb	0	; select bank0
 10474  0BF8  00B7               	movwf	??_Clock_Tap
 10475  0BF9  0837               	movf	??_Clock_Tap,w
 10476  0BFA  0021               	movlb	1	; select bank1
 10477  0BFB  00DD               	movwf	_hour^(0+128)
 10478  0BFC  2C1A               	goto	i1l6605
 10479  0BFD                     i1l6595:	
 10480                           
 10481                           ;clock.c: 80: else
 10482                           ;clock.c: 81: {
 10483                           ;clock.c: 82: if(min >= 0x55)
 10484  0BFD  3055               	movlw	85
 10485  0BFE  0021               	movlb	1	; select bank1
 10486  0BFF  0248               	subwf	_min^(0+128),w
 10487  0C00  1C03               	skipc
 10488  0C01  2C04               	goto	i1l6599
 10489                           
 10490                           ;clock.c: 83: min = 0x00;
 10491  0C02  01C8               	clrf	_min^(0+128)
 10492  0C03  2C1A               	goto	i1l6605
 10493  0C04                     i1l6599:	
 10494                           
 10495                           ;clock.c: 84: else if((min & 0xf) >= 0x5)
 10496  0C04  300F               	movlw	15
 10497  0C05  0548               	andwf	_min^(0+128),w
 10498  0C06  0020               	movlb	0	; select bank0
 10499  0C07  00B7               	movwf	??_Clock_Tap
 10500  0C08  3005               	movlw	5
 10501  0C09  0237               	subwf	??_Clock_Tap,w
 10502  0C0A  1C03               	skipc
 10503  0C0B  2C11               	goto	i1l6603
 10504                           
 10505                           ;clock.c: 85: min = ((min & 0xf0) + 0x10);
 10506  0C0C  0021               	movlb	1	; select bank1
 10507  0C0D  0848               	movf	_min^(0+128),w
 10508  0C0E  39F0               	andlw	240
 10509  0C0F  3E10               	addlw	16
 10510  0C10  2C15               	goto	L12
 10511  0C11                     i1l6603:	
 10512                           
 10513                           ;clock.c: 86: else
 10514                           ;clock.c: 87: min = ((min & 0xf0) + 0x05);
 10515  0C11  0021               	movlb	1	; select bank1
 10516  0C12  0848               	movf	_min^(0+128),w
 10517  0C13  39F0               	andlw	240
 10518  0C14  3E05               	addlw	5
 10519  0C15                     L12:	
 10520  0C15  0020               	movlb	0	; select bank0
 10521  0C16  00B7               	movwf	??_Clock_Tap
 10522  0C17  0837               	movf	??_Clock_Tap,w
 10523  0C18  0021               	movlb	1	; select bank1
 10524  0C19  00C8               	movwf	_min^(0+128)
 10525  0C1A                     i1l6605:	
 10526                           
 10527                           ;clock.c: 88: }
 10528                           ;clock.c: 90: Clock_Display(0);
 10529  0C1A  3000               	movlw	0
 10530  0C1B  3180  2084         	fcall	i1_Clock_Display
 10531  0C1D  0008               	return
 10532  0C1E                     __end_of_Clock_Tap:	
 10533                           
 10534                           	psect	text40
 10535  0084                     __ptext40:	
 10536 ;; *************** function i1_Clock_Display *****************
 10537 ;; Defined at:
 10538 ;;		line 115 in file "clock.c"
 10539 ;; Parameters:    Size  Location     Type
 10540 ;;  fetchTime       1    wreg     unsigned char 
 10541 ;; Auto vars:     Size  Location     Type
 10542 ;;  fetchTime       1   19[BANK0 ] unsigned char 
 10543 ;;  Clock_Displa    1   22[BANK0 ] PTR char 
 10544 ;;		 -> DISPLAYBANK_row(11), 
 10545 ;;  Clock_Displa    1   21[BANK0 ] PTR unsigned int 
 10546 ;;		 -> DISPLAYBANK_col(20), 
 10547 ;;  Clock_Displa    1   20[BANK0 ] unsigned char 
 10548 ;; Return value:  Size  Location     Type
 10549 ;;                  1    wreg      void 
 10550 ;; Registers used:
 10551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10552 ;; Tracked objects:
 10553 ;;		On entry : 0/0
 10554 ;;		On exit  : 0/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10560 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10561 ;;Total ram usage:        5 bytes
 10562 ;; Hardware stack levels used:    1
 10563 ;; Hardware stack levels required when called:    3
 10564 ;; This function calls:
 10565 ;;		i1_Clock_Read
 10566 ;;		i1_IncHour
 10567 ;; This function is called by:
 10568 ;;		_Clock_Tap
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           
 10573                           ;psect for function i1_Clock_Display
 10574  0084                     i1_Clock_Display:	
 10575                           
 10576                           ;incstack = 0
 10577                           ; Regs used in i1_Clock_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10578                           ;i1Clock_Display@fetchTime stored from wreg
 10579  0084  0020               	movlb	0	; select bank0
 10580  0085  00B3               	movwf	i1Clock_Display@fetchTime
 10581                           
 10582                           ;clock.c: 117: if(fetchTime)
 10583  0086  0833               	movf	i1Clock_Display@fetchTime,w
 10584  0087  1903               	btfsc	3,2
 10585  0088  288C               	goto	i1l6313
 10586                           
 10587                           ;clock.c: 118: Clock_Read();
 10588  0089  318A  22D7  3180   	fcall	i1_Clock_Read
 10589  008C                     i1l6313:	
 10590                           
 10591                           ;clock.c: 120: int8_t* row = DISPLAYBANK_row;
 10592  008C  30E0               	movlw	(low (_DISPLAYBANK_row| 0))& (0+255)
 10593  008D  0020               	movlb	0	; select bank0
 10594  008E  00B2               	movwf	??i1_Clock_Display
 10595  008F  0832               	movf	??i1_Clock_Display,w
 10596  0090  00B6               	movwf	i1Clock_Display@row
 10597                           
 10598                           ;clock.c: 121: uint16_t* col = DISPLAYBANK_col;
 10599  0091  3035               	movlw	(low (_DISPLAYBANK_col| (0+256)))& (0+255)
 10600  0092  00B2               	movwf	??i1_Clock_Display
 10601  0093  0832               	movf	??i1_Clock_Display,w
 10602  0094  00B5               	movwf	i1Clock_Display@col
 10603                           
 10604                           ;clock.c: 123: *(row++) = 0;
 10605  0095  0836               	movf	i1Clock_Display@row,w
 10606  0096  0086               	movwf	6
 10607  0097  0187               	clrf	7
 10608  0098  0181               	clrf	1
 10609  0099  3001               	movlw	1
 10610  009A  00B2               	movwf	??i1_Clock_Display
 10611  009B  0832               	movf	??i1_Clock_Display,w
 10612  009C  07B6               	addwf	i1Clock_Display@row,f
 10613                           
 10614                           ;clock.c: 124: *(col++) = 0x7E4;
 10615  009D  0835               	movf	i1Clock_Display@col,w
 10616  009E  0086               	movwf	6
 10617  009F  3001               	movlw	1	; select bank2/3
 10618  00A0  0087               	movwf	7
 10619  00A1  30E4               	movlw	228
 10620  00A2  3FC0               	movwi [0]fsr1
 10621  00A3  3007               	movlw	7
 10622  00A4  3FC1               	movwi [1]fsr1
 10623  00A5  3002               	movlw	2
 10624  00A6  00B2               	movwf	??i1_Clock_Display
 10625  00A7  0832               	movf	??i1_Clock_Display,w
 10626  00A8  07B5               	addwf	i1Clock_Display@col,f
 10627                           
 10628                           ;clock.c: 126: uint8_t hourDisplay = hour;
 10629  00A9  0021               	movlb	1	; select bank1
 10630  00AA  085D               	movf	_hour^(0+128),w
 10631  00AB  0020               	movlb	0	; select bank0
 10632  00AC  00B2               	movwf	??i1_Clock_Display
 10633  00AD  0832               	movf	??i1_Clock_Display,w
 10634  00AE  00B4               	movwf	i1Clock_Display@hourDisplay
 10635                           
 10636                           ;clock.c: 128: if(min >= 0x05)
 10637  00AF  3005               	movlw	5
 10638  00B0  0021               	movlb	1	; select bank1
 10639  00B1  0248               	subwf	_min^(0+128),w
 10640  00B2  1C03               	skipc
 10641  00B3  29DB               	goto	i1l6441
 10642                           
 10643                           ;clock.c: 129: {
 10644                           ;clock.c: 130: if(min < 0x10 || min >= 0x55)
 10645  00B4  3010               	movlw	16
 10646  00B5  0248               	subwf	_min^(0+128),w
 10647  00B6  1C03               	skipc
 10648  00B7  28BC               	goto	i1l6333
 10649  00B8  3055               	movlw	85
 10650  00B9  0248               	subwf	_min^(0+128),w
 10651  00BA  1C03               	skipc
 10652  00BB  28D1               	goto	i1l6341
 10653  00BC                     i1l6333:	
 10654                           
 10655                           ;clock.c: 131: {
 10656                           ;clock.c: 132: *(row++) = 2;
 10657  00BC  3002               	movlw	2
 10658  00BD  0020               	movlb	0	; select bank0
 10659  00BE  00B2               	movwf	??i1_Clock_Display
 10660  00BF  0836               	movf	i1Clock_Display@row,w
 10661  00C0  0086               	movwf	6
 10662  00C1  0187               	clrf	7
 10663  00C2  0832               	movf	??i1_Clock_Display,w
 10664  00C3  0081               	movwf	1
 10665  00C4  3001               	movlw	1
 10666  00C5  00B2               	movwf	??i1_Clock_Display
 10667  00C6  0832               	movf	??i1_Clock_Display,w
 10668  00C7  07B6               	addwf	i1Clock_Display@row,f
 10669                           
 10670                           ;clock.c: 133: *(col++) = 0x43F;
 10671  00C8  0835               	movf	i1Clock_Display@col,w
 10672  00C9  0086               	movwf	6
 10673  00CA  3001               	movlw	1	; select bank2/3
 10674  00CB  0087               	movwf	7
 10675  00CC  303F               	movlw	63
 10676  00CD  3FC0               	movwi [0]fsr1
 10677  00CE  3004               	movlw	4
 10678  00CF  3FC1               	movwi [1]fsr1
 10679  00D0  2974               	goto	i1l6405
 10680  00D1                     i1l6341:	
 10681                           ;clock.c: 134: }
 10682                           
 10683                           
 10684                           ;clock.c: 135: else if(min < 0x15 || min >= 0x50)
 10685  00D1  3015               	movlw	21
 10686  00D2  0021               	movlb	1	; select bank1
 10687  00D3  0248               	subwf	_min^(0+128),w
 10688  00D4  1C03               	skipc
 10689  00D5  28DA               	goto	i1l6345
 10690  00D6  3050               	movlw	80
 10691  00D7  0248               	subwf	_min^(0+128),w
 10692  00D8  1C03               	skipc
 10693  00D9  2908               	goto	i1l6363
 10694  00DA                     i1l6345:	
 10695                           
 10696                           ;clock.c: 136: {
 10697                           ;clock.c: 137: if(min >= 0x50)
 10698  00DA  3050               	movlw	80
 10699  00DB  0248               	subwf	_min^(0+128),w
 10700  00DC  1C03               	skipc
 10701  00DD  28F3               	goto	i1l6355
 10702                           
 10703                           ;clock.c: 138: {
 10704                           ;clock.c: 139: *(row++) = 3;
 10705  00DE  3003               	movlw	3
 10706  00DF  0020               	movlb	0	; select bank0
 10707  00E0  00B2               	movwf	??i1_Clock_Display
 10708  00E1  0836               	movf	i1Clock_Display@row,w
 10709  00E2  0086               	movwf	6
 10710  00E3  0187               	clrf	7
 10711  00E4  0832               	movf	??i1_Clock_Display,w
 10712  00E5  0081               	movwf	1
 10713  00E6  3001               	movlw	1
 10714  00E7  00B2               	movwf	??i1_Clock_Display
 10715  00E8  0832               	movf	??i1_Clock_Display,w
 10716  00E9  07B6               	addwf	i1Clock_Display@row,f
 10717                           
 10718                           ;clock.c: 140: *(col++) = 0x11F;
 10719  00EA  0835               	movf	i1Clock_Display@col,w
 10720  00EB  0086               	movwf	6
 10721  00EC  3001               	movlw	1	; select bank2/3
 10722  00ED  0087               	movwf	7
 10723  00EE  301F               	movlw	31
 10724  00EF  3FC0               	movwi [0]fsr1
 10725  00F0  3001               	movlw	1
 10726  00F1  3FC1               	movwi [1]fsr1
 10727  00F2  2974               	goto	i1l6405
 10728  00F3                     i1l6355:	
 10729                           ;clock.c: 141: }
 10730                           
 10731                           
 10732                           ;clock.c: 142: else
 10733                           ;clock.c: 143: {
 10734                           ;clock.c: 144: *(row++) = 3;
 10735  00F3  3003               	movlw	3
 10736  00F4  0020               	movlb	0	; select bank0
 10737  00F5  00B2               	movwf	??i1_Clock_Display
 10738  00F6  0836               	movf	i1Clock_Display@row,w
 10739  00F7  0086               	movwf	6
 10740  00F8  0187               	clrf	7
 10741  00F9  0832               	movf	??i1_Clock_Display,w
 10742  00FA  0081               	movwf	1
 10743  00FB  3001               	movlw	1
 10744  00FC  00B2               	movwf	??i1_Clock_Display
 10745  00FD  0832               	movf	??i1_Clock_Display,w
 10746  00FE  07B6               	addwf	i1Clock_Display@row,f
 10747                           
 10748                           ;clock.c: 145: *(col++) = 0x71F;
 10749  00FF  0835               	movf	i1Clock_Display@col,w
 10750  0100  0086               	movwf	6
 10751  0101  3001               	movlw	1	; select bank2/3
 10752  0102  0087               	movwf	7
 10753  0103  301F               	movlw	31
 10754  0104  3FC0               	movwi [0]fsr1
 10755  0105  3007               	movlw	7
 10756  0106  3FC1               	movwi [1]fsr1
 10757  0107  2974               	goto	i1l6405
 10758  0108                     i1l6363:	
 10759                           ;clock.c: 146: }
 10760                           ;clock.c: 147: }
 10761                           
 10762                           
 10763                           ;clock.c: 148: else if(min < 0x20 || min >= 0x45)
 10764  0108  3020               	movlw	32
 10765  0109  0021               	movlb	1	; select bank1
 10766  010A  0248               	subwf	_min^(0+128),w
 10767  010B  1C03               	skipc
 10768  010C  2911               	goto	i1l6367
 10769  010D  3045               	movlw	69
 10770  010E  0248               	subwf	_min^(0+128),w
 10771  010F  1C03               	skipc
 10772  0110  2924               	goto	i1l6375
 10773  0111                     i1l6367:	
 10774                           
 10775                           ;clock.c: 149: {
 10776                           ;clock.c: 150: *(row++) = 1;
 10777  0111  0020               	movlb	0	; select bank0
 10778  0112  0836               	movf	i1Clock_Display@row,w
 10779  0113  0086               	movwf	6
 10780  0114  0187               	clrf	7
 10781  0115  0181               	clrf	1
 10782  0116  0A81               	incf	1,f
 10783  0117  3001               	movlw	1
 10784  0118  00B2               	movwf	??i1_Clock_Display
 10785  0119  0832               	movf	??i1_Clock_Display,w
 10786  011A  07B6               	addwf	i1Clock_Display@row,f
 10787                           
 10788                           ;clock.c: 151: *(col++) = 0x602;
 10789  011B  0835               	movf	i1Clock_Display@col,w
 10790  011C  0086               	movwf	6
 10791  011D  3001               	movlw	1	; select bank2/3
 10792  011E  0087               	movwf	7
 10793  011F  3002               	movlw	2
 10794  0120  3FC0               	movwi [0]fsr1
 10795  0121  3006               	movlw	6
 10796  0122  3FC1               	movwi [1]fsr1
 10797  0123  2974               	goto	i1l6405
 10798  0124                     i1l6375:	
 10799                           ;clock.c: 152: }
 10800                           
 10801                           
 10802                           ;clock.c: 153: else if(min < 0x25 || min >= 0x40)
 10803  0124  3025               	movlw	37
 10804  0125  0021               	movlb	1	; select bank1
 10805  0126  0248               	subwf	_min^(0+128),w
 10806  0127  1C03               	skipc
 10807  0128  292D               	goto	i1l6379
 10808  0129  3040               	movlw	64
 10809  012A  0248               	subwf	_min^(0+128),w
 10810  012B  1C03               	skipc
 10811  012C  2942               	goto	i1l6387
 10812  012D                     i1l6379:	
 10813                           
 10814                           ;clock.c: 154: {
 10815                           ;clock.c: 155: *(row++) = 2;
 10816  012D  3002               	movlw	2
 10817  012E  0020               	movlb	0	; select bank0
 10818  012F  00B2               	movwf	??i1_Clock_Display
 10819  0130  0836               	movf	i1Clock_Display@row,w
 10820  0131  0086               	movwf	6
 10821  0132  0187               	clrf	7
 10822  0133  0832               	movf	??i1_Clock_Display,w
 10823  0134  0081               	movwf	1
 10824  0135  3001               	movlw	1
 10825  0136  00B2               	movwf	??i1_Clock_Display
 10826  0137  0832               	movf	??i1_Clock_Display,w
 10827  0138  07B6               	addwf	i1Clock_Display@row,f
 10828                           
 10829                           ;clock.c: 156: *(col++) = 0x7C0;
 10830  0139  0835               	movf	i1Clock_Display@col,w
 10831  013A  0086               	movwf	6
 10832  013B  3001               	movlw	1	; select bank2/3
 10833  013C  0087               	movwf	7
 10834  013D  30C0               	movlw	192
 10835  013E  3FC0               	movwi [0]fsr1
 10836  013F  3007               	movlw	7
 10837  0140  3FC1               	movwi [1]fsr1
 10838  0141  2974               	goto	i1l6405
 10839  0142                     i1l6387:	
 10840                           ;clock.c: 157: }
 10841                           
 10842                           
 10843                           ;clock.c: 158: else if(min < 0x30 || min >= 0x35)
 10844  0142  3030               	movlw	48
 10845  0143  0021               	movlb	1	; select bank1
 10846  0144  0248               	subwf	_min^(0+128),w
 10847  0145  1C03               	skipc
 10848  0146  294B               	goto	i1l6391
 10849  0147  3035               	movlw	53
 10850  0148  0248               	subwf	_min^(0+128),w
 10851  0149  1C03               	skipc
 10852  014A  2960               	goto	i1l6399
 10853  014B                     i1l6391:	
 10854                           
 10855                           ;clock.c: 159: {
 10856                           ;clock.c: 160: *(row++) = 2;
 10857  014B  3002               	movlw	2
 10858  014C  0020               	movlb	0	; select bank0
 10859  014D  00B2               	movwf	??i1_Clock_Display
 10860  014E  0836               	movf	i1Clock_Display@row,w
 10861  014F  0086               	movwf	6
 10862  0150  0187               	clrf	7
 10863  0151  0832               	movf	??i1_Clock_Display,w
 10864  0152  0081               	movwf	1
 10865  0153  3001               	movlw	1
 10866  0154  00B2               	movwf	??i1_Clock_Display
 10867  0155  0832               	movf	??i1_Clock_Display,w
 10868  0156  07B6               	addwf	i1Clock_Display@row,f
 10869                           
 10870                           ;clock.c: 161: *(col++) = 0x400;
 10871  0157  0835               	movf	i1Clock_Display@col,w
 10872  0158  0086               	movwf	6
 10873  0159  3001               	movlw	1	; select bank2/3
 10874  015A  0087               	movwf	7
 10875  015B  3000               	movlw	0
 10876  015C  3FC0               	movwi [0]fsr1
 10877  015D  3004               	movlw	4
 10878  015E  3FC1               	movwi [1]fsr1
 10879  015F  2974               	goto	i1l6405
 10880  0160                     i1l6399:	
 10881                           ;clock.c: 162: }
 10882                           
 10883                           
 10884                           ;clock.c: 163: else
 10885                           ;clock.c: 164: {
 10886                           ;clock.c: 165: *(row++) = 3;
 10887  0160  3003               	movlw	3
 10888  0161  0020               	movlb	0	; select bank0
 10889  0162  00B2               	movwf	??i1_Clock_Display
 10890  0163  0836               	movf	i1Clock_Display@row,w
 10891  0164  0086               	movwf	6
 10892  0165  0187               	clrf	7
 10893  0166  0832               	movf	??i1_Clock_Display,w
 10894  0167  0081               	movwf	1
 10895  0168  3001               	movlw	1
 10896  0169  00B2               	movwf	??i1_Clock_Display
 10897  016A  0832               	movf	??i1_Clock_Display,w
 10898  016B  07B6               	addwf	i1Clock_Display@row,f
 10899                           
 10900                           ;clock.c: 166: *(col++) = 0x7F0;
 10901  016C  0835               	movf	i1Clock_Display@col,w
 10902  016D  0086               	movwf	6
 10903  016E  3001               	movlw	1	; select bank2/3
 10904  016F  0087               	movwf	7
 10905  0170  30F0               	movlw	240
 10906  0171  3FC0               	movwi [0]fsr1
 10907  0172  3007               	movlw	7
 10908  0173  3FC1               	movwi [1]fsr1
 10909  0174                     i1l6405:	
 10910  0174  3002               	movlw	2
 10911  0175  00B2               	movwf	??i1_Clock_Display
 10912  0176  0832               	movf	??i1_Clock_Display,w
 10913  0177  07B5               	addwf	i1Clock_Display@col,f
 10914                           
 10915                           ;clock.c: 167: }
 10916                           ;clock.c: 168: if(min >= 0x35)
 10917  0178  3035               	movlw	53
 10918  0179  0021               	movlb	1	; select bank1
 10919  017A  0248               	subwf	_min^(0+128),w
 10920  017B  1C03               	skipc
 10921  017C  29A7               	goto	i1l6423
 10922                           
 10923                           ;clock.c: 169: {
 10924                           ;clock.c: 170: if(min < 0x50 || min >= 0x55)
 10925  017D  3050               	movlw	80
 10926  017E  0248               	subwf	_min^(0+128),w
 10927  017F  1C03               	skipc
 10928  0180  2985               	goto	i1l6413
 10929  0181  3055               	movlw	85
 10930  0182  0248               	subwf	_min^(0+128),w
 10931  0183  1C03               	skipc
 10932  0184  299D               	goto	i1l6421
 10933  0185                     i1l6413:	
 10934                           
 10935                           ;clock.c: 171: {
 10936                           ;clock.c: 172: *(row++) = 3;
 10937  0185  3003               	movlw	3
 10938  0186  0020               	movlb	0	; select bank0
 10939  0187  00B2               	movwf	??i1_Clock_Display
 10940  0188  0836               	movf	i1Clock_Display@row,w
 10941  0189  0086               	movwf	6
 10942  018A  0187               	clrf	7
 10943  018B  0832               	movf	??i1_Clock_Display,w
 10944  018C  0081               	movwf	1
 10945  018D  3001               	movlw	1
 10946  018E  00B2               	movwf	??i1_Clock_Display
 10947  018F  0832               	movf	??i1_Clock_Display,w
 10948  0190  07B6               	addwf	i1Clock_Display@row,f
 10949                           
 10950                           ;clock.c: 173: *(col++) = 0x1FF;
 10951  0191  0835               	movf	i1Clock_Display@col,w
 10952  0192  0086               	movwf	6
 10953  0193  3001               	movlw	1	; select bank2/3
 10954  0194  0087               	movwf	7
 10955  0195  30FF               	movlw	255
 10956  0196  3FC0               	movwi [0]fsr1
 10957  0197  3001               	movlw	1
 10958  0198  3FC1               	movwi [1]fsr1
 10959  0199  3002               	movlw	2
 10960  019A  00B2               	movwf	??i1_Clock_Display
 10961  019B  0832               	movf	??i1_Clock_Display,w
 10962  019C  07B5               	addwf	i1Clock_Display@col,f
 10963  019D                     i1l6421:	
 10964                           
 10965                           ;clock.c: 174: }
 10966                           ;clock.c: 175: hourDisplay = IncHour(hourDisplay);
 10967  019D  0020               	movlb	0	; select bank0
 10968  019E  0834               	movf	i1Clock_Display@hourDisplay,w
 10969  019F  3189  2197  3180   	fcall	i1_IncHour
 10970  01A2  0020               	movlb	0	; select bank0
 10971  01A3  00B2               	movwf	??i1_Clock_Display
 10972  01A4  0832               	movf	??i1_Clock_Display,w
 10973  01A5  00B4               	movwf	i1Clock_Display@hourDisplay
 10974                           
 10975                           ;clock.c: 176: }
 10976  01A6  29DB               	goto	i1l6441
 10977  01A7                     i1l6423:	
 10978                           
 10979                           ;clock.c: 177: else
 10980                           ;clock.c: 178: {
 10981                           ;clock.c: 179: if(hourDisplay == 0x09)
 10982  01A7  3009               	movlw	9
 10983  01A8  0020               	movlb	0	; select bank0
 10984  01A9  0634               	xorwf	i1Clock_Display@hourDisplay,w
 10985  01AA  1D03               	btfss	3,2
 10986  01AB  29C4               	goto	i1l6433
 10987                           
 10988                           ;clock.c: 180: {
 10989                           ;clock.c: 181: hourDisplay = 13;
 10990  01AC  300D               	movlw	13
 10991  01AD  00B2               	movwf	??i1_Clock_Display
 10992  01AE  0832               	movf	??i1_Clock_Display,w
 10993  01AF  00B4               	movwf	i1Clock_Display@hourDisplay
 10994                           
 10995                           ;clock.c: 182: *(row++) = 4;
 10996  01B0  3004               	movlw	4
 10997  01B1  00B2               	movwf	??i1_Clock_Display
 10998  01B2  0836               	movf	i1Clock_Display@row,w
 10999  01B3  0086               	movwf	6
 11000  01B4  0187               	clrf	7
 11001  01B5  0832               	movf	??i1_Clock_Display,w
 11002  01B6  0081               	movwf	1
 11003  01B7  3001               	movlw	1
 11004  01B8  00B2               	movwf	??i1_Clock_Display
 11005  01B9  0832               	movf	??i1_Clock_Display,w
 11006  01BA  07B6               	addwf	i1Clock_Display@row,f
 11007                           
 11008                           ;clock.c: 183: *(col++) = 0x070;
 11009  01BB  0835               	movf	i1Clock_Display@col,w
 11010  01BC  0086               	movwf	6
 11011  01BD  3001               	movlw	1	; select bank2/3
 11012  01BE  0087               	movwf	7
 11013  01BF  3070               	movlw	112
 11014  01C0  3FC0               	movwi [0]fsr1
 11015  01C1  3000               	movlw	0
 11016  01C2  3FC1               	movwi [1]fsr1
 11017  01C3  29D7               	goto	i1l6439
 11018  01C4                     i1l6433:	
 11019                           ;clock.c: 184: }
 11020                           
 11021                           
 11022                           ;clock.c: 185: else
 11023                           ;clock.c: 186: {
 11024                           ;clock.c: 187: *(row++) = 4;
 11025  01C4  3004               	movlw	4
 11026  01C5  00B2               	movwf	??i1_Clock_Display
 11027  01C6  0836               	movf	i1Clock_Display@row,w
 11028  01C7  0086               	movwf	6
 11029  01C8  0187               	clrf	7
 11030  01C9  0832               	movf	??i1_Clock_Display,w
 11031  01CA  0081               	movwf	1
 11032  01CB  3001               	movlw	1
 11033  01CC  00B2               	movwf	??i1_Clock_Display
 11034  01CD  0832               	movf	??i1_Clock_Display,w
 11035  01CE  07B6               	addwf	i1Clock_Display@row,f
 11036                           
 11037                           ;clock.c: 188: *(col++) = 0x7F0;
 11038  01CF  0835               	movf	i1Clock_Display@col,w
 11039  01D0  0086               	movwf	6
 11040  01D1  3001               	movlw	1	; select bank2/3
 11041  01D2  0087               	movwf	7
 11042  01D3  30F0               	movlw	240
 11043  01D4  3FC0               	movwi [0]fsr1
 11044  01D5  3007               	movlw	7
 11045  01D6  3FC1               	movwi [1]fsr1
 11046  01D7                     i1l6439:	
 11047  01D7  3002               	movlw	2
 11048  01D8  00B2               	movwf	??i1_Clock_Display
 11049  01D9  0832               	movf	??i1_Clock_Display,w
 11050  01DA  07B5               	addwf	i1Clock_Display@col,f
 11051  01DB                     i1l6441:	
 11052                           
 11053                           ;clock.c: 189: }
 11054                           ;clock.c: 190: }
 11055                           ;clock.c: 191: }
 11056                           ;clock.c: 193: if(min < 0x05)
 11057  01DB  3005               	movlw	5
 11058  01DC  0021               	movlb	1	; select bank1
 11059  01DD  0248               	subwf	_min^(0+128),w
 11060  01DE  1803               	skipnc
 11061  01DF  2B05               	goto	i1l6559
 11062                           
 11063                           ;clock.c: 194: {
 11064                           ;clock.c: 195: if(hourDisplay == 10)
 11065  01E0  300A               	movlw	10
 11066  01E1  0020               	movlb	0	; select bank0
 11067  01E2  0634               	xorwf	i1Clock_Display@hourDisplay,w
 11068  01E3  1D03               	btfss	3,2
 11069  01E4  29F9               	goto	i1l6453
 11070                           
 11071                           ;clock.c: 196: {
 11072                           ;clock.c: 197: *(row++) = 9;
 11073  01E5  3009               	movlw	9
 11074  01E6  00B2               	movwf	??i1_Clock_Display
 11075  01E7  0836               	movf	i1Clock_Display@row,w
 11076  01E8  0086               	movwf	6
 11077  01E9  0187               	clrf	7
 11078  01EA  0832               	movf	??i1_Clock_Display,w
 11079  01EB  0081               	movwf	1
 11080  01EC  3001               	movlw	1
 11081  01ED  00B2               	movwf	??i1_Clock_Display
 11082  01EE  0832               	movf	??i1_Clock_Display,w
 11083  01EF  07B6               	addwf	i1Clock_Display@row,f
 11084                           
 11085                           ;clock.c: 198: *(col++) = 0x018;
 11086  01F0  0835               	movf	i1Clock_Display@col,w
 11087  01F1  0086               	movwf	6
 11088  01F2  3001               	movlw	1	; select bank2/3
 11089  01F3  0087               	movwf	7
 11090  01F4  3018               	movlw	24
 11091  01F5  3FC0               	movwi [0]fsr1
 11092  01F6  3000               	movlw	0
 11093  01F7  3FC1               	movwi [1]fsr1
 11094  01F8  2A0C               	goto	i1l6459
 11095  01F9                     i1l6453:	
 11096                           ;clock.c: 199: }
 11097                           
 11098                           
 11099                           ;clock.c: 200: else
 11100                           ;clock.c: 201: {
 11101                           ;clock.c: 202: *(row++) = 9;
 11102  01F9  3009               	movlw	9
 11103  01FA  00B2               	movwf	??i1_Clock_Display
 11104  01FB  0836               	movf	i1Clock_Display@row,w
 11105  01FC  0086               	movwf	6
 11106  01FD  0187               	clrf	7
 11107  01FE  0832               	movf	??i1_Clock_Display,w
 11108  01FF  0081               	movwf	1
 11109  0200  3001               	movlw	1
 11110  0201  00B2               	movwf	??i1_Clock_Display
 11111  0202  0832               	movf	??i1_Clock_Display,w
 11112  0203  07B6               	addwf	i1Clock_Display@row,f
 11113                           
 11114                           ;clock.c: 203: *(col++) = 0x01F;
 11115  0204  0835               	movf	i1Clock_Display@col,w
 11116  0205  0086               	movwf	6
 11117  0206  3001               	movlw	1	; select bank2/3
 11118  0207  0087               	movwf	7
 11119  0208  301F               	movlw	31
 11120  0209  3FC0               	movwi [0]fsr1
 11121  020A  3000               	movlw	0
 11122  020B  3FC1               	movwi [1]fsr1
 11123  020C                     i1l6459:	
 11124  020C  3002               	movlw	2
 11125  020D  00B2               	movwf	??i1_Clock_Display
 11126  020E  0832               	movf	??i1_Clock_Display,w
 11127  020F  07B5               	addwf	i1Clock_Display@col,f
 11128                           
 11129                           ;clock.c: 204: }
 11130                           ;clock.c: 205: }
 11131                           ;clock.c: 207: switch(hourDisplay)
 11132  0210  2B05               	goto	i1l6559
 11133  0211                     i1l6461:	
 11134                           ;clock.c: 208: {
 11135                           ;clock.c: 209: case 0x00:
 11136                           
 11137                           
 11138                           ;clock.c: 210: case 0x12:
 11139                           ;clock.c: 211: *(row++) = 8;
 11140  0211  3008               	movlw	8
 11141  0212  00B2               	movwf	??i1_Clock_Display
 11142  0213  0836               	movf	i1Clock_Display@row,w
 11143  0214  0086               	movwf	6
 11144  0215  0187               	clrf	7
 11145  0216  0832               	movf	??i1_Clock_Display,w
 11146  0217  0081               	movwf	1
 11147  0218  3001               	movlw	1
 11148  0219  00B2               	movwf	??i1_Clock_Display
 11149  021A  0832               	movf	??i1_Clock_Display,w
 11150  021B  07B6               	addwf	i1Clock_Display@row,f
 11151                           
 11152                           ;clock.c: 212: *(col++) = 0x01F;
 11153  021C  0835               	movf	i1Clock_Display@col,w
 11154  021D  0086               	movwf	6
 11155  021E  3001               	movlw	1	; select bank2/3
 11156  021F  0087               	movwf	7
 11157  0220  301F               	movlw	31
 11158  0221  3FC0               	movwi [0]fsr1
 11159  0222  3000               	movlw	0
 11160  0223  3FC1               	movwi [1]fsr1
 11161  0224  2B00               	goto	i1l6555
 11162  0225                     i1l6469:	
 11163                           ;clock.c: 214: case 0x01:
 11164                           
 11165                           ;clock.c: 213: break;
 11166                           
 11167                           
 11168                           ;clock.c: 215: *(row++) = 5;
 11169  0225  3005               	movlw	5
 11170  0226  00B2               	movwf	??i1_Clock_Display
 11171  0227  0836               	movf	i1Clock_Display@row,w
 11172  0228  0086               	movwf	6
 11173  0229  0187               	clrf	7
 11174  022A  0832               	movf	??i1_Clock_Display,w
 11175  022B  0081               	movwf	1
 11176  022C  3001               	movlw	1
 11177  022D  00B2               	movwf	??i1_Clock_Display
 11178  022E  0832               	movf	??i1_Clock_Display,w
 11179  022F  07B6               	addwf	i1Clock_Display@row,f
 11180                           
 11181                           ;clock.c: 216: *(col++) = 0x7F8;
 11182  0230  0835               	movf	i1Clock_Display@col,w
 11183  0231  0086               	movwf	6
 11184  0232  3001               	movlw	1	; select bank2/3
 11185  0233  0087               	movwf	7
 11186  0234  30F8               	movlw	248
 11187  0235  3FC0               	movwi [0]fsr1
 11188  0236  3007               	movlw	7
 11189  0237  3FC1               	movwi [1]fsr1
 11190  0238  2B00               	goto	i1l6555
 11191  0239                     i1l6477:	
 11192                           ;clock.c: 218: case 0x02:
 11193                           
 11194                           ;clock.c: 217: break;
 11195                           
 11196                           
 11197                           ;clock.c: 219: *(row++) = 6;
 11198  0239  3006               	movlw	6
 11199  023A  00B2               	movwf	??i1_Clock_Display
 11200  023B  0836               	movf	i1Clock_Display@row,w
 11201  023C  0086               	movwf	6
 11202  023D  0187               	clrf	7
 11203  023E  0832               	movf	??i1_Clock_Display,w
 11204  023F  0081               	movwf	1
 11205  0240  3001               	movlw	1
 11206  0241  00B2               	movwf	??i1_Clock_Display
 11207  0242  0832               	movf	??i1_Clock_Display,w
 11208  0243  07B6               	addwf	i1Clock_Display@row,f
 11209                           
 11210                           ;clock.c: 220: *(col++) = 0x0FF;
 11211  0244  0835               	movf	i1Clock_Display@col,w
 11212  0245  0086               	movwf	6
 11213  0246  3001               	movlw	1	; select bank2/3
 11214  0247  0087               	movwf	7
 11215  0248  30FF               	movlw	255
 11216  0249  3FC0               	movwi [0]fsr1
 11217  024A  3000               	movlw	0
 11218  024B  3FC1               	movwi [1]fsr1
 11219  024C  2B00               	goto	i1l6555
 11220  024D                     i1l6485:	
 11221                           ;clock.c: 222: case 0x03:
 11222                           
 11223                           ;clock.c: 221: break;
 11224                           
 11225                           
 11226                           ;clock.c: 223: *(row++) = 5;
 11227  024D  3005               	movlw	5
 11228  024E  00B2               	movwf	??i1_Clock_Display
 11229  024F  0836               	movf	i1Clock_Display@row,w
 11230  0250  0086               	movwf	6
 11231  0251  0187               	clrf	7
 11232  0252  0832               	movf	??i1_Clock_Display,w
 11233  0253  0081               	movwf	1
 11234  0254  3001               	movlw	1
 11235  0255  00B2               	movwf	??i1_Clock_Display
 11236  0256  0832               	movf	??i1_Clock_Display,w
 11237  0257  07B6               	addwf	i1Clock_Display@row,f
 11238                           
 11239                           ;clock.c: 224: *(col++) = 0x03F;
 11240  0258  0835               	movf	i1Clock_Display@col,w
 11241  0259  0086               	movwf	6
 11242  025A  3001               	movlw	1	; select bank2/3
 11243  025B  0087               	movwf	7
 11244  025C  303F               	movlw	63
 11245  025D  3FC0               	movwi [0]fsr1
 11246  025E  3000               	movlw	0
 11247  025F  3FC1               	movwi [1]fsr1
 11248  0260  2B00               	goto	i1l6555
 11249  0261                     i1l6493:	
 11250                           ;clock.c: 226: case 0x04:
 11251                           
 11252                           ;clock.c: 225: break;
 11253                           
 11254                           
 11255                           ;clock.c: 227: *(row++) = 6;
 11256  0261  3006               	movlw	6
 11257  0262  00B2               	movwf	??i1_Clock_Display
 11258  0263  0836               	movf	i1Clock_Display@row,w
 11259  0264  0086               	movwf	6
 11260  0265  0187               	clrf	7
 11261  0266  0832               	movf	??i1_Clock_Display,w
 11262  0267  0081               	movwf	1
 11263  0268  3001               	movlw	1
 11264  0269  00B2               	movwf	??i1_Clock_Display
 11265  026A  0832               	movf	??i1_Clock_Display,w
 11266  026B  07B6               	addwf	i1Clock_Display@row,f
 11267                           
 11268                           ;clock.c: 228: *(col++) = 0x7F0;
 11269  026C  0835               	movf	i1Clock_Display@col,w
 11270  026D  0086               	movwf	6
 11271  026E  3001               	movlw	1	; select bank2/3
 11272  026F  0087               	movwf	7
 11273  0270  30F0               	movlw	240
 11274  0271  3FC0               	movwi [0]fsr1
 11275  0272  3007               	movlw	7
 11276  0273  3FC1               	movwi [1]fsr1
 11277  0274  2B00               	goto	i1l6555
 11278  0275                     i1l6501:	
 11279                           ;clock.c: 230: case 0x05:
 11280                           
 11281                           ;clock.c: 229: break;
 11282                           
 11283                           
 11284                           ;clock.c: 231: *(row++) = 6;
 11285  0275  3006               	movlw	6
 11286  0276  00B2               	movwf	??i1_Clock_Display
 11287  0277  0836               	movf	i1Clock_Display@row,w
 11288  0278  0086               	movwf	6
 11289  0279  0187               	clrf	7
 11290  027A  0832               	movf	??i1_Clock_Display,w
 11291  027B  0081               	movwf	1
 11292  027C  3001               	movlw	1
 11293  027D  00B2               	movwf	??i1_Clock_Display
 11294  027E  0832               	movf	??i1_Clock_Display,w
 11295  027F  07B6               	addwf	i1Clock_Display@row,f
 11296                           
 11297                           ;clock.c: 232: *(col++) = 0x70F;
 11298  0280  0835               	movf	i1Clock_Display@col,w
 11299  0281  0086               	movwf	6
 11300  0282  3001               	movlw	1	; select bank2/3
 11301  0283  0087               	movwf	7
 11302  0284  300F               	movlw	15
 11303  0285  3FC0               	movwi [0]fsr1
 11304  0286  3007               	movlw	7
 11305  0287  3FC1               	movwi [1]fsr1
 11306  0288  2B00               	goto	i1l6555
 11307  0289                     i1l6509:	
 11308                           ;clock.c: 234: case 0x06:
 11309                           
 11310                           ;clock.c: 233: break;
 11311                           
 11312                           
 11313                           ;clock.c: 235: *(row++) = 5;
 11314  0289  3005               	movlw	5
 11315  028A  00B2               	movwf	??i1_Clock_Display
 11316  028B  0836               	movf	i1Clock_Display@row,w
 11317  028C  0086               	movwf	6
 11318  028D  0187               	clrf	7
 11319  028E  0832               	movf	??i1_Clock_Display,w
 11320  028F  0081               	movwf	1
 11321  0290  3001               	movlw	1
 11322  0291  00B2               	movwf	??i1_Clock_Display
 11323  0292  0832               	movf	??i1_Clock_Display,w
 11324  0293  07B6               	addwf	i1Clock_Display@row,f
 11325                           
 11326                           ;clock.c: 236: *(col++) = 0x7C7;
 11327  0294  0835               	movf	i1Clock_Display@col,w
 11328  0295  0086               	movwf	6
 11329  0296  3001               	movlw	1	; select bank2/3
 11330  0297  0087               	movwf	7
 11331  0298  30C7               	movlw	199
 11332  0299  3FC0               	movwi [0]fsr1
 11333  029A  3007               	movlw	7
 11334  029B  3FC1               	movwi [1]fsr1
 11335  029C  2B00               	goto	i1l6555
 11336  029D                     i1l6517:	
 11337                           ;clock.c: 238: case 0x07:
 11338                           
 11339                           ;clock.c: 237: break;
 11340                           
 11341                           
 11342                           ;clock.c: 239: *(row++) = 8;
 11343  029D  3008               	movlw	8
 11344  029E  00B2               	movwf	??i1_Clock_Display
 11345  029F  0836               	movf	i1Clock_Display@row,w
 11346  02A0  0086               	movwf	6
 11347  02A1  0187               	clrf	7
 11348  02A2  0832               	movf	??i1_Clock_Display,w
 11349  02A3  0081               	movwf	1
 11350  02A4  3001               	movlw	1
 11351  02A5  00B2               	movwf	??i1_Clock_Display
 11352  02A6  0832               	movf	??i1_Clock_Display,w
 11353  02A7  07B6               	addwf	i1Clock_Display@row,f
 11354                           
 11355                           ;clock.c: 240: *(col++) = 0x7E0;
 11356  02A8  0835               	movf	i1Clock_Display@col,w
 11357  02A9  0086               	movwf	6
 11358  02AA  3001               	movlw	1	; select bank2/3
 11359  02AB  0087               	movwf	7
 11360  02AC  30E0               	movlw	224
 11361  02AD  3FC0               	movwi [0]fsr1
 11362  02AE  3007               	movlw	7
 11363  02AF  3FC1               	movwi [1]fsr1
 11364  02B0  2B00               	goto	i1l6555
 11365  02B1                     i1l6525:	
 11366                           ;clock.c: 242: case 0x08:
 11367                           
 11368                           ;clock.c: 241: break;
 11369                           
 11370                           
 11371                           ;clock.c: 243: *(row++) = 7;
 11372  02B1  3007               	movlw	7
 11373  02B2  00B2               	movwf	??i1_Clock_Display
 11374  02B3  0836               	movf	i1Clock_Display@row,w
 11375  02B4  0086               	movwf	6
 11376  02B5  0187               	clrf	7
 11377  02B6  0832               	movf	??i1_Clock_Display,w
 11378  02B7  0081               	movwf	1
 11379  02B8  3001               	movlw	1
 11380  02B9  00B2               	movwf	??i1_Clock_Display
 11381  02BA  0832               	movf	??i1_Clock_Display,w
 11382  02BB  07B6               	addwf	i1Clock_Display@row,f
 11383                           
 11384                           ;clock.c: 244: *(col++) = 0x7E0;
 11385  02BC  0835               	movf	i1Clock_Display@col,w
 11386  02BD  0086               	movwf	6
 11387  02BE  3001               	movlw	1	; select bank2/3
 11388  02BF  0087               	movwf	7
 11389  02C0  30E0               	movlw	224
 11390  02C1  3FC0               	movwi [0]fsr1
 11391  02C2  3007               	movlw	7
 11392  02C3  3FC1               	movwi [1]fsr1
 11393  02C4  2B00               	goto	i1l6555
 11394  02C5                     i1l6533:	
 11395                           ;clock.c: 246: case 0x09:
 11396                           
 11397                           ;clock.c: 245: break;
 11398                           
 11399                           
 11400                           ;clock.c: 247: *(row++) = 4;
 11401  02C5  3004               	movlw	4
 11402  02C6  00B2               	movwf	??i1_Clock_Display
 11403  02C7  0836               	movf	i1Clock_Display@row,w
 11404  02C8  0086               	movwf	6
 11405  02C9  0187               	clrf	7
 11406  02CA  0832               	movf	??i1_Clock_Display,w
 11407  02CB  0081               	movwf	1
 11408  02CC  3001               	movlw	1
 11409  02CD  00B2               	movwf	??i1_Clock_Display
 11410  02CE  0832               	movf	??i1_Clock_Display,w
 11411  02CF  07B6               	addwf	i1Clock_Display@row,f
 11412                           
 11413                           ;clock.c: 248: *(col++) = 0x07F;
 11414  02D0  0835               	movf	i1Clock_Display@col,w
 11415  02D1  0086               	movwf	6
 11416  02D2  3001               	movlw	1	; select bank2/3
 11417  02D3  0087               	movwf	7
 11418  02D4  307F               	movlw	127
 11419  02D5  3FC0               	movwi [0]fsr1
 11420  02D6  3000               	movlw	0
 11421  02D7  3FC1               	movwi [1]fsr1
 11422  02D8  2B00               	goto	i1l6555
 11423  02D9                     i1l6541:	
 11424                           ;clock.c: 250: case 0x10:
 11425                           
 11426                           ;clock.c: 249: break;
 11427                           
 11428                           
 11429                           ;clock.c: 251: *(row++) = 9;
 11430  02D9  3009               	movlw	9
 11431  02DA  00B2               	movwf	??i1_Clock_Display
 11432  02DB  0836               	movf	i1Clock_Display@row,w
 11433  02DC  0086               	movwf	6
 11434  02DD  0187               	clrf	7
 11435  02DE  0832               	movf	??i1_Clock_Display,w
 11436  02DF  0081               	movwf	1
 11437  02E0  3001               	movlw	1
 11438  02E1  00B2               	movwf	??i1_Clock_Display
 11439  02E2  0832               	movf	??i1_Clock_Display,w
 11440  02E3  07B6               	addwf	i1Clock_Display@row,f
 11441                           
 11442                           ;clock.c: 252: *(col++) = 0x7F8;
 11443  02E4  0835               	movf	i1Clock_Display@col,w
 11444  02E5  0086               	movwf	6
 11445  02E6  3001               	movlw	1	; select bank2/3
 11446  02E7  0087               	movwf	7
 11447  02E8  30F8               	movlw	248
 11448  02E9  3FC0               	movwi [0]fsr1
 11449  02EA  3007               	movlw	7
 11450  02EB  3FC1               	movwi [1]fsr1
 11451  02EC  2B00               	goto	i1l6555
 11452  02ED                     i1l6549:	
 11453                           ;clock.c: 254: case 0x11:
 11454                           
 11455                           ;clock.c: 253: break;
 11456                           
 11457                           
 11458                           ;clock.c: 255: *(row++) = 7;
 11459  02ED  3007               	movlw	7
 11460  02EE  00B2               	movwf	??i1_Clock_Display
 11461  02EF  0836               	movf	i1Clock_Display@row,w
 11462  02F0  0086               	movwf	6
 11463  02F1  0187               	clrf	7
 11464  02F2  0832               	movf	??i1_Clock_Display,w
 11465  02F3  0081               	movwf	1
 11466  02F4  3001               	movlw	1
 11467  02F5  00B2               	movwf	??i1_Clock_Display
 11468  02F6  0832               	movf	??i1_Clock_Display,w
 11469  02F7  07B6               	addwf	i1Clock_Display@row,f
 11470                           
 11471                           ;clock.c: 256: *(col++) = 0x01F;
 11472  02F8  0835               	movf	i1Clock_Display@col,w
 11473  02F9  0086               	movwf	6
 11474  02FA  3001               	movlw	1	; select bank2/3
 11475  02FB  0087               	movwf	7
 11476  02FC  301F               	movlw	31
 11477  02FD  3FC0               	movwi [0]fsr1
 11478  02FE  3000               	movlw	0
 11479  02FF  3FC1               	movwi [1]fsr1
 11480  0300                     i1l6555:	
 11481  0300  3002               	movlw	2
 11482  0301  00B2               	movwf	??i1_Clock_Display
 11483  0302  0832               	movf	??i1_Clock_Display,w
 11484  0303  07B5               	addwf	i1Clock_Display@col,f
 11485                           
 11486                           ;clock.c: 258: }
 11487                           
 11488                           ;clock.c: 257: break;
 11489  0304  2B2F               	goto	i1l6561
 11490  0305                     i1l6559:	
 11491  0305  0020               	movlb	0	; select bank0
 11492  0306  0834               	movf	i1Clock_Display@hourDisplay,w
 11493                           
 11494                           ; Switch size 1, requested type "space"
 11495                           ; Number of cases is 13, Range of values is 0 to 18
 11496                           ; switch strategies available:
 11497                           ; Name         Instructions Cycles
 11498                           ; simple_byte           40    21 (average)
 11499                           ; direct_byte           44     6 (fixed)
 11500                           ; jumptable            260     6 (fixed)
 11501                           ;	Chosen strategy is simple_byte
 11502  0307  3A00               	xorlw	0	; case 0
 11503  0308  1903               	skipnz
 11504  0309  2A11               	goto	i1l6461
 11505  030A  3A01               	xorlw	1	; case 1
 11506  030B  1903               	skipnz
 11507  030C  2A25               	goto	i1l6469
 11508  030D  3A03               	xorlw	3	; case 2
 11509  030E  1903               	skipnz
 11510  030F  2A39               	goto	i1l6477
 11511  0310  3A01               	xorlw	1	; case 3
 11512  0311  1903               	skipnz
 11513  0312  2A4D               	goto	i1l6485
 11514  0313  3A07               	xorlw	7	; case 4
 11515  0314  1903               	skipnz
 11516  0315  2A61               	goto	i1l6493
 11517  0316  3A01               	xorlw	1	; case 5
 11518  0317  1903               	skipnz
 11519  0318  2A75               	goto	i1l6501
 11520  0319  3A03               	xorlw	3	; case 6
 11521  031A  1903               	skipnz
 11522  031B  2A89               	goto	i1l6509
 11523  031C  3A01               	xorlw	1	; case 7
 11524  031D  1903               	skipnz
 11525  031E  2A9D               	goto	i1l6517
 11526  031F  3A0F               	xorlw	15	; case 8
 11527  0320  1903               	skipnz
 11528  0321  2AB1               	goto	i1l6525
 11529  0322  3A01               	xorlw	1	; case 9
 11530  0323  1903               	skipnz
 11531  0324  2AC5               	goto	i1l6533
 11532  0325  3A19               	xorlw	25	; case 16
 11533  0326  1903               	skipnz
 11534  0327  2AD9               	goto	i1l6541
 11535  0328  3A01               	xorlw	1	; case 17
 11536  0329  1903               	skipnz
 11537  032A  2AED               	goto	i1l6549
 11538  032B  3A03               	xorlw	3	; case 18
 11539  032C  1903               	skipnz
 11540  032D  2A11               	goto	i1l6461
 11541  032E  2B2F               	goto	i1l6561
 11542  032F                     i1l6561:	
 11543                           
 11544                           ;clock.c: 260: *(row++) = -1;
 11545  032F  0836               	movf	i1Clock_Display@row,w
 11546  0330  0086               	movwf	6
 11547  0331  0187               	clrf	7
 11548  0332  0181               	clrf	1
 11549  0333  0381               	decf	1,f
 11550  0334  3001               	movlw	1
 11551  0335  00B2               	movwf	??i1_Clock_Display
 11552  0336  0832               	movf	??i1_Clock_Display,w
 11553  0337  07B6               	addwf	i1Clock_Display@row,f
 11554  0338  0008               	return
 11555  0339                     __end_ofi1_Clock_Display:	
 11556                           
 11557                           	psect	text41
 11558  0997                     __ptext41:	
 11559 ;; *************** function i1_IncHour *****************
 11560 ;; Defined at:
 11561 ;;		line 66 in file "clock.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;  in              1    wreg     unsigned char 
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;  in              1    0[COMMON] unsigned char 
 11566 ;; Return value:  Size  Location     Type
 11567 ;;                  1    wreg      unsigned char 
 11568 ;; Registers used:
 11569 ;;		wreg, status,2, status,0
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;Total ram usage:        1 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; This function calls:
 11582 ;;		Nothing
 11583 ;; This function is called by:
 11584 ;;		_Clock_Tap
 11585 ;;		i1_Clock_Display
 11586 ;; This function uses a non-reentrant model
 11587 ;;
 11588                           
 11589                           
 11590                           ;psect for function i1_IncHour
 11591  0997                     i1_IncHour:	
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in i1_IncHour: [wreg+status,2+status,0]
 11595                           ;i1IncHour@in stored from wreg
 11596  0997  00F0               	movwf	i1IncHour@in
 11597                           
 11598                           ;clock.c: 68: if(in == 0x09)
 11599  0998  3009               	movlw	9
 11600  0999  0670               	xorwf	i1IncHour@in,w
 11601  099A  1D03               	btfss	3,2
 11602  099B  299E               	goto	i1l2511
 11603                           
 11604                           ;clock.c: 69: return 0x10;
 11605  099C  3010               	movlw	16
 11606  099D  0008               	return
 11607  099E                     i1l2511:	
 11608                           
 11609                           ;clock.c: 70: else if(in == 0x12)
 11610  099E  3012               	movlw	18
 11611  099F  0670               	xorwf	i1IncHour@in,w
 11612  09A0  1D03               	btfss	3,2
 11613  09A1  29A4               	goto	i1l2519
 11614                           
 11615                           ;clock.c: 71: return 0x01;
 11616  09A2  3001               	movlw	1
 11617  09A3  0008               	return
 11618  09A4                     i1l2519:	
 11619                           
 11620                           ;clock.c: 72: else
 11621                           ;clock.c: 73: return in + 1;
 11622  09A4  0870               	movf	i1IncHour@in,w
 11623  09A5  3E01               	addlw	1
 11624  09A6  0008               	return
 11625  09A7                     __end_ofi1_IncHour:	
 11626                           
 11627                           	psect	text42
 11628  0AD7                     __ptext42:	
 11629 ;; *************** function i1_Clock_Read *****************
 11630 ;; Defined at:
 11631 ;;		line 105 in file "clock.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;		None
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  Clock_Read      3   15[BANK0 ] unsigned char [3]
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  1    wreg      void 
 11638 ;; Registers used:
 11639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;Total ram usage:        4 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    2
 11652 ;; This function calls:
 11653 ;;		i1_I2CRead
 11654 ;; This function is called by:
 11655 ;;		i1_Clock_Display
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           
 11660                           ;psect for function i1_Clock_Read
 11661  0AD7                     i1_Clock_Read:	
 11662                           
 11663                           ;clock.c: 107: uint8_t dataBuffer[3];
 11664                           ;clock.c: 109: I2CRead(dataBuffer, 0x00, 3, 0b1101111);
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in i1_Clock_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11668  0AD7  302F               	movlw	low i1Clock_Read@dataBuffer
 11669  0AD8  00F8               	movwf	i1I2CRead@pdata
 11670  0AD9  3000               	movlw	high i1Clock_Read@dataBuffer
 11671  0ADA  00F9               	movwf	i1I2CRead@pdata+1
 11672  0ADB  01FA               	clrf	i1I2CRead@registerAddress
 11673  0ADC  3003               	movlw	3
 11674  0ADD  0020               	movlb	0	; select bank0
 11675  0ADE  00AE               	movwf	??i1_Clock_Read
 11676  0ADF  082E               	movf	??i1_Clock_Read,w
 11677  0AE0  00FB               	movwf	i1I2CRead@length
 11678  0AE1  306F               	movlw	111
 11679  0AE2  00FC               	movwf	i1I2CRead@address
 11680  0AE3  3000               	movlw	0
 11681  0AE4  00FD               	movwf	i1I2CRead@address+1
 11682  0AE5  318C  2490         	fcall	i1_I2CRead
 11683                           
 11684                           ;clock.c: 110: sec = (dataBuffer[0] & 0x7f);
 11685  0AE7  0020               	movlb	0	; select bank0
 11686  0AE8  082F               	movf	i1Clock_Read@dataBuffer,w
 11687  0AE9  397F               	andlw	127
 11688  0AEA  00AE               	movwf	??i1_Clock_Read
 11689  0AEB  082E               	movf	??i1_Clock_Read,w
 11690  0AEC  0021               	movlb	1	; select bank1
 11691  0AED  00C9               	movwf	_sec^(0+128)
 11692                           
 11693                           ;clock.c: 111: min = dataBuffer[1];
 11694  0AEE  0020               	movlb	0	; select bank0
 11695  0AEF  0830               	movf	i1Clock_Read@dataBuffer+1,w
 11696  0AF0  00AE               	movwf	??i1_Clock_Read
 11697  0AF1  082E               	movf	??i1_Clock_Read,w
 11698  0AF2  0021               	movlb	1	; select bank1
 11699  0AF3  00C8               	movwf	_min^(0+128)
 11700                           
 11701                           ;clock.c: 112: hour = (dataBuffer[2] & 0x1F);
 11702  0AF4  0020               	movlb	0	; select bank0
 11703  0AF5  0831               	movf	i1Clock_Read@dataBuffer+2,w
 11704  0AF6  391F               	andlw	31
 11705  0AF7  00AE               	movwf	??i1_Clock_Read
 11706  0AF8  082E               	movf	??i1_Clock_Read,w
 11707  0AF9  0021               	movlb	1	; select bank1
 11708  0AFA  00DD               	movwf	_hour^(0+128)
 11709  0AFB  0008               	return
 11710  0AFC                     __end_ofi1_Clock_Read:	
 11711                           
 11712                           	psect	text43
 11713  0C90                     __ptext43:	
 11714 ;; *************** function i1_I2CRead *****************
 11715 ;; Defined at:
 11716 ;;		line 35 in file "lib.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  pdata           2    8[COMMON] PTR unsigned char 
 11719 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
 11720 ;;  registerAddr    1   10[COMMON] unsigned char 
 11721 ;;  length          1   11[COMMON] unsigned char 
 11722 ;;  address         2   12[COMMON] unsigned int 
 11723 ;; Auto vars:     Size  Location     Type
 11724 ;;  I2CRead        10    2[BANK0 ] struct .[2]
 11725 ;;  I2CRead         1   13[BANK0 ] enum E12012
 11726 ;;  I2CRead         1   12[BANK0 ] unsigned char [1]
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  1    wreg      void 
 11729 ;; Registers used:
 11730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11736 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11737 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Totals:         6      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;Total ram usage:       20 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    1
 11743 ;; This function calls:
 11744 ;;		i1_I2C_MasterReadTRBBuild
 11745 ;;		i1_I2C_MasterTRBInsert
 11746 ;;		i1_I2C_MasterWriteTRBBuild
 11747 ;; This function is called by:
 11748 ;;		i1_Clock_Read
 11749 ;; This function uses a non-reentrant model
 11750 ;;
 11751                           
 11752                           
 11753                           ;psect for function i1_I2CRead
 11754  0C90                     i1_I2CRead:	
 11755                           
 11756                           ;lib.c: 40: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
 11757                           
 11758                           ;incstack = 0
 11759                           ; Regs used in i1_I2CRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11760  0C90  3002               	movlw	2
 11761  0C91  0020               	movlb	0	; select bank0
 11762  0C92  00A0               	movwf	??i1_I2CRead
 11763  0C93  0820               	movf	??i1_I2CRead,w
 11764  0C94  00AD               	movwf	i1I2CRead@status
 11765                           
 11766                           ;lib.c: 41: I2C_TRANSACTION_REQUEST_BLOCK readTRB[2];
 11767                           ;lib.c: 42: uint8_t readBuffer[1];
 11768                           ;lib.c: 44: readBuffer[0] = registerAddress;
 11769  0C95  087A               	movf	i1I2CRead@registerAddress,w
 11770  0C96  00A0               	movwf	??i1_I2CRead
 11771  0C97  0820               	movf	??i1_I2CRead,w
 11772  0C98  00AC               	movwf	i1I2CRead@readBuffer
 11773                           
 11774                           ;lib.c: 46: I2C_MasterWriteTRBBuild( &readTRB[0],
 11775                           ;lib.c: 47: readBuffer,
 11776                           ;lib.c: 48: 1,
 11777                           ;lib.c: 49: address);
 11778  0C99  302C               	movlw	low i1I2CRead@readBuffer
 11779  0C9A  00F0               	movwf	i1I2C_MasterWriteTRBBuild@pdata
 11780  0C9B  3000               	movlw	high i1I2CRead@readBuffer
 11781  0C9C  00F1               	movwf	i1I2C_MasterWriteTRBBuild@pdata+1
 11782  0C9D  01F2               	clrf	i1I2C_MasterWriteTRBBuild@length
 11783  0C9E  0AF2               	incf	i1I2C_MasterWriteTRBBuild@length,f
 11784  0C9F  087D               	movf	i1I2CRead@address+1,w
 11785  0CA0  00F4               	movwf	i1I2C_MasterWriteTRBBuild@address+1
 11786  0CA1  087C               	movf	i1I2CRead@address,w
 11787  0CA2  00F3               	movwf	i1I2C_MasterWriteTRBBuild@address
 11788  0CA3  3022               	movlw	(low (i1I2CRead@readTRB| 0))& (0+255)
 11789  0CA4  318A  2276  318C   	fcall	i1_I2C_MasterWriteTRBBuild
 11790                           
 11791                           ;lib.c: 51: I2C_MasterReadTRBBuild( &readTRB[1],
 11792                           ;lib.c: 52: pdata,
 11793                           ;lib.c: 53: 2,
 11794                           ;lib.c: 54: address);
 11795  0CA7  0879               	movf	i1I2CRead@pdata+1,w
 11796  0CA8  00F1               	movwf	i1I2C_MasterReadTRBBuild@pdata+1
 11797  0CA9  0878               	movf	i1I2CRead@pdata,w
 11798  0CAA  00F0               	movwf	i1I2C_MasterReadTRBBuild@pdata
 11799  0CAB  3002               	movlw	2
 11800  0CAC  0020               	movlb	0	; select bank0
 11801  0CAD  00A0               	movwf	??i1_I2CRead
 11802  0CAE  0820               	movf	??i1_I2CRead,w
 11803  0CAF  00F2               	movwf	i1I2C_MasterReadTRBBuild@length
 11804  0CB0  087D               	movf	i1I2CRead@address+1,w
 11805  0CB1  00F4               	movwf	i1I2C_MasterReadTRBBuild@address+1
 11806  0CB2  087C               	movf	i1I2CRead@address,w
 11807  0CB3  00F3               	movwf	i1I2C_MasterReadTRBBuild@address
 11808  0CB4  3027               	movlw	(low ((i1I2CRead@readTRB| 0+5)))& (0+255)
 11809  0CB5  318A  22FC  318C   	fcall	i1_I2C_MasterReadTRBBuild
 11810  0CB8                     i1l6299:	
 11811                           ;lib.c: 56: while(status != I2C_MESSAGE_FAIL)
 11812                           
 11813  0CB8  0020               	movlb	0	; select bank0
 11814  0CB9  032D               	decf	i1I2CRead@status,w
 11815  0CBA  1903               	btfsc	3,2
 11816  0CBB  0008               	return
 11817                           
 11818                           ;lib.c: 57: {
 11819                           ;lib.c: 58: I2C_MasterTRBInsert(2, readTRB, &status);
 11820  0CBC  3022               	movlw	(low (i1I2CRead@readTRB| 0))& (0+255)
 11821  0CBD  0020               	movlb	0	; select bank0
 11822  0CBE  00A0               	movwf	??i1_I2CRead
 11823  0CBF  0820               	movf	??i1_I2CRead,w
 11824  0CC0  00F0               	movwf	i1I2C_MasterTRBInsert@ptrb_list
 11825  0CC1  302D               	movlw	(low (i1I2CRead@status| 0))& (0+255)
 11826  0CC2  00A1               	movwf	??i1_I2CRead+1
 11827  0CC3  0821               	movf	??i1_I2CRead+1,w
 11828  0CC4  00F1               	movwf	i1I2C_MasterTRBInsert@pflag
 11829  0CC5  3002               	movlw	2
 11830  0CC6  318D  2514  318C   	fcall	i1_I2C_MasterTRBInsert
 11831  0CC9                     i1l6293:	
 11832                           ;lib.c: 61: while(status == I2C_MESSAGE_PENDING);
 11833                           
 11834  0CC9  3002               	movlw	2
 11835  0CCA  0020               	movlb	0	; select bank0
 11836  0CCB  062D               	xorwf	i1I2CRead@status,w
 11837  0CCC  1903               	btfsc	3,2
 11838  0CCD  2CC9               	goto	i1l6293
 11839                           
 11840                           ;lib.c: 63: if (status == I2C_MESSAGE_COMPLETE)
 11841  0CCE  082D               	movf	i1I2CRead@status,w
 11842  0CCF  1903               	btfsc	3,2
 11843  0CD0  0008               	return
 11844  0CD1  2CB8               	goto	i1l6299
 11845  0CD2                     __end_ofi1_I2CRead:	
 11846                           ;lib.c: 64: break;
 11847                           
 11848                           
 11849                           	psect	text44
 11850  0A76                     __ptext44:	
 11851 ;; *************** function i1_I2C_MasterWriteTRBBuild *****************
 11852 ;; Defined at:
 11853 ;;		line 707 in file "mcc_generated_files/i2c.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  ptrb            1    wreg     PTR struct .
 11856 ;;		 -> I2CRead@readTRB(10), I2C_MasterWrite@trBlock(5), 
 11857 ;;  pdata           2    0[COMMON] PTR unsigned char 
 11858 ;;		 -> Acc_Initialize@writeBuffer(8), I2CRead@readBuffer(1), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5
      +), 
 11859 ;;		 -> LED_Initialize@writeBuffer(3), LED_Row@writeBuffer(3), 
 11860 ;;  length          1    2[COMMON] unsigned char 
 11861 ;;  address         2    3[COMMON] unsigned int 
 11862 ;; Auto vars:     Size  Location     Type
 11863 ;;  ptrb            1    7[COMMON] PTR struct .
 11864 ;;		 -> I2CRead@readTRB(10), I2C_MasterWrite@trBlock(5), 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  1    wreg      void 
 11867 ;; Registers used:
 11868 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11874 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;Total ram usage:        8 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		i1_I2CRead
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function i1_I2C_MasterWriteTRBBuild
 11889  0A76                     i1_I2C_MasterWriteTRBBuild:	
 11890                           
 11891                           ;incstack = 0
 11892                           ; Regs used in i1_I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 11893                           ;i1I2C_MasterWriteTRBBuild@ptrb stored from wreg
 11894  0A76  00F7               	movwf	i1I2C_MasterWriteTRBBuild@ptrb
 11895                           
 11896                           ;i2c.c: 713: ptrb->address = address << 1;
 11897  0A77  0874               	movf	i1I2C_MasterWriteTRBBuild@address+1,w
 11898  0A78  00F6               	movwf	??i1_I2C_MasterWriteTRBBuild+1
 11899  0A79  0873               	movf	i1I2C_MasterWriteTRBBuild@address,w
 11900  0A7A  00F5               	movwf	??i1_I2C_MasterWriteTRBBuild
 11901  0A7B  35F5               	lslf	??i1_I2C_MasterWriteTRBBuild,f
 11902  0A7C  0DF6               	rlf	??i1_I2C_MasterWriteTRBBuild+1,f
 11903  0A7D  0877               	movf	i1I2C_MasterWriteTRBBuild@ptrb,w
 11904  0A7E  0086               	movwf	6
 11905  0A7F  0187               	clrf	7
 11906  0A80  0875               	movf	??i1_I2C_MasterWriteTRBBuild,w
 11907  0A81  3FC0               	movwi [0]fsr1
 11908  0A82  0876               	movf	??i1_I2C_MasterWriteTRBBuild+1,w
 11909  0A83  3FC1               	movwi [1]fsr1
 11910                           
 11911                           ;i2c.c: 714: ptrb->length = length;
 11912  0A84  0872               	movf	i1I2C_MasterWriteTRBBuild@length,w
 11913  0A85  00F5               	movwf	??i1_I2C_MasterWriteTRBBuild
 11914  0A86  0877               	movf	i1I2C_MasterWriteTRBBuild@ptrb,w
 11915  0A87  3E02               	addlw	2
 11916  0A88  0086               	movwf	6
 11917  0A89  0187               	clrf	7
 11918  0A8A  0875               	movf	??i1_I2C_MasterWriteTRBBuild,w
 11919  0A8B  0081               	movwf	1
 11920                           
 11921                           ;i2c.c: 715: ptrb->pbuffer = pdata;
 11922  0A8C  0877               	movf	i1I2C_MasterWriteTRBBuild@ptrb,w
 11923  0A8D  3E03               	addlw	3
 11924  0A8E  0086               	movwf	6
 11925  0A8F  0187               	clrf	7
 11926  0A90  0870               	movf	i1I2C_MasterWriteTRBBuild@pdata,w
 11927  0A91  3FC0               	movwi [0]fsr1
 11928  0A92  0871               	movf	i1I2C_MasterWriteTRBBuild@pdata+1,w
 11929  0A93  3FC1               	movwi [1]fsr1
 11930  0A94  0008               	return
 11931  0A95                     __end_ofi1_I2C_MasterWriteTRBBuild:	
 11932                           
 11933                           	psect	text45
 11934  0D14                     __ptext45:	
 11935 ;; *************** function i1_I2C_MasterTRBInsert *****************
 11936 ;; Defined at:
 11937 ;;		line 641 in file "mcc_generated_files/i2c.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;  count           1    wreg     unsigned char 
 11940 ;;  ptrb_list       1    0[COMMON] PTR struct .
 11941 ;;		 -> I2CRead@readTRB(10), I2C_MasterRead@trBlock(5), I2C_MasterWrite@trBlock(5), 
 11942 ;;  pflag           1    1[COMMON] PTR enum E11987
 11943 ;;		 -> I2CRead@status(1), I2CWrite@status(1), 
 11944 ;; Auto vars:     Size  Location     Type
 11945 ;;  count           1    3[COMMON] unsigned char 
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  1    wreg      void 
 11948 ;; Registers used:
 11949 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11955 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;Total ram usage:        4 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; This function calls:
 11962 ;;		Nothing
 11963 ;; This function is called by:
 11964 ;;		i1_I2CRead
 11965 ;; This function uses a non-reentrant model
 11966 ;;
 11967                           
 11968                           
 11969                           ;psect for function i1_I2C_MasterTRBInsert
 11970  0D14                     i1_I2C_MasterTRBInsert:	
 11971                           
 11972                           ;incstack = 0
 11973                           ; Regs used in i1_I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
 11974                           ;i1I2C_MasterTRBInsert@count stored from wreg
 11975  0D14  00F3               	movwf	i1I2C_MasterTRBInsert@count
 11976                           
 11977                           ;i2c.c: 648: if (i2c_object.trStatus.s.full != 1)
 11978  0D15  0020               	movlb	0	; select bank0
 11979  0D16  183E               	btfsc	_i2c_object+2,0
 11980  0D17  2D48               	goto	i1l6273
 11981                           
 11982                           ;i2c.c: 649: {
 11983                           ;i2c.c: 650: *pflag = I2C_MESSAGE_PENDING;
 11984  0D18  3002               	movlw	2
 11985  0D19  00F2               	movwf	??i1_I2C_MasterTRBInsert
 11986  0D1A  0871               	movf	i1I2C_MasterTRBInsert@pflag,w
 11987  0D1B  0086               	movwf	6
 11988  0D1C  0187               	clrf	7
 11989  0D1D  0872               	movf	??i1_I2C_MasterTRBInsert,w
 11990  0D1E  0081               	movwf	1
 11991                           
 11992                           ;i2c.c: 652: i2c_object.pTrTail->ptrb_list = ptrb_list;
 11993  0D1F  0870               	movf	i1I2C_MasterTRBInsert@ptrb_list,w
 11994  0D20  00F2               	movwf	??i1_I2C_MasterTRBInsert
 11995  0D21  0A3C               	incf	_i2c_object,w
 11996  0D22  0086               	movwf	6
 11997  0D23  0187               	clrf	7
 11998  0D24  0872               	movf	??i1_I2C_MasterTRBInsert,w
 11999  0D25  0081               	movwf	1
 12000                           
 12001                           ;i2c.c: 653: i2c_object.pTrTail->count = count;
 12002  0D26  0873               	movf	i1I2C_MasterTRBInsert@count,w
 12003  0D27  00F2               	movwf	??i1_I2C_MasterTRBInsert
 12004  0D28  083C               	movf	_i2c_object,w
 12005  0D29  0086               	movwf	6
 12006  0D2A  0187               	clrf	7
 12007  0D2B  0872               	movf	??i1_I2C_MasterTRBInsert,w
 12008  0D2C  0081               	movwf	1
 12009                           
 12010                           ;i2c.c: 654: i2c_object.pTrTail->pTrFlag = pflag;
 12011  0D2D  083C               	movf	_i2c_object,w
 12012  0D2E  3E02               	addlw	2
 12013  0D2F  0086               	movwf	6
 12014  0D30  0187               	clrf	7
 12015  0D31  0871               	movf	i1I2C_MasterTRBInsert@pflag,w
 12016  0D32  3FC0               	movwi [0]fsr1
 12017  0D33  3000               	movlw	0
 12018  0D34  3FC1               	movwi [1]fsr1
 12019                           
 12020                           ;i2c.c: 655: i2c_object.pTrTail++;
 12021  0D35  3004               	movlw	4
 12022  0D36  00F2               	movwf	??i1_I2C_MasterTRBInsert
 12023  0D37  0872               	movf	??i1_I2C_MasterTRBInsert,w
 12024  0D38  07BC               	addwf	_i2c_object,f
 12025                           
 12026                           ;i2c.c: 658: if (i2c_object.pTrTail == (i2c_tr_queue + 1))
 12027  0D39  083C               	movf	_i2c_object,w
 12028  0D3A  3ADD               	xorlw	(low ((_i2c_tr_queue| 0+4)))& (0+255)
 12029  0D3B  1D03               	skipz
 12030  0D3C  2D41               	goto	i1l6269
 12031                           
 12032                           ;i2c.c: 659: {
 12033                           ;i2c.c: 661: i2c_object.pTrTail = i2c_tr_queue;
 12034  0D3D  30D9               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
 12035  0D3E  00F2               	movwf	??i1_I2C_MasterTRBInsert
 12036  0D3F  0872               	movf	??i1_I2C_MasterTRBInsert,w
 12037  0D40  00BC               	movwf	_i2c_object
 12038  0D41                     i1l6269:	
 12039                           
 12040                           ;i2c.c: 662: }
 12041                           ;i2c.c: 666: i2c_object.trStatus.s.empty = 0;
 12042  0D41  10BE               	bcf	_i2c_object+2,1
 12043                           
 12044                           ;i2c.c: 669: if (i2c_object.pTrHead == i2c_object.pTrTail)
 12045  0D42  083D               	movf	low ((_i2c_object| 0+1)),w
 12046  0D43  063C               	xorwf	_i2c_object,w
 12047  0D44  1D03               	skipz
 12048  0D45  2D4D               	goto	i1l6275
 12049                           
 12050                           ;i2c.c: 670: {
 12051                           ;i2c.c: 672: i2c_object.trStatus.s.full = 1;
 12052  0D46  143E               	bsf	_i2c_object+2,0
 12053                           
 12054                           ;i2c.c: 673: }
 12055                           ;i2c.c: 675: }
 12056  0D47  2D4D               	goto	i1l6275
 12057  0D48                     i1l6273:	
 12058                           
 12059                           ;i2c.c: 676: else
 12060                           ;i2c.c: 677: {
 12061                           ;i2c.c: 678: *pflag = I2C_MESSAGE_FAIL;
 12062  0D48  0871               	movf	i1I2C_MasterTRBInsert@pflag,w
 12063  0D49  0086               	movwf	6
 12064  0D4A  0187               	clrf	7
 12065  0D4B  0181               	clrf	1
 12066  0D4C  0A81               	incf	1,f
 12067  0D4D                     i1l6275:	
 12068                           
 12069                           ;i2c.c: 679: }
 12070                           ;i2c.c: 682: if (*pflag == I2C_MESSAGE_PENDING)
 12071  0D4D  0871               	movf	i1I2C_MasterTRBInsert@pflag,w
 12072  0D4E  0086               	movwf	6
 12073  0D4F  0187               	clrf	7
 12074  0D50  3002               	movlw	2
 12075  0D51  0601               	xorwf	1,w
 12076  0D52  1D03               	btfss	3,2
 12077  0D53  0008               	return
 12078  0D54                     i1l6279:	
 12079                           ;i2c.c: 683: {
 12080                           ;i2c.c: 684: while(i2c_state != S_MASTER_IDLE);
 12081                           
 12082  0D54  084F               	movf	_i2c_state,w
 12083  0D55  1D03               	btfss	3,2
 12084  0D56  2D54               	goto	i1l6279
 12085                           
 12086                           ;i2c.c: 685: {
 12087                           ;i2c.c: 688: PIR1bits.SSP1IF = 1;
 12088  0D57  1590               	bsf	16,3	;volatile
 12089  0D58  0008               	return
 12090  0D59                     __end_ofi1_I2C_MasterTRBInsert:	
 12091                           
 12092                           	psect	text46
 12093  0AFC                     __ptext46:	
 12094 ;; *************** function i1_I2C_MasterReadTRBBuild *****************
 12095 ;; Defined at:
 12096 ;;		line 694 in file "mcc_generated_files/i2c.c"
 12097 ;; Parameters:    Size  Location     Type
 12098 ;;  ptrb            1    wreg     PTR struct .
 12099 ;;		 -> I2CRead@readTRB(10), I2C_MasterRead@trBlock(5), 
 12100 ;;  pdata           2    0[COMMON] PTR unsigned char 
 12101 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
 12102 ;;  length          1    2[COMMON] unsigned char 
 12103 ;;  address         2    3[COMMON] unsigned int 
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  ptrb            1    7[COMMON] PTR struct .
 12106 ;;		 -> I2CRead@readTRB(10), I2C_MasterRead@trBlock(5), 
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  1    wreg      void 
 12109 ;; Registers used:
 12110 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12111 ;; Tracked objects:
 12112 ;;		On entry : 0/0
 12113 ;;		On exit  : 0/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12116 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12119 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12120 ;;Total ram usage:        8 bytes
 12121 ;; Hardware stack levels used:    1
 12122 ;; This function calls:
 12123 ;;		Nothing
 12124 ;; This function is called by:
 12125 ;;		i1_I2CRead
 12126 ;; This function uses a non-reentrant model
 12127 ;;
 12128                           
 12129                           
 12130                           ;psect for function i1_I2C_MasterReadTRBBuild
 12131  0AFC                     i1_I2C_MasterReadTRBBuild:	
 12132                           
 12133                           ;incstack = 0
 12134                           ; Regs used in i1_I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
 12135                           ;i1I2C_MasterReadTRBBuild@ptrb stored from wreg
 12136  0AFC  00F7               	movwf	i1I2C_MasterReadTRBBuild@ptrb
 12137                           
 12138                           ;i2c.c: 700: ptrb->address = address << 1;
 12139  0AFD  0874               	movf	i1I2C_MasterReadTRBBuild@address+1,w
 12140  0AFE  00F6               	movwf	??i1_I2C_MasterReadTRBBuild+1
 12141  0AFF  0873               	movf	i1I2C_MasterReadTRBBuild@address,w
 12142  0B00  00F5               	movwf	??i1_I2C_MasterReadTRBBuild
 12143  0B01  35F5               	lslf	??i1_I2C_MasterReadTRBBuild,f
 12144  0B02  0DF6               	rlf	??i1_I2C_MasterReadTRBBuild+1,f
 12145  0B03  0877               	movf	i1I2C_MasterReadTRBBuild@ptrb,w
 12146  0B04  0086               	movwf	6
 12147  0B05  0187               	clrf	7
 12148  0B06  0875               	movf	??i1_I2C_MasterReadTRBBuild,w
 12149  0B07  3FC0               	movwi [0]fsr1
 12150  0B08  0876               	movf	??i1_I2C_MasterReadTRBBuild+1,w
 12151  0B09  3FC1               	movwi [1]fsr1
 12152                           
 12153                           ;i2c.c: 702: ptrb->address |= 0x01;
 12154  0B0A  0877               	movf	i1I2C_MasterReadTRBBuild@ptrb,w
 12155  0B0B  0086               	movwf	6
 12156  0B0C  0187               	clrf	7
 12157  0B0D  3001               	movlw	1
 12158  0B0E  0481               	iorwf	1,f
 12159  0B0F  3141               	addfsr 1,1
 12160  0B10  3000               	movlw	0
 12161  0B11  0481               	iorwf	1,f
 12162                           
 12163                           ;i2c.c: 703: ptrb->length = length;
 12164  0B12  0872               	movf	i1I2C_MasterReadTRBBuild@length,w
 12165  0B13  00F5               	movwf	??i1_I2C_MasterReadTRBBuild
 12166  0B14  0877               	movf	i1I2C_MasterReadTRBBuild@ptrb,w
 12167  0B15  3E02               	addlw	2
 12168  0B16  0086               	movwf	6
 12169  0B17  0187               	clrf	7
 12170  0B18  0875               	movf	??i1_I2C_MasterReadTRBBuild,w
 12171  0B19  0081               	movwf	1
 12172                           
 12173                           ;i2c.c: 704: ptrb->pbuffer = pdata;
 12174  0B1A  0877               	movf	i1I2C_MasterReadTRBBuild@ptrb,w
 12175  0B1B  3E03               	addlw	3
 12176  0B1C  0086               	movwf	6
 12177  0B1D  0187               	clrf	7
 12178  0B1E  0870               	movf	i1I2C_MasterReadTRBBuild@pdata,w
 12179  0B1F  3FC0               	movwi [0]fsr1
 12180  0B20  0871               	movf	i1I2C_MasterReadTRBBuild@pdata+1,w
 12181  0B21  3FC1               	movwi [1]fsr1
 12182  0B22  0008               	return
 12183  0B23                     __end_ofi1_I2C_MasterReadTRBBuild:	
 12184                           
 12185                           	psect	text47
 12186  05D9                     __ptext47:	
 12187 ;; *************** function _I2C_ISR *****************
 12188 ;; Defined at:
 12189 ;;		line 233 in file "mcc_generated_files/i2c.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;		None
 12192 ;; Auto vars:     Size  Location     Type
 12193 ;;		None
 12194 ;; Return value:  Size  Location     Type
 12195 ;;                  1    wreg      void 
 12196 ;; Registers used:
 12197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;Total ram usage:        4 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; Hardware stack levels required when called:    1
 12210 ;; This function calls:
 12211 ;;		_I2C_FunctionComplete
 12212 ;;		_I2C_Stop
 12213 ;; This function is called by:
 12214 ;;		_INTERRUPT_InterruptManager
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           
 12219                           ;psect for function _I2C_ISR
 12220  05D9                     _I2C_ISR:	
 12221                           
 12222                           ;i2c.c: 236: static uint8_t *pi2c_buf_ptr;
 12223                           ;i2c.c: 237: static uint16_t i2c_address = 0;
 12224                           ;i2c.c: 238: static uint8_t i2c_bytes_left = 0;
 12225                           ;i2c.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 12226                           ;i2c.c: 241: PIR1bits.SSP1IF = 0;
 12227                           
 12228                           ;incstack = 0
 12229                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12230  05D9  0020               	movlb	0	; select bank0
 12231  05DA  1190               	bcf	16,3	;volatile
 12232                           
 12233                           ;i2c.c: 245: if(SSP1CON1bits.WCOL)
 12234  05DB  0024               	movlb	4	; select bank4
 12235  05DC  1F95               	btfss	21,7	;volatile
 12236  05DD  2F15               	goto	i1l6975
 12237                           
 12238                           ;i2c.c: 246: {
 12239                           ;i2c.c: 248: SSP1CON1bits.WCOL = 0;
 12240  05DE  1395               	bcf	21,7	;volatile
 12241                           
 12242                           ;i2c.c: 249: i2c_state = S_MASTER_IDLE;
 12243  05DF  0020               	movlb	0	; select bank0
 12244  05E0  01CF               	clrf	_i2c_state
 12245                           
 12246                           ;i2c.c: 250: *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 12247  05E1  084C               	movf	_p_i2c_current,w
 12248  05E2  3E02               	addlw	2
 12249  05E3  0086               	movwf	6
 12250  05E4  0187               	clrf	7
 12251  05E5  3F40               	moviw [0]fsr1
 12252  05E6  00F3               	movwf	??_I2C_ISR
 12253  05E7  3F41               	moviw [1]fsr1
 12254  05E8  00F4               	movwf	??_I2C_ISR+1
 12255  05E9  0873               	movf	??_I2C_ISR,w
 12256  05EA  0086               	movwf	6
 12257  05EB  0874               	movf	??_I2C_ISR+1,w
 12258  05EC  0087               	movwf	7
 12259  05ED  3001               	movlw	1
 12260  05EE  0081               	movwf	1
 12261                           
 12262                           ;i2c.c: 253: p_i2c_current = (0);
 12263  05EF  01CC               	clrf	_p_i2c_current
 12264                           
 12265                           ;i2c.c: 255: return;
 12266  05F0  0008               	return
 12267  05F1                     i1l181:	
 12268                           ;i2c.c: 260: {
 12269                           ;i2c.c: 261: case S_MASTER_IDLE:
 12270                           
 12271                           ;i2c.c: 256: }
 12272                           ;i2c.c: 259: switch(i2c_state)
 12273                           
 12274                           
 12275                           ;i2c.c: 263: if(i2c_object.trStatus.s.empty != 1)
 12276  05F1  18BE               	btfsc	_i2c_object+2,1
 12277  05F2  0008               	return
 12278                           
 12279                           ;i2c.c: 264: {
 12280                           ;i2c.c: 266: p_i2c_current = i2c_object.pTrHead;
 12281  05F3  083D               	movf	low ((_i2c_object| 0+1)),w
 12282  05F4  00F3               	movwf	??_I2C_ISR
 12283  05F5  0873               	movf	??_I2C_ISR,w
 12284  05F6  00CC               	movwf	_p_i2c_current
 12285                           
 12286                           ;i2c.c: 267: i2c_trb_count = i2c_object.pTrHead->count;
 12287  05F7  083D               	movf	low ((_i2c_object| 0+1)),w
 12288  05F8  0086               	movwf	6
 12289  05F9  0187               	clrf	7
 12290  05FA  0801               	movf	1,w
 12291  05FB  00F3               	movwf	??_I2C_ISR
 12292  05FC  0873               	movf	??_I2C_ISR,w
 12293  05FD  00CE               	movwf	_i2c_trb_count
 12294                           
 12295                           ;i2c.c: 268: p_i2c_trb_current = i2c_object.pTrHead->ptrb_list;
 12296  05FE  083D               	movf	low ((_i2c_object| 0+1)),w
 12297  05FF  0086               	movwf	6
 12298  0600  0187               	clrf	7
 12299  0601  3F41               	moviw [1]fsr1
 12300  0602  00CD               	movwf	_p_i2c_trb_current
 12301                           
 12302                           ;i2c.c: 270: i2c_object.pTrHead++;
 12303  0603  3004               	movlw	4
 12304  0604  00F3               	movwf	??_I2C_ISR
 12305  0605  0873               	movf	??_I2C_ISR,w
 12306  0606  07BD               	addwf	low ((_i2c_object| 0+1)),f
 12307                           
 12308                           ;i2c.c: 273: if(i2c_object.pTrHead == (i2c_tr_queue + 1))
 12309  0607  083D               	movf	low ((_i2c_object| 0+1)),w
 12310  0608  3ADD               	xorlw	(low ((_i2c_tr_queue| 0+4)))& (0+255)
 12311  0609  1D03               	skipz
 12312  060A  2E0F               	goto	i1l6865
 12313                           
 12314                           ;i2c.c: 274: {
 12315                           ;i2c.c: 276: i2c_object.pTrHead = i2c_tr_queue;
 12316  060B  30D9               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
 12317  060C  00F3               	movwf	??_I2C_ISR
 12318  060D  0873               	movf	??_I2C_ISR,w
 12319  060E  00BD               	movwf	low ((_i2c_object| 0+1))
 12320  060F                     i1l6865:	
 12321                           
 12322                           ;i2c.c: 277: }
 12323                           ;i2c.c: 281: i2c_object.trStatus.s.full = 0;
 12324  060F  103E               	bcf	_i2c_object+2,0
 12325                           
 12326                           ;i2c.c: 284: if(i2c_object.pTrHead == i2c_object.pTrTail)
 12327  0610  083D               	movf	low ((_i2c_object| 0+1)),w
 12328  0611  063C               	xorwf	_i2c_object,w
 12329  0612  1903               	btfsc	3,2
 12330                           
 12331                           ;i2c.c: 285: {
 12332                           ;i2c.c: 287: i2c_object.trStatus.s.empty = 1;
 12333  0613  14BE               	bsf	_i2c_object+2,1
 12334                           
 12335                           ;i2c.c: 288: }
 12336                           ;i2c.c: 291: SSP1CON2bits.SEN = 1;
 12337  0614  0024               	movlb	4	; select bank4
 12338  0615  1416               	bsf	22,0	;volatile
 12339                           
 12340                           ;i2c.c: 294: i2c_state = S_MASTER_SEND_ADDR;
 12341  0616  3002               	movlw	2
 12342  0617  00F3               	movwf	??_I2C_ISR
 12343  0618  0873               	movf	??_I2C_ISR,w
 12344  0619  0020               	movlb	0	; select bank0
 12345  061A  00CF               	movwf	_i2c_state
 12346                           
 12347                           ;i2c.c: 295: }
 12348                           ;i2c.c: 297: break;
 12349  061B  0008               	return
 12350  061C                     i1l186:	
 12351                           ;i2c.c: 299: case S_MASTER_RESTART:
 12352                           
 12353                           
 12354                           ;i2c.c: 304: SSP1CON2bits.RSEN = 1;
 12355  061C  0024               	movlb	4	; select bank4
 12356  061D  1496               	bsf	22,1	;volatile
 12357                           
 12358                           ;i2c.c: 307: i2c_state = S_MASTER_SEND_ADDR;
 12359  061E  3002               	movlw	2
 12360  061F  00F3               	movwf	??_I2C_ISR
 12361  0620  0873               	movf	??_I2C_ISR,w
 12362  0621  0020               	movlb	0	; select bank0
 12363  0622  00CF               	movwf	_i2c_state
 12364                           
 12365                           ;i2c.c: 309: break;
 12366  0623  0008               	return
 12367  0624                     i1l187:	
 12368                           ;i2c.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 12369                           
 12370                           
 12371                           ;i2c.c: 313: if(SSP1CON2bits.ACKSTAT)
 12372  0624  0024               	movlb	4	; select bank4
 12373  0625  1F16               	btfss	22,6	;volatile
 12374  0626  2E30               	goto	i1l6877
 12375                           
 12376                           ;i2c.c: 314: {
 12377                           ;i2c.c: 315: i2c_object.i2cErrors++;
 12378  0627  3001               	movlw	1
 12379  0628  00F3               	movwf	??_I2C_ISR
 12380  0629  0873               	movf	??_I2C_ISR,w
 12381  062A  0020               	movlb	0	; select bank0
 12382  062B  07C0               	addwf	_i2c_object+4,f
 12383                           
 12384                           ;i2c.c: 316: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 12385  062C  3004               	movlw	4
 12386  062D  318A  225A         	fcall	_I2C_Stop
 12387                           
 12388                           ;i2c.c: 317: }
 12389  062F  0008               	return
 12390  0630                     i1l6877:	
 12391                           
 12392                           ;i2c.c: 318: else
 12393                           ;i2c.c: 319: {
 12394                           ;i2c.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 12395  0630  0020               	movlb	0	; select bank0
 12396  0631  0851               	movf	I2C_ISR@i2c_address+1,w
 12397  0632  00F4               	movwf	??_I2C_ISR+1
 12398  0633  0850               	movf	I2C_ISR@i2c_address,w
 12399  0634  00F3               	movwf	??_I2C_ISR
 12400  0635  36F4               	lsrf	??_I2C_ISR+1,f
 12401  0636  0CF3               	rrf	??_I2C_ISR,f
 12402  0637  0873               	movf	??_I2C_ISR,w
 12403  0638  0024               	movlb	4	; select bank4
 12404  0639  0091               	movwf	17	;volatile
 12405                           
 12406                           ;i2c.c: 324: if(i2c_address & 0x01)
 12407  063A  0020               	movlb	0	; select bank0
 12408  063B  1C50               	btfss	I2C_ISR@i2c_address,0
 12409  063C  2E42               	goto	i1l6883
 12410                           
 12411                           ;i2c.c: 325: {
 12412                           ;i2c.c: 328: i2c_state = S_MASTER_10BIT_RESTART;
 12413  063D  300B               	movlw	11
 12414  063E  00F3               	movwf	??_I2C_ISR
 12415  063F  0873               	movf	??_I2C_ISR,w
 12416  0640  00CF               	movwf	_i2c_state
 12417                           
 12418                           ;i2c.c: 329: }
 12419  0641  0008               	return
 12420  0642                     i1l6883:	
 12421                           
 12422                           ;i2c.c: 330: else
 12423                           ;i2c.c: 331: {
 12424                           ;i2c.c: 333: i2c_state = S_MASTER_SEND_DATA;
 12425  0642  3003               	movlw	3
 12426  0643  00F3               	movwf	??_I2C_ISR
 12427  0644  0873               	movf	??_I2C_ISR,w
 12428  0645  00CF               	movwf	_i2c_state
 12429                           
 12430                           ;i2c.c: 334: }
 12431                           ;i2c.c: 335: }
 12432                           ;i2c.c: 337: break;
 12433  0646  0008               	return
 12434  0647                     i1l192:	
 12435                           ;i2c.c: 339: case S_MASTER_10BIT_RESTART:
 12436                           
 12437                           
 12438                           ;i2c.c: 341: if(SSP1CON2bits.ACKSTAT)
 12439  0647  0024               	movlb	4	; select bank4
 12440  0648  1F16               	btfss	22,6	;volatile
 12441  0649  2E53               	goto	i1l193
 12442                           
 12443                           ;i2c.c: 342: {
 12444                           ;i2c.c: 343: i2c_object.i2cErrors++;
 12445  064A  3001               	movlw	1
 12446  064B  00F3               	movwf	??_I2C_ISR
 12447  064C  0873               	movf	??_I2C_ISR,w
 12448  064D  0020               	movlb	0	; select bank0
 12449  064E  07C0               	addwf	_i2c_object+4,f
 12450                           
 12451                           ;i2c.c: 344: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 12452  064F  3004               	movlw	4
 12453  0650  318A  225A         	fcall	_I2C_Stop
 12454                           
 12455                           ;i2c.c: 345: }
 12456  0652  0008               	return
 12457  0653                     i1l193:	
 12458                           
 12459                           ;i2c.c: 346: else
 12460                           ;i2c.c: 347: {
 12461                           ;i2c.c: 350: SSP1CON2bits.RSEN = 1;
 12462  0653  1496               	bsf	22,1	;volatile
 12463                           
 12464                           ;i2c.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 12465  0654  0020               	movlb	0	; select bank0
 12466  0655  0851               	movf	I2C_ISR@i2c_address+1,w
 12467  0656  00F4               	movwf	??_I2C_ISR+1
 12468  0657  0850               	movf	I2C_ISR@i2c_address,w
 12469  0658  00F3               	movwf	??_I2C_ISR
 12470  0659  0874               	movf	??_I2C_ISR+1,w
 12471  065A  00F3               	movwf	??_I2C_ISR
 12472  065B  01F4               	clrf	??_I2C_ISR+1
 12473  065C  3006               	movlw	6
 12474  065D  0573               	andwf	??_I2C_ISR,w
 12475  065E  00F5               	movwf	??_I2C_ISR+2
 12476  065F  3000               	movlw	0
 12477  0660  0574               	andwf	??_I2C_ISR+1,w
 12478  0661  00F6               	movwf	??_I2C_ISR+3
 12479  0662  30F0               	movlw	240
 12480  0663  0475               	iorwf	??_I2C_ISR+2,w
 12481  0664  00D0               	movwf	I2C_ISR@i2c_address
 12482  0665  3000               	movlw	0
 12483  0666  0476               	iorwf	??_I2C_ISR+3,w
 12484  0667  00D1               	movwf	I2C_ISR@i2c_address+1
 12485                           
 12486                           ;i2c.c: 357: i2c_address |= 0x0001;
 12487  0668  1450               	bsf	I2C_ISR@i2c_address,0
 12488                           
 12489                           ;i2c.c: 360: i2c_10bit_address_restart = 1;
 12490  0669  01CA               	clrf	I2C_ISR@i2c_10bit_address_restart
 12491  066A  0ACA               	incf	I2C_ISR@i2c_10bit_address_restart,f
 12492                           
 12493                           ;i2c.c: 363: i2c_state = S_MASTER_SEND_ADDR;
 12494  066B  3002               	movlw	2
 12495  066C  00F3               	movwf	??_I2C_ISR
 12496  066D  0873               	movf	??_I2C_ISR,w
 12497  066E  00CF               	movwf	_i2c_state
 12498                           
 12499                           ;i2c.c: 364: }
 12500                           ;i2c.c: 366: break;
 12501  066F  0008               	return
 12502  0670                     i1l6897:	
 12503                           ;i2c.c: 368: case S_MASTER_SEND_ADDR:
 12504                           
 12505                           
 12506                           ;i2c.c: 381: if(i2c_10bit_address_restart != 1)
 12507  0670  034A               	decf	I2C_ISR@i2c_10bit_address_restart,w
 12508  0671  1903               	btfsc	3,2
 12509  0672  2E87               	goto	i1l6915
 12510                           
 12511                           ;i2c.c: 382: {
 12512                           ;i2c.c: 384: i2c_address = p_i2c_trb_current->address;
 12513  0673  084D               	movf	_p_i2c_trb_current,w
 12514  0674  0086               	movwf	6
 12515  0675  0187               	clrf	7
 12516  0676  3F40               	moviw [0]fsr1
 12517  0677  00D0               	movwf	I2C_ISR@i2c_address
 12518  0678  3F41               	moviw [1]fsr1
 12519  0679  00D1               	movwf	I2C_ISR@i2c_address+1
 12520                           
 12521                           ;i2c.c: 385: pi2c_buf_ptr = p_i2c_trb_current->pbuffer;
 12522  067A  084D               	movf	_p_i2c_trb_current,w
 12523  067B  3E03               	addlw	3
 12524  067C  0086               	movwf	6
 12525  067D  0187               	clrf	7
 12526  067E  3F40               	moviw [0]fsr1
 12527  067F  00C3               	movwf	I2C_ISR@pi2c_buf_ptr
 12528  0680  3F41               	moviw [1]fsr1
 12529  0681  00C4               	movwf	I2C_ISR@pi2c_buf_ptr+1
 12530                           
 12531                           ;i2c.c: 386: i2c_bytes_left = p_i2c_trb_current->length;
 12532  0682  084D               	movf	_p_i2c_trb_current,w
 12533  0683  0086               	movwf	6
 12534  0684  0187               	clrf	7
 12535  0685  3F42               	moviw [2]fsr1
 12536  0686  00CB               	movwf	I2C_ISR@i2c_bytes_left
 12537  0687                     i1l6915:	
 12538                           ;i2c.c: 407: }
 12539                           ;i2c.c: 408: }
 12540                           
 12541                           ;i2c.c: 406: i2c_10bit_address_restart = 0;
 12542                           
 12543                           ;i2c.c: 404: i2c_state = S_MASTER_ACK_ADDR;
 12544                           
 12545                           ;i2c.c: 400: else
 12546                           ;i2c.c: 401: {
 12547                           ;i2c.c: 403: SSP1BUF = i2c_address;
 12548                           
 12549                           ;i2c.c: 399: }
 12550                           
 12551                           ;i2c.c: 398: i2c_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 12552                           
 12553                           ;i2c.c: 393: {
 12554                           ;i2c.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 12555                           
 12556                           ;i2c.c: 391: {
 12557                           ;i2c.c: 392: if (0 == i2c_10bit_address_restart)
 12558                           
 12559                           ;i2c.c: 387: }
 12560                           ;i2c.c: 390: if(!1 && (0x0 != i2c_address))
 12561                           
 12562                           
 12563                           ;i2c.c: 409: else
 12564                           ;i2c.c: 410: {
 12565                           ;i2c.c: 412: SSP1BUF = i2c_address;
 12566  0687  0850               	movf	I2C_ISR@i2c_address,w
 12567  0688  0024               	movlb	4	; select bank4
 12568  0689  0091               	movwf	17	;volatile
 12569                           
 12570                           ;i2c.c: 413: if(i2c_address & 0x01)
 12571  068A  0020               	movlb	0	; select bank0
 12572  068B  1C50               	btfss	I2C_ISR@i2c_address,0
 12573  068C  2E92               	goto	i1l6921
 12574                           
 12575                           ;i2c.c: 414: {
 12576                           ;i2c.c: 416: i2c_state = S_MASTER_ACK_ADDR;
 12577  068D  3005               	movlw	5
 12578  068E  00F3               	movwf	??_I2C_ISR
 12579  068F  0873               	movf	??_I2C_ISR,w
 12580  0690  00CF               	movwf	_i2c_state
 12581                           
 12582                           ;i2c.c: 417: }
 12583  0691  0008               	return
 12584  0692                     i1l6921:	
 12585                           
 12586                           ;i2c.c: 418: else
 12587                           ;i2c.c: 419: {
 12588                           ;i2c.c: 421: i2c_state = S_MASTER_SEND_DATA;
 12589  0692  3003               	movlw	3
 12590  0693  00F3               	movwf	??_I2C_ISR
 12591  0694  0873               	movf	??_I2C_ISR,w
 12592  0695  00CF               	movwf	_i2c_state
 12593                           
 12594                           ;i2c.c: 422: }
 12595                           ;i2c.c: 423: }
 12596                           ;i2c.c: 424: break;
 12597  0696  0008               	return
 12598  0697                     i1l203:	
 12599                           ;i2c.c: 426: case S_MASTER_SEND_DATA:
 12600                           
 12601                           
 12602                           ;i2c.c: 429: if(SSP1CON2bits.ACKSTAT)
 12603  0697  0024               	movlb	4	; select bank4
 12604  0698  1F16               	btfss	22,6	;volatile
 12605  0699  2EA5               	goto	i1l6929
 12606                           
 12607                           ;i2c.c: 430: {
 12608                           ;i2c.c: 432: i2c_object.i2cErrors++;
 12609  069A  3001               	movlw	1
 12610  069B  00F3               	movwf	??_I2C_ISR
 12611  069C  0873               	movf	??_I2C_ISR,w
 12612  069D  0020               	movlb	0	; select bank0
 12613  069E  07C0               	addwf	_i2c_object+4,f
 12614                           
 12615                           ;i2c.c: 435: SSP1CON2bits.ACKSTAT = 0;
 12616  069F  0024               	movlb	4	; select bank4
 12617  06A0  1316               	bcf	22,6	;volatile
 12618                           
 12619                           ;i2c.c: 438: I2C_Stop(I2C_DATA_NO_ACK);
 12620  06A1  3005               	movlw	5
 12621  06A2  318A  225A         	fcall	_I2C_Stop
 12622                           
 12623                           ;i2c.c: 440: }
 12624  06A4  0008               	return
 12625  06A5                     i1l6929:	
 12626                           
 12627                           ;i2c.c: 441: else
 12628                           ;i2c.c: 442: {
 12629                           ;i2c.c: 444: if(i2c_bytes_left-- == 0U)
 12630  06A5  3001               	movlw	1
 12631  06A6  0020               	movlb	0	; select bank0
 12632  06A7  02CB               	subwf	I2C_ISR@i2c_bytes_left,f
 12633  06A8  0A4B               	incf	I2C_ISR@i2c_bytes_left,w
 12634  06A9  1D03               	btfss	3,2
 12635  06AA  2EBF               	goto	i1l6937
 12636                           
 12637                           ;i2c.c: 445: {
 12638                           ;i2c.c: 449: p_i2c_trb_current++;
 12639  06AB  3005               	movlw	5
 12640  06AC  00F3               	movwf	??_I2C_ISR
 12641  06AD  0873               	movf	??_I2C_ISR,w
 12642  06AE  07CD               	addwf	_p_i2c_trb_current,f
 12643                           
 12644                           ;i2c.c: 452: if(--i2c_trb_count == 0)
 12645  06AF  3001               	movlw	1
 12646  06B0  02CE               	subwf	_i2c_trb_count,f
 12647  06B1  1D03               	btfss	3,2
 12648  06B2  2EB7               	goto	i1l207
 12649                           
 12650                           ;i2c.c: 453: {
 12651                           ;i2c.c: 454: I2C_Stop(I2C_MESSAGE_COMPLETE);
 12652  06B3  3000               	movlw	0
 12653  06B4  318A  225A         	fcall	_I2C_Stop
 12654                           
 12655                           ;i2c.c: 455: }
 12656  06B6  0008               	return
 12657  06B7                     i1l207:	
 12658                           
 12659                           ;i2c.c: 456: else
 12660                           ;i2c.c: 457: {
 12661                           ;i2c.c: 464: SSP1CON2bits.RSEN = 1;
 12662  06B7  0024               	movlb	4	; select bank4
 12663  06B8  1496               	bsf	22,1	;volatile
 12664                           
 12665                           ;i2c.c: 467: i2c_state = S_MASTER_SEND_ADDR;
 12666  06B9  3002               	movlw	2
 12667  06BA  00F3               	movwf	??_I2C_ISR
 12668  06BB  0873               	movf	??_I2C_ISR,w
 12669  06BC  0020               	movlb	0	; select bank0
 12670  06BD  00CF               	movwf	_i2c_state
 12671                           
 12672                           ;i2c.c: 469: }
 12673                           ;i2c.c: 470: }
 12674  06BE  0008               	return
 12675  06BF                     i1l6937:	
 12676                           
 12677                           ;i2c.c: 471: else
 12678                           ;i2c.c: 472: {
 12679                           ;i2c.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 12680  06BF  0843               	movf	I2C_ISR@pi2c_buf_ptr,w
 12681  06C0  0086               	movwf	6
 12682  06C1  0844               	movf	I2C_ISR@pi2c_buf_ptr+1,w
 12683  06C2  0087               	movwf	7
 12684  06C3  0801               	movf	1,w
 12685  06C4  0024               	movlb	4	; select bank4
 12686  06C5  0091               	movwf	17	;volatile
 12687  06C6  3001               	movlw	1
 12688  06C7  0020               	movlb	0	; select bank0
 12689  06C8  07C3               	addwf	I2C_ISR@pi2c_buf_ptr,f
 12690  06C9  3000               	movlw	0
 12691  06CA  3DC4               	addwfc	I2C_ISR@pi2c_buf_ptr+1,f
 12692                           
 12693                           ;i2c.c: 475: }
 12694                           ;i2c.c: 476: }
 12695                           ;i2c.c: 477: break;
 12696  06CB  0008               	return
 12697  06CC                     i1l210:	
 12698                           ;i2c.c: 479: case S_MASTER_ACK_ADDR:
 12699                           
 12700                           
 12701                           ;i2c.c: 482: if(SSP1CON2bits.ACKSTAT)
 12702  06CC  0024               	movlb	4	; select bank4
 12703  06CD  1F16               	btfss	22,6	;volatile
 12704  06CE  2EDA               	goto	i1l211
 12705                           
 12706                           ;i2c.c: 483: {
 12707                           ;i2c.c: 486: i2c_object.i2cErrors++;
 12708  06CF  3001               	movlw	1
 12709  06D0  00F3               	movwf	??_I2C_ISR
 12710  06D1  0873               	movf	??_I2C_ISR,w
 12711  06D2  0020               	movlb	0	; select bank0
 12712  06D3  07C0               	addwf	_i2c_object+4,f
 12713                           
 12714                           ;i2c.c: 489: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 12715  06D4  3004               	movlw	4
 12716  06D5  318A  225A         	fcall	_I2C_Stop
 12717                           
 12718                           ;i2c.c: 492: SSP1CON2bits.ACKSTAT = 0;
 12719  06D7  0024               	movlb	4	; select bank4
 12720  06D8  1316               	bcf	22,6	;volatile
 12721                           
 12722                           ;i2c.c: 493: }
 12723  06D9  0008               	return
 12724  06DA                     i1l211:	
 12725                           
 12726                           ;i2c.c: 494: else
 12727                           ;i2c.c: 495: {
 12728                           ;i2c.c: 496: SSP1CON2bits.RCEN = 1;
 12729  06DA  1596               	bsf	22,3	;volatile
 12730                           
 12731                           ;i2c.c: 497: i2c_state = S_MASTER_ACK_RCV_DATA;
 12732  06DB  3008               	movlw	8
 12733  06DC  00F3               	movwf	??_I2C_ISR
 12734  06DD  0873               	movf	??_I2C_ISR,w
 12735  06DE  0020               	movlb	0	; select bank0
 12736  06DF  00CF               	movwf	_i2c_state
 12737                           
 12738                           ;i2c.c: 498: }
 12739                           ;i2c.c: 499: break;
 12740  06E0  0008               	return
 12741  06E1                     i1l6949:	
 12742                           ;i2c.c: 501: case S_MASTER_RCV_DATA:
 12743                           
 12744                           
 12745                           ;i2c.c: 506: i2c_state = S_MASTER_ACK_RCV_DATA;
 12746  06E1  3008               	movlw	8
 12747  06E2  00F3               	movwf	??_I2C_ISR
 12748  06E3  0873               	movf	??_I2C_ISR,w
 12749  06E4  00CF               	movwf	_i2c_state
 12750                           
 12751                           ;i2c.c: 509: SSP1CON2bits.RCEN = 1;
 12752  06E5  0024               	movlb	4	; select bank4
 12753  06E6  1596               	bsf	22,3	;volatile
 12754                           
 12755                           ;i2c.c: 511: break;
 12756  06E7  0008               	return
 12757  06E8                     i1l6953:	
 12758                           ;i2c.c: 513: case S_MASTER_ACK_RCV_DATA:
 12759                           
 12760                           
 12761                           ;i2c.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 12762  06E8  0020               	movlb	0	; select bank0
 12763  06E9  0843               	movf	I2C_ISR@pi2c_buf_ptr,w
 12764  06EA  0086               	movwf	6
 12765  06EB  0844               	movf	I2C_ISR@pi2c_buf_ptr+1,w
 12766  06EC  0087               	movwf	7
 12767  06ED  0024               	movlb	4	; select bank4
 12768  06EE  0811               	movf	17,w	;volatile
 12769  06EF  0081               	movwf	1
 12770  06F0  3001               	movlw	1
 12771  06F1  0020               	movlb	0	; select bank0
 12772  06F2  07C3               	addwf	I2C_ISR@pi2c_buf_ptr,f
 12773  06F3  3000               	movlw	0
 12774  06F4  3DC4               	addwfc	I2C_ISR@pi2c_buf_ptr+1,f
 12775                           
 12776                           ;i2c.c: 519: if(--i2c_bytes_left)
 12777  06F5  3001               	movlw	1
 12778  06F6  02CB               	subwf	I2C_ISR@i2c_bytes_left,f
 12779  06F7  1903               	btfsc	3,2
 12780  06F8  2F01               	goto	i1l215
 12781                           
 12782                           ;i2c.c: 520: {
 12783                           ;i2c.c: 526: SSP1CON2bits.ACKDT = 0;
 12784  06F9  0024               	movlb	4	; select bank4
 12785  06FA  1296               	bcf	22,5	;volatile
 12786                           
 12787                           ;i2c.c: 529: i2c_state = S_MASTER_RCV_DATA;
 12788  06FB  3006               	movlw	6
 12789  06FC  00F3               	movwf	??_I2C_ISR
 12790  06FD  0873               	movf	??_I2C_ISR,w
 12791  06FE  0020               	movlb	0	; select bank0
 12792  06FF  00CF               	movwf	_i2c_state
 12793                           
 12794                           ;i2c.c: 530: }
 12795  0700  2F05               	goto	i1l6965
 12796  0701                     i1l215:	
 12797                           
 12798                           ;i2c.c: 531: else
 12799                           ;i2c.c: 532: {
 12800                           ;i2c.c: 536: SSP1CON2bits.ACKDT = 1;
 12801  0701  0024               	movlb	4	; select bank4
 12802  0702  1696               	bsf	22,5	;volatile
 12803                           
 12804                           ;i2c.c: 538: I2C_FunctionComplete();
 12805  0703  3189  21A7         	fcall	_I2C_FunctionComplete
 12806  0705                     i1l6965:	
 12807                           
 12808                           ;i2c.c: 539: }
 12809                           ;i2c.c: 542: SSP1CON2bits.ACKEN = 1;
 12810  0705  0024               	movlb	4	; select bank4
 12811  0706  1616               	bsf	22,4	;volatile
 12812                           
 12813                           ;i2c.c: 543: break;
 12814  0707  0008               	return
 12815  0708                     i1l6967:	
 12816                           ;i2c.c: 545: case S_MASTER_RCV_STOP:
 12817                           
 12818                           
 12819                           ;i2c.c: 546: case S_MASTER_SEND_STOP:
 12820                           ;i2c.c: 549: I2C_Stop(I2C_MESSAGE_COMPLETE);
 12821  0708  3000               	movlw	0
 12822  0709  318A  225A         	fcall	_I2C_Stop
 12823                           
 12824                           ;i2c.c: 550: break;
 12825  070B  0008               	return
 12826  070C                     i1l6969:	
 12827                           ;i2c.c: 552: default:
 12828                           
 12829                           
 12830                           ;i2c.c: 556: i2c_object.i2cErrors++;
 12831  070C  3001               	movlw	1
 12832  070D  00F3               	movwf	??_I2C_ISR
 12833  070E  0873               	movf	??_I2C_ISR,w
 12834  070F  0020               	movlb	0	; select bank0
 12835  0710  07C0               	addwf	_i2c_object+4,f
 12836                           
 12837                           ;i2c.c: 557: I2C_Stop(I2C_LOST_STATE);
 12838  0711  3006               	movlw	6
 12839  0712  318A  225A         	fcall	_I2C_Stop
 12840                           
 12841                           ;i2c.c: 560: }
 12842                           
 12843                           ;i2c.c: 558: break;
 12844  0714  0008               	return
 12845  0715                     i1l6975:	
 12846  0715  0020               	movlb	0	; select bank0
 12847  0716  084F               	movf	_i2c_state,w
 12848                           
 12849                           ; Switch size 1, requested type "space"
 12850                           ; Number of cases is 11, Range of values is 0 to 11
 12851                           ; switch strategies available:
 12852                           ; Name         Instructions Cycles
 12853                           ; direct_byte           30     6 (fixed)
 12854                           ; simple_byte           34    18 (average)
 12855                           ; jumptable            260     6 (fixed)
 12856                           ;	Chosen strategy is direct_byte
 12857  0717  0084               	movwf	4
 12858  0718  300C               	movlw	12
 12859  0719  0204               	subwf	4,w
 12860  071A  1803               	skipnc
 12861  071B  2F0C               	goto	i1l6969
 12862  071C  3188               	movlp	high i1S7483
 12863  071D  3504               	lslf	4,w
 12864  071E  3E00               	addlw	low i1S7483
 12865  071F  0082               	movwf	2
 12866  0720  0008               	return
 12867  0721                     __end_of_I2C_ISR:	
 12868                           
 12869                           	psect	swtext1
 12870  0800                     __pswtext1:	
 12871  0800                     i1S7483:	
 12872  0800  3185  2DF1         	ljmp	i1l181
 12873  0802  3186  2E1C         	ljmp	i1l186
 12874  0804  3186  2E70         	ljmp	i1l6897
 12875  0806  3186  2E97         	ljmp	i1l203
 12876  0808  3187  2F08         	ljmp	i1l6967
 12877  080A  3186  2ECC         	ljmp	i1l210
 12878  080C  3186  2EE1         	ljmp	i1l6949
 12879  080E  3187  2F08         	ljmp	i1l6967
 12880  0810  3186  2EE8         	ljmp	i1l6953
 12881  0812  3187  2F0C         	ljmp	i1l6969
 12882  0814  3186  2E24         	ljmp	i1l187
 12883  0816  3186  2E47         	ljmp	i1l192
 12884                           
 12885                           	psect	text48
 12886  0A5A                     __ptext48:	
 12887 ;; *************** function _I2C_Stop *****************
 12888 ;; Defined at:
 12889 ;;		line 581 in file "mcc_generated_files/i2c.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;  completion_c    1    wreg     enum E11987
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;  completion_c    1    2[COMMON] enum E11987
 12894 ;; Return value:  Size  Location     Type
 12895 ;;                  1    wreg      void 
 12896 ;; Registers used:
 12897 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12906 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;Total ram usage:        3 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; This function calls:
 12910 ;;		Nothing
 12911 ;; This function is called by:
 12912 ;;		_I2C_ISR
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           
 12917                           ;psect for function _I2C_Stop
 12918  0A5A                     _I2C_Stop:	
 12919                           
 12920                           ;incstack = 0
 12921                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 12922                           ;I2C_Stop@completion_code stored from wreg
 12923  0A5A  00F2               	movwf	I2C_Stop@completion_code
 12924                           
 12925                           ;i2c.c: 584: SSP1CON2bits.PEN = 1;
 12926  0A5B  0024               	movlb	4	; select bank4
 12927  0A5C  1516               	bsf	22,2	;volatile
 12928                           
 12929                           ;i2c.c: 587: if (p_i2c_current->pTrFlag != (0))
 12930  0A5D  0020               	movlb	0	; select bank0
 12931  0A5E  084C               	movf	_p_i2c_current,w
 12932  0A5F  3E02               	addlw	2
 12933  0A60  0086               	movwf	6
 12934  0A61  0187               	clrf	7
 12935  0A62  0016               	moviw fsr1++
 12936  0A63  0401               	iorwf	1,w
 12937  0A64  1903               	btfsc	3,2
 12938  0A65  2A74               	goto	i1l6771
 12939                           
 12940                           ;i2c.c: 588: {
 12941                           ;i2c.c: 590: *(p_i2c_current->pTrFlag) = completion_code;
 12942  0A66  084C               	movf	_p_i2c_current,w
 12943  0A67  3E02               	addlw	2
 12944  0A68  0086               	movwf	6
 12945  0A69  0187               	clrf	7
 12946  0A6A  3F40               	moviw [0]fsr1
 12947  0A6B  00F0               	movwf	??_I2C_Stop
 12948  0A6C  3F41               	moviw [1]fsr1
 12949  0A6D  00F1               	movwf	??_I2C_Stop+1
 12950  0A6E  0870               	movf	??_I2C_Stop,w
 12951  0A6F  0086               	movwf	6
 12952  0A70  0871               	movf	??_I2C_Stop+1,w
 12953  0A71  0087               	movwf	7
 12954  0A72  0872               	movf	I2C_Stop@completion_code,w
 12955  0A73  0081               	movwf	1
 12956  0A74                     i1l6771:	
 12957                           
 12958                           ;i2c.c: 591: }
 12959                           ;i2c.c: 594: i2c_state = S_MASTER_IDLE;
 12960  0A74  01CF               	clrf	_i2c_state
 12961  0A75  0008               	return
 12962  0A76                     __end_of_I2C_Stop:	
 12963                           
 12964                           	psect	text49
 12965  09A7                     __ptext49:	
 12966 ;; *************** function _I2C_FunctionComplete *****************
 12967 ;; Defined at:
 12968 ;;		line 563 in file "mcc_generated_files/i2c.c"
 12969 ;; Parameters:    Size  Location     Type
 12970 ;;		None
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;		None
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  1    wreg      void 
 12975 ;; Registers used:
 12976 ;;		wreg, status,2, status,0
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12986 ;;Total ram usage:        1 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; This function calls:
 12989 ;;		Nothing
 12990 ;; This function is called by:
 12991 ;;		_I2C_ISR
 12992 ;; This function uses a non-reentrant model
 12993 ;;
 12994                           
 12995                           
 12996                           ;psect for function _I2C_FunctionComplete
 12997  09A7                     _I2C_FunctionComplete:	
 12998                           
 12999                           ;i2c.c: 567: p_i2c_trb_current++;
 13000                           
 13001                           ;incstack = 0
 13002                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 13003  09A7  3005               	movlw	5
 13004  09A8  00F0               	movwf	??_I2C_FunctionComplete
 13005  09A9  0870               	movf	??_I2C_FunctionComplete,w
 13006  09AA  0020               	movlb	0	; select bank0
 13007  09AB  07CD               	addwf	_p_i2c_trb_current,f
 13008                           
 13009                           ;i2c.c: 570: if(--i2c_trb_count == 0)
 13010  09AC  3001               	movlw	1
 13011  09AD  02CE               	subwf	_i2c_trb_count,f
 13012  09AE  1D03               	btfss	3,2
 13013  09AF  29B5               	goto	i1l222
 13014                           
 13015                           ;i2c.c: 571: {
 13016                           ;i2c.c: 572: i2c_state = S_MASTER_SEND_STOP;
 13017  09B0  3004               	movlw	4
 13018  09B1  00F0               	movwf	??_I2C_FunctionComplete
 13019  09B2  0870               	movf	??_I2C_FunctionComplete,w
 13020  09B3  00CF               	movwf	_i2c_state
 13021                           
 13022                           ;i2c.c: 573: }
 13023  09B4  0008               	return
 13024  09B5                     i1l222:	
 13025                           
 13026                           ;i2c.c: 574: else
 13027                           ;i2c.c: 575: {
 13028                           ;i2c.c: 576: i2c_state = S_MASTER_RESTART;
 13029  09B5  01CF               	clrf	_i2c_state
 13030  09B6  0ACF               	incf	_i2c_state,f
 13031  09B7  0008               	return
 13032  09B8                     __end_of_I2C_FunctionComplete:	
 13033                           
 13034                           	psect	text50
 13035  0919                     __ptext50:	
 13036 ;; *************** function _I2C_BusCollisionISR *****************
 13037 ;; Defined at:
 13038 ;;		line 728 in file "mcc_generated_files/i2c.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;		None
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;		None
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		None
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;Total ram usage:        0 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; This function calls:
 13059 ;;		Nothing
 13060 ;; This function is called by:
 13061 ;;		_INTERRUPT_InterruptManager
 13062 ;; This function uses a non-reentrant model
 13063 ;;
 13064                           
 13065                           
 13066                           ;psect for function _I2C_BusCollisionISR
 13067  0919                     _I2C_BusCollisionISR:	
 13068                           
 13069                           ;incstack = 0
 13070                           ; Regs used in _I2C_BusCollisionISR: []
 13071  0919  0008               	return
 13072  091A                     __end_of_I2C_BusCollisionISR:	
 13073  007E                     btemp	set	126	;btemp
 13074  007E                     int$flags	set	126
 13075  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        68
    BSS         68
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      53
    BANK1            80     36      79
    BANK2            80     21      53
    BANK3            80      0      40
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    I2CRead@readTRB.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    i2c_tr_queue.pTrFlag	PTR enum E11987 size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    I2CRead@pdata	PTR unsigned char  size(2) Largest target is 6
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Clock_Read@dataBuffer(BANK1[3]), 

    I2CWrite@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_Initialize@writeBuffer(BANK2[8]), Clock_Write@writeBuffer(BANK1[4]), Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), 
		 -> LED_Row@writeBuffer(BANK1[3]), 

    Clock_Display@col	PTR unsigned int  size(1) Largest target is 20
		 -> DISPLAYBANK_col(BANK2[20]), 

    Clock_Display@row	PTR char  size(1) Largest target is 11
		 -> DISPLAYBANK_row(BANK1[11]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> Tick(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Tick(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), Clock_Write@writeBuffer(BANK1[4]), Clock_Initialize@writeBuffer(BANK2[5]), 
		 -> LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterWrite@trBlock(BANK1[5]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 6
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Clock_Read@dataBuffer(BANK1[3]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E11987 size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    I2C_MasterTRBInsert@pflag	PTR enum E11987 size(1) Largest target is 1
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), 

    F12099.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    I2C_MasterWrite@pflag	PTR enum E11987 size(1) Largest target is 1
		 -> I2CWrite@status(BANK1[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_Initialize@writeBuffer(BANK2[8]), Clock_Write@writeBuffer(BANK1[4]), Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), 
		 -> LED_Row@writeBuffer(BANK1[3]), 

    F12094.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), NULL(NULL[0]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    p_i2c_trb_current	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E11987 size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    S281$pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    p_i2c_current.pbuffer	PTR unsigned char  size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    S293$pTrFlag	PTR enum E11987 size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    p_i2c_current.pTrFlag	PTR enum E11987 size(2) Largest target is 8
		 -> Acc_ProcessClickSrc@dataBuffer(COMMON[6]), Acc_Initialize@dataBuffer(BANK2[6]), Acc_Initialize@writeBuffer(BANK2[8]), I2CRead@readBuffer(BANK1[1]), 
		 -> I2CRead@status(BANK1[1]), I2CWrite@status(BANK1[1]), Clock_Read@dataBuffer(BANK1[3]), Clock_Write@writeBuffer(BANK1[4]), 
		 -> Clock_Initialize@writeBuffer(BANK2[5]), LED_Initialize@writeBuffer(BANK1[3]), LED_Row@writeBuffer(BANK1[3]), 

    S293$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK1[10]), I2C_MasterRead@trBlock(BANK1[5]), I2C_MasterWrite@trBlock(BANK1[5]), 

    p_i2c_current	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[4]), NULL(NULL[0]), 

    S304$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[4]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[4]), 

    S304$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[4]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[4]), 

    IOCCF3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> SetTurn(), IOCCF3_DefaultInterruptHandler(), 

    IOCCF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SetTurn(), Absolute function(), IOCCF3_DefaultInterruptHandler(), 

    IOCCF2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TapTime(), IOCCF2_DefaultInterruptHandler(), 

    IOCCF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TapTime(), Absolute function(), IOCCF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_CallBack->_Tick
    _Tick->___lwmod
    ___lwmod->___wmul
    _IOCCF3_ISR->_SetTurn
    i1_Clock_Read->i1_I2CRead
    i1_I2CRead->i1_I2C_MasterReadTRBBuild
    i1_I2CRead->i1_I2C_MasterWriteTRBBuild
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _main->_Delay
    _SYSTEM_Initialize->_I2C_Initialize
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _Clock_Initialize->_Delay
    _Clock_Display->_IncHour
    _I2C_MasterWrite->_I2C_MasterTRBInsert
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2CRead->_I2C_MasterReadTRBBuild
    _I2CRead->_I2C_MasterTRBInsert
    _I2CRead->_I2C_MasterWriteTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _IOCCF2_ISR->_TapTime
    _TapTime->_Clock_Tap
    _Clock_Tap->i1_Clock_Display
    i1_Clock_Display->i1_Clock_Read
    i1_Clock_Read->i1_I2CRead

Critical Paths under _main in BANK1

    _main->_Clock_Display
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF3_SetInterruptHandler
    _LED_Row->_I2CWrite
    _LED_Initialize->_I2CWrite
    _Clock_Write->_I2CWrite
    _Clock_Initialize->_Clock_Read
    _Clock_Display->_Clock_Read
    _Clock_Read->_I2CRead
    _Acc_Initialize->_I2CRead
    _I2CWrite->_I2C_MasterWrite
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2CRead->_I2C_MasterReadTRBBuild
    _I2CRead->_I2C_MasterWriteTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Acc_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   57817
                                             15 BANK2      6     6      0
                     _Acc_Initialize
                      _Clock_Display
                   _Clock_Initialize
                        _Clock_Write
                              _Delay
         _IOCCF2_SetInterruptHandler
         _IOCCF3_SetInterruptHandler
                     _LED_Initialize
                            _LED_Row
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     800
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     245
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     245
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     555
                                             27 BANK0      1     1      0
         _IOCCF2_SetInterruptHandler
         _IOCCF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF3_SetInterruptHandler                           2     0      2     245
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF2_SetInterruptHandler                           2     0      2     245
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                             27 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LED_Row                                              8     6      2    7610
                                             25 BANK1      8     6      2
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _LED_Initialize                                       5     5      0    6555
                                             25 BANK1      5     5      0
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _Clock_Write                                          6     6      0    6510
                                             25 BANK1      6     6      0
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _Clock_Initialize                                     8     8      0   12499
                                             31 BANK1      1     1      0
                                              0 BANK2      7     7      0
                         _Clock_Read
                              _Delay
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _Delay                                                3     3      0     140
                                             27 BANK0      1     1      0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Clock_Display                                        5     5      0    9254
                                             31 BANK1      5     5      0
                         _Clock_Read
                            _IncHour
 ---------------------------------------------------------------------------------
 (2) _IncHour                                              1     1      0     165
                                             27 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Clock_Read                                           4     4      0    5449
                                             27 BANK1      4     4      0
                            _I2CRead
 ---------------------------------------------------------------------------------
 (1) _Acc_Initialize                                      16    16      0   12849
                                             27 BANK1      1     1      0
                                              0 BANK2     15    15      0
                            _I2CRead
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (2) _I2CWrite                                            10     5      5    6140
                                             15 BANK1     10     5      5
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterWrite                                      8     2      6    2474
                                              7 BANK1      8     2      6
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _I2CRead                                             20    14      6    5119
                                              7 BANK1     20    14      6
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWriteTRBBuild                              8     3      5     972
                                             27 BANK0      1     1      0
                                              0 BANK1      7     2      5
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterTRBInsert                                  4     2      2     900
                                             27 BANK0      1     1      0
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterReadTRBBuild                               8     3      5    1027
                                             27 BANK0      1     1      0
                                              0 BANK1      7     2      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0    6948
                                             26 BANK0      1     1      0
                _I2C_BusCollisionISR
                            _I2C_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     463
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0     463
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                               _Tick *
 ---------------------------------------------------------------------------------
 (8) _Tick                                                 2     2      0     463
                                             12 COMMON     2     2      0
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (9) ___wmul                                               6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              6     2      4     265
                                              6 COMMON     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    6430
                         _IOCCF2_ISR
                         _IOCCF3_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCCF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF3_DefaultInterruptHandler *
                            _SetTurn *
 ---------------------------------------------------------------------------------
 (8) _SetTurn                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IOCCF3_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCCF2_ISR                                           0     0      0    6430
                   Absolute function *
     _IOCCF2_DefaultInterruptHandler *
                            _TapTime *
 ---------------------------------------------------------------------------------
 (8) _TapTime                                              1     1      0    6430
                                             25 BANK0      1     1      0
                          _Clock_Tap
 ---------------------------------------------------------------------------------
 (9) _Clock_Tap                                            2     2      0    6430
                                             23 BANK0      2     2      0
                    i1_Clock_Display
                          i1_IncHour
 ---------------------------------------------------------------------------------
 (10) i1_Clock_Display                                     5     5      0    6309
                                             18 BANK0      5     5      0
                       i1_Clock_Read
                          i1_IncHour
 ---------------------------------------------------------------------------------
 (10) i1_IncHour                                           1     1      0      66
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_Clock_Read                                        4     4      0    2603
                                             14 BANK0      4     4      0
                          i1_I2CRead
 ---------------------------------------------------------------------------------
 (12) i1_I2CRead                                          20    14      6    2383
                                              8 COMMON     6     0      6
                                              0 BANK0     14    14      0
           i1_I2C_MasterReadTRBBuild
              i1_I2C_MasterTRBInsert
          i1_I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (13) i1_I2C_MasterWriteTRBBuild                           8     3      5     507
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (13) i1_I2C_MasterTRBInsert                               4     2      2     448
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) i1_I2C_MasterReadTRBBuild                            8     3      5     562
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _IOCCF2_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_ISR                                              4     4      0      55
                                              3 COMMON     4     4      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (7) _I2C_Stop                                             3     3      0      55
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) _I2C_FunctionComplete                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Acc_Initialize
     _I2CRead
       _I2C_MasterReadTRBBuild
       _I2C_MasterTRBInsert
       _I2C_MasterWriteTRBBuild
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Clock_Display
     _Clock_Read
       _I2CRead
         _I2C_MasterReadTRBBuild
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
     _IncHour
   _Clock_Initialize
     _Clock_Read
       _I2CRead
         _I2C_MasterReadTRBBuild
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
     _Delay
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Clock_Write
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Delay
   _IOCCF2_SetInterruptHandler
   _IOCCF3_SetInterruptHandler
   _LED_Initialize
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _LED_Row
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _SYSTEM_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF2_SetInterruptHandler
       _IOCCF3_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _TMR1_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _PIN_MANAGER_IOC
     _IOCCF2_ISR
       Absolute function(Fake) *
       _IOCCF2_DefaultInterruptHandler *
       _TapTime *
         _Clock_Tap
           i1_Clock_Display
             i1_Clock_Read
               i1_I2CRead
                 i1_I2C_MasterReadTRBBuild
                 i1_I2C_MasterTRBInsert
                 i1_I2C_MasterWriteTRBBuild
             i1_IncHour
           i1_IncHour
     _IOCCF3_ISR
       Absolute function(Fake) *
       _IOCCF3_DefaultInterruptHandler *
       _SetTurn *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Tick *
         ___lwmod
           ___wmul (ARG)
         ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      35       5       66.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     24      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     15      35       9       66.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      28      11       50.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      EF      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      EF      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 17 23:41:24 2019

                          Clock_Display@row 00C3                     ??i1_I2C_MasterTRBInsert 0072  
                                         pc 0002                       I2C_ISR@i2c_bytes_left 004B  
                               __CFG_CP$OFF 0000                                          l20 0942  
                     Clock_Initialize@start 0121                         ___wmul@multiplicand 0072  
                          ?i1_Clock_Display 0070                     ?_I2C_MasterReadTRBBuild 00A0  
                               __CFG_LVP$ON 0000                                         _GIE 005F  
                            Clock_Tap@hours 0038                      Clock_Initialize@status 0120  
                           __end_of_I2C_ISR 0721                             _timer1ReloadVal 0041  
                           __end_of_I2CRead 0D14                                         _min 00C8  
                                       _sec 00C9                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
          ??_IOCCF2_DefaultInterruptHandler 0070             ?_IOCCF2_DefaultInterruptHandler 0070  
        __end_of_IOCCF3_SetInterruptHandler 092C                  _IOCCF3_SetInterruptHandler 0926  
                              __CFG_ZCD$OFF 0000                             __end_of_LED_Row 0F3F  
                       __end_of_Clock_Write 0AD7                                        l7003 0EEB  
                                      l7111 036E                                        l7031 0E11  
                                      l7023 0F38                                        l7201 044B  
                                      l7017 0F1B                                        l7211 0467  
                                      l7123 038A                                        l7133 03A2  
                                      l7141 03B6                                        l7037 0E1D  
                                      l7311 0566                                        l7303 0552  
                                      l7231 049A                                        l7119 0382  
                                      l7039 0E1E                                        l7217 047A  
                                      l7153 03D0                                        l7145 03BE  
                                      l7219 047E                                        l7091 0341  
                                      l7333 05A1                                        l7237 04AD  
                                      l7165 03EC                                        l7157 03D8  
                                      l7405 0774                                        l6615 0B92  
                                      l7327 058E                                        l7319 057A  
                                      l7271 0502                                        l7263 04EE  
                                      l7255 04DA                                        l7247 04C6  
                                      l7239 04B2                                        l7191 042B  
                                      l7183 041B                                        l7415 0790  
                                      l7337 05A6                                        l7177 0408  
                                      l7169 03F4                                        l7441 07B9  
                                      l7433 07A8                                        l7339 05CF  
                                      l7451 07DD                                        l7427 07A2  
                                      l6581 0D96                                        l6645 0CFA  
                                      l7453 07E2                                        l7437 07B1  
                                      l6583 0D9C                                        l6639 0D0B  
                                      l7295 053E                                        l7287 052A  
                                      l7279 0516                                        l7199 0442  
                                      l7447 07C2                                        l6577 0D8F  
                                      l7457 07E6                                        l7449 07C5  
                                      l6587 0DA4                                        l6827 09C6  
                                      l6819 09C0                                        l7459 07EF  
                                      l6783 09F9                                        l6795 0B68  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                      ??_I2C_FunctionComplete 0070  
                                      u6110 0ED3                                        u6120 0ED4  
                                      u6154 0F18                                        u6155 0F17  
                                      u6164 0F21                                        u6165 0F20  
                                      u6607 0A01                                        u5790 0E01  
                                      _PLLR 04D6                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      _Tick 0E61                                        _main 0721  
                                      _hour 00DD                                        _tick 00DE  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                            __end_of_I2C_Stop 0A76  
                             __CFG_BOREN$ON 0000                            __end_of_I2CWrite 0B71  
                                      start 0037                          __size_ofi1_I2CRead 0042  
                ??_TMR1_SetInterruptHandler 003B                               __CFG_MCLRE$ON 0000  
                           __end_of_IncHour 09C9                             __end_of_TapTime 09F5  
                                _Clock_Read 0A95              __end_of_I2C_MasterReadTRBBuild 0C4F  
                           __end_of_SetTurn 094E                               __CFG_PLLEN$ON 0000  
                I2C_MasterReadTRBBuild@ptrb 003B              __size_of_OSCILLATOR_Initialize 0007  
                          ?_I2C_MasterWrite 00A7                                       ?_Tick 0070  
             __end_of_OSCILLATOR_Initialize 0945                         __size_of_IOCCF2_ISR 000D  
                       __size_of_IOCCF3_ISR 000D                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 091A  
                                     _T1CON 0018                               _i2c_trb_count 004E  
                                     i1l210 06CC                                       i1l211 06DA  
                                     i1l203 0697                                       i1l222 09B5  
                                     i1l215 0701                                       i1l207 06B7  
                                     i1l181 05F1           __size_ofi1_I2C_MasterReadTRBBuild 0027  
                                     i1l192 0647                                       i1l193 0653  
                           __end_of___lwmod 0BED                                       i1l186 061C  
                                     i1l187 0624                                       i1l291 0010  
                                     i1l293 001C                                       i1l295 0028  
                                     i1l467 0EC5                                       i1l299 0032  
                                     i1l693 0A47                   ?i1_I2C_MasterReadTRBBuild 0070  
                                     _TMR1H 0017                                       _TMR1L 0016  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _Delay 09F5  
            i1I2C_MasterReadTRBBuild@length 0072                      Clock_Display@fetchTime 00C0  
                          __end_of_TMR1_ISR 09DE                          __size_ofi1_IncHour 0010  
                                     _blank 00CD                     __end_of_PIN_MANAGER_IOC 0965  
                                     main@i 0133                            ??_Acc_Initialize 00BB  
                   __end_of_TMR1_Initialize 0A3F                                       pclath 000A  
                               LED_Row@mask 00B9                                       status 0003  
                                     wtemp0 007E                    I2C_MasterTRBInsert@count 00A2  
                  I2C_MasterTRBInsert@pflag 00A1                                  _i2c_object 003C  
                           __initialization 0039                                __end_of_Tick 0EC6  
                              __end_of_main 07F2                   Acc_Initialize@writeBuffer 0127  
                            _LED_Initialize 0C4F                       __end_of_Clock_Display 05D9  
                                 ??_I2C_ISR 0073                                   ??_I2CRead 00AD  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
                                    ??_Tick 007C                                      ??_main 012F  
                            I2CRead@address 00AB                         _I2C_MasterTRBInsert 0D59  
                        __size_of_Clock_Tap 0031                 I2C_MasterReadTRBBuild@pdata 00A0  
                               _Clock_Write 0AB5                                   ??_LED_Row 00BB  
                   _IOCCF2_InterruptHandler 00ED                                      ?_Delay 0070  
                         __end_ofi1_I2CRead 0CD2                    ?_I2C_MasterWriteTRBBuild 00A0  
                            I2CRead@readTRB 00B0                                      i1S7483 0800  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                                      _T1GCON 0019  
                i1I2C_MasterTRBInsert@count 0073                                   I2CWrite@i 00B6  
                i1I2C_MasterTRBInsert@pflag 0071                                      _RB4PPS 0E9C  
                                    _RB6PPS 0E9E                                      _ODCONA 028C  
                                    _ODCONB 028D                                      _ODCONC 028E  
                                    i1l2511 099E                                      i1l3065 0994  
                                    i1l2519 09A4                                      i1l2831 0A41  
                                    i1l2911 0EBA                                      i1l2851 0BC7  
                                    i1l2853 0BD3                                      i1l2861 0BE8  
                                    i1l6313 008C                                      i1l2857 0BDF  
                                    i1l2883 0E66                                      i1l6501 0275  
                                    i1l6421 019D                                      i1l6413 0185  
                                    i1l6405 0174                                      i1l6341 00D1  
                                    i1l6333 00BC                                      Delay@i 00A1  
                                    i1l6423 01A7                                      i1l2887 0E88  
                                    i1l6273 0D48                                      i1l6433 01C4  
                                    i1l6345 00DA                                      i1l6441 01DB  
                                    i1l2889 0E8E                                      i1l6275 0D4D  
                                    i1l6355 00F3                                      i1l6363 0108  
                                    i1l6603 0C11                                      i1l2899 0EA3  
                                    i1l6269 0D41                                      i1l6293 0CC9  
                                    i1l6541 02D9                                      i1l6533 02C5  
                                    i1l6525 02B1                                      i1l6517 029D  
                                    i1l6509 0289                                      i1l6461 0211  
                                    i1l6453 01F9                                      i1l6605 0C1A  
                                    i1l6279 0D54                                      i1l6439 01D7  
                                    i1l6391 014B                                      i1l6375 0124  
                                    i1l6367 0111                                      i1l6561 032F  
                                    i1l6299 0CB8                                      i1l6555 0300  
                                    i1l6459 020C                                      i1l6387 0142  
                                    i1l6379 012D                                      i1l6627 09E6  
                                    i1l6549 02ED                                      i1l6493 0261  
                                    i1l6485 024D                                      i1l6477 0239  
                                    i1l6469 0225                                      i1l6559 0305  
                                    i1l6399 0160                                      i1l6921 0692  
                                    i1l6771 0A74                                      i1l6915 0687  
                                    i1l6595 0BFD                                      i1l6763 0987  
                                    i1l6837 095F                                      i1l6599 0C04  
                                    i1l6953 06E8                                      i1l6937 06BF  
                                    i1l6929 06A5                                      i1l6865 060F  
                                    i1l6883 0642                                      i1l6965 0705  
                                    i1l6949 06E1                                      i1l6877 0630  
                                    i1l6967 0708                                      i1l6975 0715  
                                    i1l6969 070C                                      i1l6897 0670  
                                    u190_25 0BE0                                      u183_25 0A48  
                                    u184_25 0A4D                                      u187_25 0BCA  
                                    u189_25 0BD9                                      _OSCCON 0099  
                                    u574_20 09F1                                      u575_20 09F2  
                        i1Clock_Display@col 0035                          i1Clock_Display@row 0036  
                                 ??_IncHour 003B                        ?_I2C_MasterTRBInsert 00A0  
                            __CFG_PWRTE$OFF 0000                                   ??_TapTime 0039  
                                 ??_SetTurn 0070        __end_of_TMR1_DefaultInterruptHandler 0800  
     __size_of_TMR1_DefaultInterruptHandler 0001                _TMR1_DefaultInterruptHandler 07FF  
                    __end_of_LED_Initialize 0C90                    __end_of_Clock_Initialize 0E61  
                         __end_ofi1_IncHour 09A7                     __end_of_TMR1_StartTimer 091D  
                    Clock_Write@writeBuffer 00BB                                      ___wmul 0A3F  
                            __CFG_STVREN$ON 0000                                      _action 00CC  
                                 ??___lwmod 007A                                 ?_Clock_Read 0070  
             I2C_MasterReadTRBBuild@address 00A3                                      _setDir 0047  
                   __size_of_I2C_Initialize 0019                                   ?_I2C_Stop 0070  
                                 ?_I2CWrite 00AF    TMR1_SetInterruptHandler@InterruptHandler 00A0  
IOCCF3_SetInterruptHandler@InterruptHandler 00A0  IOCCF2_SetInterruptHandler@InterruptHandler 00A0  
                          ?_PIN_MANAGER_IOC 0070                                ??_IOCCF2_ISR 007E  
                              ??_IOCCF3_ISR 0071                       __end_of_TMR1_CallBack 0959  
                          ?_TMR1_Initialize 0070                           _SYSTEM_Initialize 0965  
                   __end_of__initialization 0080                       ??_I2C_MasterTRBInsert 003B  
                        ?_SYSTEM_Initialize 0070                           __end_of_Clock_Tap 0C1E  
                             __end_of_Delay 0A0D                             ?_LED_Initialize 0070  
                            __pcstackCOMMON 0070                                __pidataBANK0 091D  
                              __pidataBANK1 07F2                                __pidataBANK2 0971  
                              __pidataBANK3 0B99                         ??_SYSTEM_Initialize 003C  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
              i1I2C_MasterReadTRBBuild@ptrb 0077              __size_ofi1_I2C_MasterTRBInsert 0045  
             __end_ofi1_I2C_MasterTRBInsert 0D59             __end_of_I2C_MasterWriteTRBBuild 0B4A  
                        __end_of_IOCCF2_ISR 098A                          __end_of_IOCCF3_ISR 0997  
                              I2CRead@pdata 00A7                              _OPTION_REGbits 0095  
                                ??_I2C_Stop 0070                                     ??_Delay 003B  
                                ??_I2CWrite 00B4                 ?_IOCCF3_SetInterruptHandler 00A0  
                 __end_of_SYSTEM_Initialize 0971                                  _checkClock 0053  
                        LED_Row@writeBuffer 00BD          __size_ofi1_I2C_MasterWriteTRBBuild 001F  
                                __pbssBANK0 003C                                  __pbssBANK1 00C4  
                                __pbssBANK2 0135                  ?i1_I2C_MasterWriteTRBBuild 0070  
                       __size_of_Clock_Read 0020                I2C_MasterReadTRBBuild@length 00A2  
    __end_of_IOCCF2_DefaultInterruptHandler 0003     __size_of_IOCCF2_DefaultInterruptHandler 0001  
            _IOCCF2_DefaultInterruptHandler 0002                __size_of_I2C_BusCollisionISR 0001  
                   _IOCCF3_InterruptHandler 00EB            __end_ofi1_I2C_MasterReadTRBBuild 0B23  
                                __pmaintext 0721                                     ?___wmul 0070  
                          ?_TMR1_StartTimer 0070                                  ??_TMR1_ISR 007E  
                           __CFG_PPS1WAY$ON 0000                                  __pintentry 0004  
                                   _I2C_ISR 05D9                                     _I2CRead 0CD2  
                  i1I2CRead@registerAddress 007A                           I2CRead@readBuffer 00AF  
               I2C_MasterWriteTRBBuild@ptrb 003B                             __CFG_WDTCCS$SWC 0000  
                                   _LED_Row 0EC6                              i1I2CRead@pdata 0078  
                                   _OSCTUNE 0098                    __size_ofi1_Clock_Display 02B5  
                   I2C_Stop@completion_code 0072                                     _SSP1ADD 0212  
                                   _PPSLOCK 0E0F                                     _SSP1BUF 0211  
          ??_IOCCF3_DefaultInterruptHandler 0070             ?_IOCCF3_DefaultInterruptHandler 0070  
                             ?i1_Clock_Read 0070           __end_ofi1_I2C_MasterWriteTRBBuild 0A95  
             __size_of_I2C_FunctionComplete 0011                                     _IncHour 09B8  
                                   _TapTime 09DE                                     _SetTurn 0945  
                         _DISPLAYBANK_col_l 01A0                           _DISPLAYBANK_row_l 0149  
                           __size_of___wmul 001B                                     ___lwmod 0BC1  
                            _I2C_Initialize 0A0D                                     __ptext1 0965  
                                   __ptext2 0A26                                     __ptext3 091A  
                                   __ptext4 092C                                     __ptext5 0DAA  
                                   __ptext6 0926                                     __ptext7 0920  
                                   __ptext8 093E                                     __ptext9 0A0D  
            ??_TMR1_DefaultInterruptHandler 0070                        Acc_Initialize@status 0126  
                                 _T1CONbits 0018                                ?_Clock_Write 0070  
                     _OSCILLATOR_Initialize 093E           __size_of_TMR1_SetInterruptHandler 0006  
                  ??_PIN_MANAGER_Initialize 003B                   ?_TMR1_SetInterruptHandler 00A0  
                                 _IOCCFbits 0399                                   _IOCCNbits 0398  
                                   _prevRow 0052                                   _IOCCPbits 0397  
                  __size_of_I2C_MasterWrite 0028                  __size_of_SYSTEM_Initialize 000C  
                            ??i1_Clock_Read 002E                                     clrloop0 0933  
                                   main@row 0134                             I2CWrite@address 00B2  
                                 i1_I2CRead 0C90                        end_of_initialization 0080  
                          i1I2CRead@address 007C                                     init_ram 0938  
                                   initloop 0939            __size_of_I2C_MasterWriteTRBBuild 0027  
                          i1I2CRead@readTRB 0022                           ?_Clock_Initialize 0070  
                    __end_of_I2C_Initialize 0A26                       I2C_MasterWrite@length 00A9  
                              ??_Clock_Read 00BB                          ??_Clock_Initialize 00BF  
                  i1_I2C_MasterReadTRBBuild 0AFC              i1I2C_MasterWriteTRBBuild@pdata 0070  
                                 i1_IncHour 0997                                   IncHour@in 003B  
                        I2C_ISR@i2c_address 0050                                   _SSPDATPPS 0E21  
                                 _SSPCLKPPS 0E20                            __CFG_FOSC$INTOSC 0000  
                         __size_of_I2C_Stop 001C                           __size_of_I2CWrite 0027  
              ??_IOCCF2_SetInterruptHandler 003B                                  ?i1_I2CRead 0078  
          I2C_ISR@i2c_10bit_address_restart 004A                           _SECOND_MULTIPLIER 0054  
                    __size_of_Clock_Display 02A0                          __end_of_Clock_Read 0AB5  
                         ??i1_Clock_Display 0032                            ??_LED_Initialize 00B9  
                  Clock_Display@hourDisplay 00C1                    ??_I2C_MasterReadTRBBuild 00A5  
                         _p_i2c_trb_current 004D                     __size_of_Acc_Initialize 00C1  
                                 _Clock_Tap 0BED                    Acc_Initialize@dataBuffer 0120  
                           ?_I2C_Initialize 0070                                  _writeClock 0049  
                            __end_of___wmul 0A5A               i1I2C_MasterReadTRBBuild@pdata 0070  
                              _i2c_tr_queue 00D9                                  ?i1_IncHour 0070  
                         __size_of_TMR1_ISR 0015                      ?_OSCILLATOR_Initialize 0070  
       __size_of_IOCCF2_SetInterruptHandler 0006             i1I2C_MasterWriteTRBBuild@length 0072  
                                LED_Row@row 00C0                         _I2C_BusCollisionISR 0919  
                       start_initialization 0039             __size_of_PIN_MANAGER_Initialize 0059  
                                 _i2c_state 004F                 __end_of_I2C_MasterTRBInsert 0DAA  
                i1Clock_Display@hourDisplay 0034                 ??i1_I2C_MasterWriteTRBBuild 0075  
                             _secondaryTick 0045                               I2CRead@length 00AA  
                         ??_I2C_MasterWrite 00AD                               I2CRead@status 00BA  
                      ?_I2C_BusCollisionISR 0070                    __size_of_PIN_MANAGER_IOC 000C  
                           _DISPLAYBANK_col 0135                    __size_of_TMR1_Initialize 0019  
                           _DISPLAYBANK_row 00E0                                  ?_Clock_Tap 0070  
                                  ??___wmul 0074                        __end_ofi1_Clock_Read 0AFC  
                               __pdataBANK0 0052                                 __pdataBANK1 00DE  
                               __pdataBANK2 0149                                 __pdataBANK3 01A0  
                                  ?_I2C_ISR 0070                                    ?_I2CRead 00A7  
                             _Clock_Display 0339                      __size_of_TMR1_CallBack 000B  
                 LED_Initialize@writeBuffer 00BB                       i1_I2C_MasterTRBInsert 0D14  
            i1I2C_MasterTRBInsert@ptrb_list 0070                       TMR1_ISR@CountCallBack 00C4  
                                  ?_LED_Row 00B9                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00A0  
                             __pcstackBANK2 0120                      I2CRead@registerAddress 00A9  
                      __size_of_Clock_Write 0022                                 ??i1_I2CRead 0020  
                                  ?_IncHour 0070                     _I2C_MasterWriteTRBBuild 0B23  
                     ??_I2C_BusCollisionISR 0070                                   __pnvBANK1 00EB  
                                  ?_TapTime 0070                      _PIN_MANAGER_Initialize 0DAA  
           __size_of_I2C_MasterReadTRBBuild 0031                                    ?_SetTurn 0070  
    __end_of_IOCCF3_DefaultInterruptHandler 0004     __size_of_IOCCF3_DefaultInterruptHandler 0001  
            _IOCCF3_DefaultInterruptHandler 0003            __end_of_TMR1_SetInterruptHandler 0932  
                                  ?___lwmod 0076                              ?_Clock_Display 0070  
                 i1_I2C_MasterWriteTRBBuild 0A76                                 ??i1_IncHour 0070  
              __end_of_I2C_FunctionComplete 09B8                ??_INTERRUPT_InterruptManager 003A  
                                 __pswtext1 0800            i1I2C_MasterWriteTRBBuild@address 0073  
                                 _mainState 00CE                           Clock_Write@status 00BA  
                  __size_of_TMR1_StartTimer 0003                                    _I2C_Stop 0A5A  
                            __size_of_Delay 0018                                    _I2CWrite 0B4A  
        __end_of_IOCCF2_SetInterruptHandler 0926                  _IOCCF2_SetInterruptHandler 0920  
              I2C_MasterWriteTRBBuild@pdata 00A0                                   _localHour 00CB  
                                 _localMins 00CA                               _p_i2c_current 004C  
                             _TMR1_CallBack 094E                         i1I2CRead@readBuffer 002C  
                            ___wmul@product 0074                                   clear_ram0 0932  
                                  _PIE1bits 0090                                    _PIE2bits 0091  
                ??i1_I2C_MasterReadTRBBuild 0075                              I2CWrite@length 00B1  
       __size_of_INTERRUPT_InterruptManager 0033                                    _PIR1bits 0010  
                                  _PIR2bits 0011                             i1I2CRead@length 007B  
                            _Acc_Initialize 0F3F                              I2CWrite@status 00B8  
                      I2C_MasterWrite@pdata 00A7                                 ??_Clock_Tap 0037  
                      I2C_MasterWrite@pflag 00AC                        __CFG_WDTCPS$WDTCPS1F 0000  
                           i1I2CRead@status 002D                                    _SSP1CON1 0215  
                                  _SSP1CON3 0217                                    _TMR1_ISR 09C9  
                       I2C_ISR@pi2c_buf_ptr 0043                                    _SSP1STAT 0214  
             i1I2C_MasterWriteTRBBuild@ptrb 0077                           ??_PIN_MANAGER_IOC 007E  
                    ?i1_I2C_MasterTRBInsert 0070                        LED_Initialize@status 00BA  
                          __size_of_I2C_ISR 0148                            __size_of_I2CRead 0042  
                         ??_TMR1_Initialize 003B                           ___wmul@multiplier 0070  
                    _I2C_MasterReadTRBBuild 0C1E                             i1_Clock_Display 0084  
                          __size_of_LED_Row 0079                   __size_of_Clock_Initialize 005E  
           i1I2C_MasterReadTRBBuild@address 0073                                 Delay@length 00A0  
                            ?_TMR1_CallBack 0070                   ??_I2C_MasterWriteTRBBuild 00A5  
                          __size_of_IncHour 0011                      __end_of_Acc_Initialize 1000  
                          ??_I2C_Initialize 003B                       __size_ofi1_Clock_Read 0025  
               Clock_Initialize@writeBuffer 0122                            __size_of_TapTime 0017  
                          __size_of_SetTurn 0009                             ??_Clock_Display 00BF  
                   ??_OSCILLATOR_Initialize 003B                            __size_of___lwmod 002C  
                  i1Clock_Display@fetchTime 0033                    _TMR1_SetInterruptHandler 092C  
                     _TMR1_InterruptHandler 00C6                             _I2C_MasterWrite 0B71  
                                  __ptext10 0EC6                                    __ptext11 0C4F  
                                  __ptext20 0B71                                    __ptext12 0AB5  
                                  __ptext21 0CD2                                    __ptext13 0E03  
                                _T1GCONbits 0019                                    __ptext30 0A3F  
                                  __ptext22 0B23                                    __ptext14 09F5  
                                  __ptext31 0BC1                                    __ptext23 0D59  
                                  __ptext15 0339                                    __ptext40 0084  
                                  __ptext32 0959                                    __ptext24 0C1E  
                                  __ptext16 09B8                                    __ptext41 0997  
                                  __ptext33 098A                                    __ptext17 0A95  
                                  __ptext50 0919                                    __ptext42 0AD7  
                                  __ptext34 0003                                    __ptext26 09C9  
                                  __ptext18 0F3F                                    __ptext43 0C90  
                                  __ptext35 0945                                    __ptext27 094E  
                                  __ptext19 0B4A                                    __ptext44 0A76  
                                  __ptext36 097D                                    __ptext28 07FF  
                                  __ptext45 0D14                                    __ptext37 0002  
                                  __ptext29 0E61                                    __ptext46 0AFC  
                                  __ptext38 09DE                                    __ptext47 05D9  
                                  __ptext39 0BED                                    __ptext48 0A5A  
                                  __ptext49 09A7                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                ??_IOCCF3_SetInterruptHandler 003B  
                         ??_TMR1_StartTimer 003B                      i1Clock_Read@dataBuffer 002F  
                              i1_Clock_Read 0AD7                I2C_MasterTRBInsert@ptrb_list 00A0  
                                _IOCCF2_ISR 097D                                  _IOCCF3_ISR 098A  
                             __size_of_Tick 0065                               __size_of_main 00D1  
                      _I2C_FunctionComplete 09A7                             ?_Acc_Initialize 0070  
                                  _setClock 0048                        __CFG_WDTCWS$WDTCWSSW 0000  
                             I2CWrite@pdata 00AF                                 i1IncHour@in 0070  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0037  
                _INTERRUPT_InterruptManager 0004                     __end_ofi1_Clock_Display 0339  
                                  main@mask 0131                 PIN_MANAGER_Initialize@state 003B  
       __size_of_IOCCF3_SetInterruptHandler 0006                                  _INTCONbits 000B  
                           ??_TMR1_CallBack 007E                                    intlevel1 0000  
                      Clock_Read@dataBuffer 00BC                       ?_I2C_FunctionComplete 0070  
                          ___lwmod@dividend 0078                     ?_PIN_MANAGER_Initialize 0070  
                     I2C_MasterRead@trBlock 00CF                           __CFG_CLKOUTEN$OFF 0000  
              __size_of_I2C_MasterTRBInsert 0051                                 _PPSLOCKbits 0E0F  
                    I2C_MasterWrite@address 00AA                     __size_of_LED_Initialize 0041  
                   __end_of_I2C_MasterWrite 0B99                                _settingHours 0046  
                    I2C_MasterWrite@trBlock 00D4                               ??_Clock_Write 00B9  
                           ___lwmod@divisor 0076                             ___lwmod@counter 007B  
                          _Clock_Initialize 0E03                 ?_IOCCF2_SetInterruptHandler 00A0  
               __end_of_I2C_BusCollisionISR 091A                                 ?_IOCCF2_ISR 0070  
                               ?_IOCCF3_ISR 0070              __end_of_PIN_MANAGER_Initialize 0E03  
            I2C_MasterWriteTRBBuild@address 00A3                             _PIN_MANAGER_IOC 0959  
                           _TMR1_Initialize 0A26               I2C_MasterWriteTRBBuild@length 00A2  
                          Clock_Display@col 00C2  

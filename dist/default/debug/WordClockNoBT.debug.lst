

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jun 17 23:33:10 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	swtext1,local,class=CONST,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 1.45
    68                           ; Generated 16/11/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F1619 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  000E                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001B                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001E                     	;# 
   134  001F                     	;# 
   135  008C                     	;# 
   136  008D                     	;# 
   137  008E                     	;# 
   138  0090                     	;# 
   139  0091                     	;# 
   140  0092                     	;# 
   141  0093                     	;# 
   142  0094                     	;# 
   143  0095                     	;# 
   144  0096                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  009F                     	;# 
   154  010C                     	;# 
   155  010D                     	;# 
   156  010E                     	;# 
   157  0111                     	;# 
   158  0112                     	;# 
   159  0113                     	;# 
   160  0114                     	;# 
   161  0115                     	;# 
   162  0116                     	;# 
   163  0117                     	;# 
   164  0118                     	;# 
   165  0119                     	;# 
   166  011C                     	;# 
   167  018C                     	;# 
   168  018D                     	;# 
   169  018E                     	;# 
   170  0191                     	;# 
   171  0191                     	;# 
   172  0192                     	;# 
   173  0193                     	;# 
   174  0193                     	;# 
   175  0194                     	;# 
   176  0195                     	;# 
   177  0196                     	;# 
   178  0197                     	;# 
   179  0199                     	;# 
   180  0199                     	;# 
   181  0199                     	;# 
   182  019A                     	;# 
   183  019A                     	;# 
   184  019A                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019C                     	;# 
   191  019C                     	;# 
   192  019C                     	;# 
   193  019D                     	;# 
   194  019D                     	;# 
   195  019D                     	;# 
   196  019E                     	;# 
   197  019E                     	;# 
   198  019E                     	;# 
   199  019F                     	;# 
   200  019F                     	;# 
   201  019F                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  020C                     	;# 
   205  020D                     	;# 
   206  020E                     	;# 
   207  0211                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0212                     	;# 
   211  0213                     	;# 
   212  0213                     	;# 
   213  0214                     	;# 
   214  0214                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0215                     	;# 
   219  0216                     	;# 
   220  0216                     	;# 
   221  0217                     	;# 
   222  0217                     	;# 
   223  028C                     	;# 
   224  028D                     	;# 
   225  028E                     	;# 
   226  0291                     	;# 
   227  0291                     	;# 
   228  0292                     	;# 
   229  0293                     	;# 
   230  0294                     	;# 
   231  0298                     	;# 
   232  0298                     	;# 
   233  0299                     	;# 
   234  029A                     	;# 
   235  029B                     	;# 
   236  029E                     	;# 
   237  030C                     	;# 
   238  030D                     	;# 
   239  030E                     	;# 
   240  038C                     	;# 
   241  038D                     	;# 
   242  038E                     	;# 
   243  0391                     	;# 
   244  0392                     	;# 
   245  0393                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  0397                     	;# 
   250  0398                     	;# 
   251  0399                     	;# 
   252  040E                     	;# 
   253  0413                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0414                     	;# 
   257  0415                     	;# 
   258  0416                     	;# 
   259  0417                     	;# 
   260  0418                     	;# 
   261  041A                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041B                     	;# 
   265  041C                     	;# 
   266  041D                     	;# 
   267  041E                     	;# 
   268  041F                     	;# 
   269  0493                     	;# 
   270  0494                     	;# 
   271  0495                     	;# 
   272  0496                     	;# 
   273  049A                     	;# 
   274  049B                     	;# 
   275  049C                     	;# 
   276  049D                     	;# 
   277  058C                     	;# 
   278  058C                     	;# 
   279  058D                     	;# 
   280  058E                     	;# 
   281  058E                     	;# 
   282  058F                     	;# 
   283  0590                     	;# 
   284  0590                     	;# 
   285  0591                     	;# 
   286  0592                     	;# 
   287  0592                     	;# 
   288  0593                     	;# 
   289  0594                     	;# 
   290  0594                     	;# 
   291  0595                     	;# 
   292  0596                     	;# 
   293  0596                     	;# 
   294  0597                     	;# 
   295  0598                     	;# 
   296  0599                     	;# 
   297  059A                     	;# 
   298  059B                     	;# 
   299  059B                     	;# 
   300  059C                     	;# 
   301  059D                     	;# 
   302  060C                     	;# 
   303  060C                     	;# 
   304  060D                     	;# 
   305  060E                     	;# 
   306  060F                     	;# 
   307  060F                     	;# 
   308  0610                     	;# 
   309  0611                     	;# 
   310  0612                     	;# 
   311  0613                     	;# 
   312  0614                     	;# 
   313  0617                     	;# 
   314  0618                     	;# 
   315  0619                     	;# 
   316  061A                     	;# 
   317  061B                     	;# 
   318  061C                     	;# 
   319  0691                     	;# 
   320  0692                     	;# 
   321  0693                     	;# 
   322  0694                     	;# 
   323  0695                     	;# 
   324  0696                     	;# 
   325  0697                     	;# 
   326  0699                     	;# 
   327  069A                     	;# 
   328  0711                     	;# 
   329  0712                     	;# 
   330  0713                     	;# 
   331  0714                     	;# 
   332  0715                     	;# 
   333  0718                     	;# 
   334  0718                     	;# 
   335  0719                     	;# 
   336  071A                     	;# 
   337  071A                     	;# 
   338  071B                     	;# 
   339  071C                     	;# 
   340  071D                     	;# 
   341  0791                     	;# 
   342  0791                     	;# 
   343  0792                     	;# 
   344  0793                     	;# 
   345  0793                     	;# 
   346  0794                     	;# 
   347  0795                     	;# 
   348  0795                     	;# 
   349  0796                     	;# 
   350  0797                     	;# 
   351  0797                     	;# 
   352  0798                     	;# 
   353  0799                     	;# 
   354  079A                     	;# 
   355  080C                     	;# 
   356  080C                     	;# 
   357  080D                     	;# 
   358  080E                     	;# 
   359  080E                     	;# 
   360  080F                     	;# 
   361  0810                     	;# 
   362  0810                     	;# 
   363  0811                     	;# 
   364  0812                     	;# 
   365  0812                     	;# 
   366  0813                     	;# 
   367  0814                     	;# 
   368  0815                     	;# 
   369  0816                     	;# 
   370  0817                     	;# 
   371  0818                     	;# 
   372  0819                     	;# 
   373  081A                     	;# 
   374  081A                     	;# 
   375  081B                     	;# 
   376  081C                     	;# 
   377  081C                     	;# 
   378  081D                     	;# 
   379  088C                     	;# 
   380  088D                     	;# 
   381  088E                     	;# 
   382  088F                     	;# 
   383  088F                     	;# 
   384  0890                     	;# 
   385  0891                     	;# 
   386  0892                     	;# 
   387  0893                     	;# 
   388  0893                     	;# 
   389  0894                     	;# 
   390  0895                     	;# 
   391  0896                     	;# 
   392  0897                     	;# 
   393  0897                     	;# 
   394  0898                     	;# 
   395  0899                     	;# 
   396  0D8C                     	;# 
   397  0D8C                     	;# 
   398  0D8D                     	;# 
   399  0D8E                     	;# 
   400  0D8F                     	;# 
   401  0D8F                     	;# 
   402  0D90                     	;# 
   403  0D91                     	;# 
   404  0D92                     	;# 
   405  0D92                     	;# 
   406  0D93                     	;# 
   407  0D94                     	;# 
   408  0D95                     	;# 
   409  0D95                     	;# 
   410  0D96                     	;# 
   411  0D97                     	;# 
   412  0D98                     	;# 
   413  0D99                     	;# 
   414  0D9A                     	;# 
   415  0D9B                     	;# 
   416  0D9C                     	;# 
   417  0D9D                     	;# 
   418  0D9E                     	;# 
   419  0D9E                     	;# 
   420  0D9F                     	;# 
   421  0DA0                     	;# 
   422  0DA1                     	;# 
   423  0DA1                     	;# 
   424  0DA2                     	;# 
   425  0DA3                     	;# 
   426  0DA4                     	;# 
   427  0DA4                     	;# 
   428  0DA5                     	;# 
   429  0DA6                     	;# 
   430  0DA7                     	;# 
   431  0DA7                     	;# 
   432  0DA8                     	;# 
   433  0DA9                     	;# 
   434  0DAA                     	;# 
   435  0DAB                     	;# 
   436  0DAC                     	;# 
   437  0DAD                     	;# 
   438  0DAE                     	;# 
   439  0DAF                     	;# 
   440  0E0F                     	;# 
   441  0E10                     	;# 
   442  0E11                     	;# 
   443  0E12                     	;# 
   444  0E13                     	;# 
   445  0E14                     	;# 
   446  0E15                     	;# 
   447  0E16                     	;# 
   448  0E17                     	;# 
   449  0E18                     	;# 
   450  0E19                     	;# 
   451  0E1A                     	;# 
   452  0E1B                     	;# 
   453  0E1C                     	;# 
   454  0E1D                     	;# 
   455  0E1E                     	;# 
   456  0E1F                     	;# 
   457  0E20                     	;# 
   458  0E21                     	;# 
   459  0E22                     	;# 
   460  0E23                     	;# 
   461  0E24                     	;# 
   462  0E25                     	;# 
   463  0E26                     	;# 
   464  0E27                     	;# 
   465  0E28                     	;# 
   466  0E29                     	;# 
   467  0E2A                     	;# 
   468  0E2B                     	;# 
   469  0E2C                     	;# 
   470  0E2D                     	;# 
   471  0E2E                     	;# 
   472  0E90                     	;# 
   473  0E91                     	;# 
   474  0E92                     	;# 
   475  0E94                     	;# 
   476  0E95                     	;# 
   477  0E9C                     	;# 
   478  0E9D                     	;# 
   479  0E9E                     	;# 
   480  0E9F                     	;# 
   481  0EA0                     	;# 
   482  0EA1                     	;# 
   483  0EA2                     	;# 
   484  0EA3                     	;# 
   485  0EA4                     	;# 
   486  0EA5                     	;# 
   487  0EA6                     	;# 
   488  0EA7                     	;# 
   489  0F0F                     	;# 
   490  0F10                     	;# 
   491  0F11                     	;# 
   492  0F12                     	;# 
   493  0F13                     	;# 
   494  0F14                     	;# 
   495  0F15                     	;# 
   496  0F16                     	;# 
   497  0F17                     	;# 
   498  0F18                     	;# 
   499  0F19                     	;# 
   500  0F1A                     	;# 
   501  0F1B                     	;# 
   502  0F1C                     	;# 
   503  0F1D                     	;# 
   504  0F1E                     	;# 
   505  0F1F                     	;# 
   506  0F20                     	;# 
   507  0F21                     	;# 
   508  0F22                     	;# 
   509  0F23                     	;# 
   510  0F24                     	;# 
   511  0F25                     	;# 
   512  0F26                     	;# 
   513  0F27                     	;# 
   514  0F28                     	;# 
   515  0F29                     	;# 
   516  0F2A                     	;# 
   517  0F2B                     	;# 
   518  0F2C                     	;# 
   519  0F2D                     	;# 
   520  0F2E                     	;# 
   521  0F2F                     	;# 
   522  0F30                     	;# 
   523  0F31                     	;# 
   524  0F32                     	;# 
   525  0F33                     	;# 
   526  0F34                     	;# 
   527  0F35                     	;# 
   528  0F36                     	;# 
   529  0F37                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  0010                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0013                     	;# 
   560  0014                     	;# 
   561  0015                     	;# 
   562  0016                     	;# 
   563  0016                     	;# 
   564  0017                     	;# 
   565  0018                     	;# 
   566  0019                     	;# 
   567  001A                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001B                     	;# 
   571  001C                     	;# 
   572  001D                     	;# 
   573  001E                     	;# 
   574  001F                     	;# 
   575  008C                     	;# 
   576  008D                     	;# 
   577  008E                     	;# 
   578  0090                     	;# 
   579  0091                     	;# 
   580  0092                     	;# 
   581  0093                     	;# 
   582  0094                     	;# 
   583  0095                     	;# 
   584  0096                     	;# 
   585  0098                     	;# 
   586  0099                     	;# 
   587  009A                     	;# 
   588  009B                     	;# 
   589  009B                     	;# 
   590  009C                     	;# 
   591  009D                     	;# 
   592  009E                     	;# 
   593  009F                     	;# 
   594  010C                     	;# 
   595  010D                     	;# 
   596  010E                     	;# 
   597  0111                     	;# 
   598  0112                     	;# 
   599  0113                     	;# 
   600  0114                     	;# 
   601  0115                     	;# 
   602  0116                     	;# 
   603  0117                     	;# 
   604  0118                     	;# 
   605  0119                     	;# 
   606  011C                     	;# 
   607  018C                     	;# 
   608  018D                     	;# 
   609  018E                     	;# 
   610  0191                     	;# 
   611  0191                     	;# 
   612  0192                     	;# 
   613  0193                     	;# 
   614  0193                     	;# 
   615  0194                     	;# 
   616  0195                     	;# 
   617  0196                     	;# 
   618  0197                     	;# 
   619  0199                     	;# 
   620  0199                     	;# 
   621  0199                     	;# 
   622  019A                     	;# 
   623  019A                     	;# 
   624  019A                     	;# 
   625  019B                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019C                     	;# 
   631  019C                     	;# 
   632  019C                     	;# 
   633  019D                     	;# 
   634  019D                     	;# 
   635  019D                     	;# 
   636  019E                     	;# 
   637  019E                     	;# 
   638  019E                     	;# 
   639  019F                     	;# 
   640  019F                     	;# 
   641  019F                     	;# 
   642  019F                     	;# 
   643  019F                     	;# 
   644  020C                     	;# 
   645  020D                     	;# 
   646  020E                     	;# 
   647  0211                     	;# 
   648  0211                     	;# 
   649  0212                     	;# 
   650  0212                     	;# 
   651  0213                     	;# 
   652  0213                     	;# 
   653  0214                     	;# 
   654  0214                     	;# 
   655  0215                     	;# 
   656  0215                     	;# 
   657  0215                     	;# 
   658  0215                     	;# 
   659  0216                     	;# 
   660  0216                     	;# 
   661  0217                     	;# 
   662  0217                     	;# 
   663  028C                     	;# 
   664  028D                     	;# 
   665  028E                     	;# 
   666  0291                     	;# 
   667  0291                     	;# 
   668  0292                     	;# 
   669  0293                     	;# 
   670  0294                     	;# 
   671  0298                     	;# 
   672  0298                     	;# 
   673  0299                     	;# 
   674  029A                     	;# 
   675  029B                     	;# 
   676  029E                     	;# 
   677  030C                     	;# 
   678  030D                     	;# 
   679  030E                     	;# 
   680  038C                     	;# 
   681  038D                     	;# 
   682  038E                     	;# 
   683  0391                     	;# 
   684  0392                     	;# 
   685  0393                     	;# 
   686  0394                     	;# 
   687  0395                     	;# 
   688  0396                     	;# 
   689  0397                     	;# 
   690  0398                     	;# 
   691  0399                     	;# 
   692  040E                     	;# 
   693  0413                     	;# 
   694  0413                     	;# 
   695  0414                     	;# 
   696  0414                     	;# 
   697  0415                     	;# 
   698  0416                     	;# 
   699  0417                     	;# 
   700  0418                     	;# 
   701  041A                     	;# 
   702  041A                     	;# 
   703  041B                     	;# 
   704  041B                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  041F                     	;# 
   709  0493                     	;# 
   710  0494                     	;# 
   711  0495                     	;# 
   712  0496                     	;# 
   713  049A                     	;# 
   714  049B                     	;# 
   715  049C                     	;# 
   716  049D                     	;# 
   717  058C                     	;# 
   718  058C                     	;# 
   719  058D                     	;# 
   720  058E                     	;# 
   721  058E                     	;# 
   722  058F                     	;# 
   723  0590                     	;# 
   724  0590                     	;# 
   725  0591                     	;# 
   726  0592                     	;# 
   727  0592                     	;# 
   728  0593                     	;# 
   729  0594                     	;# 
   730  0594                     	;# 
   731  0595                     	;# 
   732  0596                     	;# 
   733  0596                     	;# 
   734  0597                     	;# 
   735  0598                     	;# 
   736  0599                     	;# 
   737  059A                     	;# 
   738  059B                     	;# 
   739  059B                     	;# 
   740  059C                     	;# 
   741  059D                     	;# 
   742  060C                     	;# 
   743  060C                     	;# 
   744  060D                     	;# 
   745  060E                     	;# 
   746  060F                     	;# 
   747  060F                     	;# 
   748  0610                     	;# 
   749  0611                     	;# 
   750  0612                     	;# 
   751  0613                     	;# 
   752  0614                     	;# 
   753  0617                     	;# 
   754  0618                     	;# 
   755  0619                     	;# 
   756  061A                     	;# 
   757  061B                     	;# 
   758  061C                     	;# 
   759  0691                     	;# 
   760  0692                     	;# 
   761  0693                     	;# 
   762  0694                     	;# 
   763  0695                     	;# 
   764  0696                     	;# 
   765  0697                     	;# 
   766  0699                     	;# 
   767  069A                     	;# 
   768  0711                     	;# 
   769  0712                     	;# 
   770  0713                     	;# 
   771  0714                     	;# 
   772  0715                     	;# 
   773  0718                     	;# 
   774  0718                     	;# 
   775  0719                     	;# 
   776  071A                     	;# 
   777  071A                     	;# 
   778  071B                     	;# 
   779  071C                     	;# 
   780  071D                     	;# 
   781  0791                     	;# 
   782  0791                     	;# 
   783  0792                     	;# 
   784  0793                     	;# 
   785  0793                     	;# 
   786  0794                     	;# 
   787  0795                     	;# 
   788  0795                     	;# 
   789  0796                     	;# 
   790  0797                     	;# 
   791  0797                     	;# 
   792  0798                     	;# 
   793  0799                     	;# 
   794  079A                     	;# 
   795  080C                     	;# 
   796  080C                     	;# 
   797  080D                     	;# 
   798  080E                     	;# 
   799  080E                     	;# 
   800  080F                     	;# 
   801  0810                     	;# 
   802  0810                     	;# 
   803  0811                     	;# 
   804  0812                     	;# 
   805  0812                     	;# 
   806  0813                     	;# 
   807  0814                     	;# 
   808  0815                     	;# 
   809  0816                     	;# 
   810  0817                     	;# 
   811  0818                     	;# 
   812  0819                     	;# 
   813  081A                     	;# 
   814  081A                     	;# 
   815  081B                     	;# 
   816  081C                     	;# 
   817  081C                     	;# 
   818  081D                     	;# 
   819  088C                     	;# 
   820  088D                     	;# 
   821  088E                     	;# 
   822  088F                     	;# 
   823  088F                     	;# 
   824  0890                     	;# 
   825  0891                     	;# 
   826  0892                     	;# 
   827  0893                     	;# 
   828  0893                     	;# 
   829  0894                     	;# 
   830  0895                     	;# 
   831  0896                     	;# 
   832  0897                     	;# 
   833  0897                     	;# 
   834  0898                     	;# 
   835  0899                     	;# 
   836  0D8C                     	;# 
   837  0D8C                     	;# 
   838  0D8D                     	;# 
   839  0D8E                     	;# 
   840  0D8F                     	;# 
   841  0D8F                     	;# 
   842  0D90                     	;# 
   843  0D91                     	;# 
   844  0D92                     	;# 
   845  0D92                     	;# 
   846  0D93                     	;# 
   847  0D94                     	;# 
   848  0D95                     	;# 
   849  0D95                     	;# 
   850  0D96                     	;# 
   851  0D97                     	;# 
   852  0D98                     	;# 
   853  0D99                     	;# 
   854  0D9A                     	;# 
   855  0D9B                     	;# 
   856  0D9C                     	;# 
   857  0D9D                     	;# 
   858  0D9E                     	;# 
   859  0D9E                     	;# 
   860  0D9F                     	;# 
   861  0DA0                     	;# 
   862  0DA1                     	;# 
   863  0DA1                     	;# 
   864  0DA2                     	;# 
   865  0DA3                     	;# 
   866  0DA4                     	;# 
   867  0DA4                     	;# 
   868  0DA5                     	;# 
   869  0DA6                     	;# 
   870  0DA7                     	;# 
   871  0DA7                     	;# 
   872  0DA8                     	;# 
   873  0DA9                     	;# 
   874  0DAA                     	;# 
   875  0DAB                     	;# 
   876  0DAC                     	;# 
   877  0DAD                     	;# 
   878  0DAE                     	;# 
   879  0DAF                     	;# 
   880  0E0F                     	;# 
   881  0E10                     	;# 
   882  0E11                     	;# 
   883  0E12                     	;# 
   884  0E13                     	;# 
   885  0E14                     	;# 
   886  0E15                     	;# 
   887  0E16                     	;# 
   888  0E17                     	;# 
   889  0E18                     	;# 
   890  0E19                     	;# 
   891  0E1A                     	;# 
   892  0E1B                     	;# 
   893  0E1C                     	;# 
   894  0E1D                     	;# 
   895  0E1E                     	;# 
   896  0E1F                     	;# 
   897  0E20                     	;# 
   898  0E21                     	;# 
   899  0E22                     	;# 
   900  0E23                     	;# 
   901  0E24                     	;# 
   902  0E25                     	;# 
   903  0E26                     	;# 
   904  0E27                     	;# 
   905  0E28                     	;# 
   906  0E29                     	;# 
   907  0E2A                     	;# 
   908  0E2B                     	;# 
   909  0E2C                     	;# 
   910  0E2D                     	;# 
   911  0E2E                     	;# 
   912  0E90                     	;# 
   913  0E91                     	;# 
   914  0E92                     	;# 
   915  0E94                     	;# 
   916  0E95                     	;# 
   917  0E9C                     	;# 
   918  0E9D                     	;# 
   919  0E9E                     	;# 
   920  0E9F                     	;# 
   921  0EA0                     	;# 
   922  0EA1                     	;# 
   923  0EA2                     	;# 
   924  0EA3                     	;# 
   925  0EA4                     	;# 
   926  0EA5                     	;# 
   927  0EA6                     	;# 
   928  0EA7                     	;# 
   929  0F0F                     	;# 
   930  0F10                     	;# 
   931  0F11                     	;# 
   932  0F12                     	;# 
   933  0F13                     	;# 
   934  0F14                     	;# 
   935  0F15                     	;# 
   936  0F16                     	;# 
   937  0F17                     	;# 
   938  0F18                     	;# 
   939  0F19                     	;# 
   940  0F1A                     	;# 
   941  0F1B                     	;# 
   942  0F1C                     	;# 
   943  0F1D                     	;# 
   944  0F1E                     	;# 
   945  0F1F                     	;# 
   946  0F20                     	;# 
   947  0F21                     	;# 
   948  0F22                     	;# 
   949  0F23                     	;# 
   950  0F24                     	;# 
   951  0F25                     	;# 
   952  0F26                     	;# 
   953  0F27                     	;# 
   954  0F28                     	;# 
   955  0F29                     	;# 
   956  0F2A                     	;# 
   957  0F2B                     	;# 
   958  0F2C                     	;# 
   959  0F2D                     	;# 
   960  0F2E                     	;# 
   961  0F2F                     	;# 
   962  0F30                     	;# 
   963  0F31                     	;# 
   964  0F32                     	;# 
   965  0F33                     	;# 
   966  0F34                     	;# 
   967  0F35                     	;# 
   968  0F36                     	;# 
   969  0F37                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000D                     	;# 
   995  000E                     	;# 
   996  0010                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0013                     	;# 
  1000  0014                     	;# 
  1001  0015                     	;# 
  1002  0016                     	;# 
  1003  0016                     	;# 
  1004  0017                     	;# 
  1005  0018                     	;# 
  1006  0019                     	;# 
  1007  001A                     	;# 
  1008  001A                     	;# 
  1009  001B                     	;# 
  1010  001B                     	;# 
  1011  001C                     	;# 
  1012  001D                     	;# 
  1013  001E                     	;# 
  1014  001F                     	;# 
  1015  008C                     	;# 
  1016  008D                     	;# 
  1017  008E                     	;# 
  1018  0090                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0094                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0098                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  009F                     	;# 
  1034  010C                     	;# 
  1035  010D                     	;# 
  1036  010E                     	;# 
  1037  0111                     	;# 
  1038  0112                     	;# 
  1039  0113                     	;# 
  1040  0114                     	;# 
  1041  0115                     	;# 
  1042  0116                     	;# 
  1043  0117                     	;# 
  1044  0118                     	;# 
  1045  0119                     	;# 
  1046  011C                     	;# 
  1047  018C                     	;# 
  1048  018D                     	;# 
  1049  018E                     	;# 
  1050  0191                     	;# 
  1051  0191                     	;# 
  1052  0192                     	;# 
  1053  0193                     	;# 
  1054  0193                     	;# 
  1055  0194                     	;# 
  1056  0195                     	;# 
  1057  0196                     	;# 
  1058  0197                     	;# 
  1059  0199                     	;# 
  1060  0199                     	;# 
  1061  0199                     	;# 
  1062  019A                     	;# 
  1063  019A                     	;# 
  1064  019A                     	;# 
  1065  019B                     	;# 
  1066  019B                     	;# 
  1067  019B                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019C                     	;# 
  1071  019C                     	;# 
  1072  019C                     	;# 
  1073  019D                     	;# 
  1074  019D                     	;# 
  1075  019D                     	;# 
  1076  019E                     	;# 
  1077  019E                     	;# 
  1078  019E                     	;# 
  1079  019F                     	;# 
  1080  019F                     	;# 
  1081  019F                     	;# 
  1082  019F                     	;# 
  1083  019F                     	;# 
  1084  020C                     	;# 
  1085  020D                     	;# 
  1086  020E                     	;# 
  1087  0211                     	;# 
  1088  0211                     	;# 
  1089  0212                     	;# 
  1090  0212                     	;# 
  1091  0213                     	;# 
  1092  0213                     	;# 
  1093  0214                     	;# 
  1094  0214                     	;# 
  1095  0215                     	;# 
  1096  0215                     	;# 
  1097  0215                     	;# 
  1098  0215                     	;# 
  1099  0216                     	;# 
  1100  0216                     	;# 
  1101  0217                     	;# 
  1102  0217                     	;# 
  1103  028C                     	;# 
  1104  028D                     	;# 
  1105  028E                     	;# 
  1106  0291                     	;# 
  1107  0291                     	;# 
  1108  0292                     	;# 
  1109  0293                     	;# 
  1110  0294                     	;# 
  1111  0298                     	;# 
  1112  0298                     	;# 
  1113  0299                     	;# 
  1114  029A                     	;# 
  1115  029B                     	;# 
  1116  029E                     	;# 
  1117  030C                     	;# 
  1118  030D                     	;# 
  1119  030E                     	;# 
  1120  038C                     	;# 
  1121  038D                     	;# 
  1122  038E                     	;# 
  1123  0391                     	;# 
  1124  0392                     	;# 
  1125  0393                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  0397                     	;# 
  1130  0398                     	;# 
  1131  0399                     	;# 
  1132  040E                     	;# 
  1133  0413                     	;# 
  1134  0413                     	;# 
  1135  0414                     	;# 
  1136  0414                     	;# 
  1137  0415                     	;# 
  1138  0416                     	;# 
  1139  0417                     	;# 
  1140  0418                     	;# 
  1141  041A                     	;# 
  1142  041A                     	;# 
  1143  041B                     	;# 
  1144  041B                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  041F                     	;# 
  1149  0493                     	;# 
  1150  0494                     	;# 
  1151  0495                     	;# 
  1152  0496                     	;# 
  1153  049A                     	;# 
  1154  049B                     	;# 
  1155  049C                     	;# 
  1156  049D                     	;# 
  1157  058C                     	;# 
  1158  058C                     	;# 
  1159  058D                     	;# 
  1160  058E                     	;# 
  1161  058E                     	;# 
  1162  058F                     	;# 
  1163  0590                     	;# 
  1164  0590                     	;# 
  1165  0591                     	;# 
  1166  0592                     	;# 
  1167  0592                     	;# 
  1168  0593                     	;# 
  1169  0594                     	;# 
  1170  0594                     	;# 
  1171  0595                     	;# 
  1172  0596                     	;# 
  1173  0596                     	;# 
  1174  0597                     	;# 
  1175  0598                     	;# 
  1176  0599                     	;# 
  1177  059A                     	;# 
  1178  059B                     	;# 
  1179  059B                     	;# 
  1180  059C                     	;# 
  1181  059D                     	;# 
  1182  060C                     	;# 
  1183  060C                     	;# 
  1184  060D                     	;# 
  1185  060E                     	;# 
  1186  060F                     	;# 
  1187  060F                     	;# 
  1188  0610                     	;# 
  1189  0611                     	;# 
  1190  0612                     	;# 
  1191  0613                     	;# 
  1192  0614                     	;# 
  1193  0617                     	;# 
  1194  0618                     	;# 
  1195  0619                     	;# 
  1196  061A                     	;# 
  1197  061B                     	;# 
  1198  061C                     	;# 
  1199  0691                     	;# 
  1200  0692                     	;# 
  1201  0693                     	;# 
  1202  0694                     	;# 
  1203  0695                     	;# 
  1204  0696                     	;# 
  1205  0697                     	;# 
  1206  0699                     	;# 
  1207  069A                     	;# 
  1208  0711                     	;# 
  1209  0712                     	;# 
  1210  0713                     	;# 
  1211  0714                     	;# 
  1212  0715                     	;# 
  1213  0718                     	;# 
  1214  0718                     	;# 
  1215  0719                     	;# 
  1216  071A                     	;# 
  1217  071A                     	;# 
  1218  071B                     	;# 
  1219  071C                     	;# 
  1220  071D                     	;# 
  1221  0791                     	;# 
  1222  0791                     	;# 
  1223  0792                     	;# 
  1224  0793                     	;# 
  1225  0793                     	;# 
  1226  0794                     	;# 
  1227  0795                     	;# 
  1228  0795                     	;# 
  1229  0796                     	;# 
  1230  0797                     	;# 
  1231  0797                     	;# 
  1232  0798                     	;# 
  1233  0799                     	;# 
  1234  079A                     	;# 
  1235  080C                     	;# 
  1236  080C                     	;# 
  1237  080D                     	;# 
  1238  080E                     	;# 
  1239  080E                     	;# 
  1240  080F                     	;# 
  1241  0810                     	;# 
  1242  0810                     	;# 
  1243  0811                     	;# 
  1244  0812                     	;# 
  1245  0812                     	;# 
  1246  0813                     	;# 
  1247  0814                     	;# 
  1248  0815                     	;# 
  1249  0816                     	;# 
  1250  0817                     	;# 
  1251  0818                     	;# 
  1252  0819                     	;# 
  1253  081A                     	;# 
  1254  081A                     	;# 
  1255  081B                     	;# 
  1256  081C                     	;# 
  1257  081C                     	;# 
  1258  081D                     	;# 
  1259  088C                     	;# 
  1260  088D                     	;# 
  1261  088E                     	;# 
  1262  088F                     	;# 
  1263  088F                     	;# 
  1264  0890                     	;# 
  1265  0891                     	;# 
  1266  0892                     	;# 
  1267  0893                     	;# 
  1268  0893                     	;# 
  1269  0894                     	;# 
  1270  0895                     	;# 
  1271  0896                     	;# 
  1272  0897                     	;# 
  1273  0897                     	;# 
  1274  0898                     	;# 
  1275  0899                     	;# 
  1276  0D8C                     	;# 
  1277  0D8C                     	;# 
  1278  0D8D                     	;# 
  1279  0D8E                     	;# 
  1280  0D8F                     	;# 
  1281  0D8F                     	;# 
  1282  0D90                     	;# 
  1283  0D91                     	;# 
  1284  0D92                     	;# 
  1285  0D92                     	;# 
  1286  0D93                     	;# 
  1287  0D94                     	;# 
  1288  0D95                     	;# 
  1289  0D95                     	;# 
  1290  0D96                     	;# 
  1291  0D97                     	;# 
  1292  0D98                     	;# 
  1293  0D99                     	;# 
  1294  0D9A                     	;# 
  1295  0D9B                     	;# 
  1296  0D9C                     	;# 
  1297  0D9D                     	;# 
  1298  0D9E                     	;# 
  1299  0D9E                     	;# 
  1300  0D9F                     	;# 
  1301  0DA0                     	;# 
  1302  0DA1                     	;# 
  1303  0DA1                     	;# 
  1304  0DA2                     	;# 
  1305  0DA3                     	;# 
  1306  0DA4                     	;# 
  1307  0DA4                     	;# 
  1308  0DA5                     	;# 
  1309  0DA6                     	;# 
  1310  0DA7                     	;# 
  1311  0DA7                     	;# 
  1312  0DA8                     	;# 
  1313  0DA9                     	;# 
  1314  0DAA                     	;# 
  1315  0DAB                     	;# 
  1316  0DAC                     	;# 
  1317  0DAD                     	;# 
  1318  0DAE                     	;# 
  1319  0DAF                     	;# 
  1320  0E0F                     	;# 
  1321  0E10                     	;# 
  1322  0E11                     	;# 
  1323  0E12                     	;# 
  1324  0E13                     	;# 
  1325  0E14                     	;# 
  1326  0E15                     	;# 
  1327  0E16                     	;# 
  1328  0E17                     	;# 
  1329  0E18                     	;# 
  1330  0E19                     	;# 
  1331  0E1A                     	;# 
  1332  0E1B                     	;# 
  1333  0E1C                     	;# 
  1334  0E1D                     	;# 
  1335  0E1E                     	;# 
  1336  0E1F                     	;# 
  1337  0E20                     	;# 
  1338  0E21                     	;# 
  1339  0E22                     	;# 
  1340  0E23                     	;# 
  1341  0E24                     	;# 
  1342  0E25                     	;# 
  1343  0E26                     	;# 
  1344  0E27                     	;# 
  1345  0E28                     	;# 
  1346  0E29                     	;# 
  1347  0E2A                     	;# 
  1348  0E2B                     	;# 
  1349  0E2C                     	;# 
  1350  0E2D                     	;# 
  1351  0E2E                     	;# 
  1352  0E90                     	;# 
  1353  0E91                     	;# 
  1354  0E92                     	;# 
  1355  0E94                     	;# 
  1356  0E95                     	;# 
  1357  0E9C                     	;# 
  1358  0E9D                     	;# 
  1359  0E9E                     	;# 
  1360  0E9F                     	;# 
  1361  0EA0                     	;# 
  1362  0EA1                     	;# 
  1363  0EA2                     	;# 
  1364  0EA3                     	;# 
  1365  0EA4                     	;# 
  1366  0EA5                     	;# 
  1367  0EA6                     	;# 
  1368  0EA7                     	;# 
  1369  0F0F                     	;# 
  1370  0F10                     	;# 
  1371  0F11                     	;# 
  1372  0F12                     	;# 
  1373  0F13                     	;# 
  1374  0F14                     	;# 
  1375  0F15                     	;# 
  1376  0F16                     	;# 
  1377  0F17                     	;# 
  1378  0F18                     	;# 
  1379  0F19                     	;# 
  1380  0F1A                     	;# 
  1381  0F1B                     	;# 
  1382  0F1C                     	;# 
  1383  0F1D                     	;# 
  1384  0F1E                     	;# 
  1385  0F1F                     	;# 
  1386  0F20                     	;# 
  1387  0F21                     	;# 
  1388  0F22                     	;# 
  1389  0F23                     	;# 
  1390  0F24                     	;# 
  1391  0F25                     	;# 
  1392  0F26                     	;# 
  1393  0F27                     	;# 
  1394  0F28                     	;# 
  1395  0F29                     	;# 
  1396  0F2A                     	;# 
  1397  0F2B                     	;# 
  1398  0F2C                     	;# 
  1399  0F2D                     	;# 
  1400  0F2E                     	;# 
  1401  0F2F                     	;# 
  1402  0F30                     	;# 
  1403  0F31                     	;# 
  1404  0F32                     	;# 
  1405  0F33                     	;# 
  1406  0F34                     	;# 
  1407  0F35                     	;# 
  1408  0F36                     	;# 
  1409  0F37                     	;# 
  1410  0FE4                     	;# 
  1411  0FE5                     	;# 
  1412  0FE6                     	;# 
  1413  0FE7                     	;# 
  1414  0FE8                     	;# 
  1415  0FE9                     	;# 
  1416  0FEA                     	;# 
  1417  0FEB                     	;# 
  1418  0FED                     	;# 
  1419  0FEE                     	;# 
  1420  0FEF                     	;# 
  1421  0000                     	;# 
  1422  0001                     	;# 
  1423  0002                     	;# 
  1424  0003                     	;# 
  1425  0004                     	;# 
  1426  0005                     	;# 
  1427  0006                     	;# 
  1428  0007                     	;# 
  1429  0008                     	;# 
  1430  0009                     	;# 
  1431  000A                     	;# 
  1432  000B                     	;# 
  1433  000C                     	;# 
  1434  000D                     	;# 
  1435  000E                     	;# 
  1436  0010                     	;# 
  1437  0011                     	;# 
  1438  0012                     	;# 
  1439  0013                     	;# 
  1440  0014                     	;# 
  1441  0015                     	;# 
  1442  0016                     	;# 
  1443  0016                     	;# 
  1444  0017                     	;# 
  1445  0018                     	;# 
  1446  0019                     	;# 
  1447  001A                     	;# 
  1448  001A                     	;# 
  1449  001B                     	;# 
  1450  001B                     	;# 
  1451  001C                     	;# 
  1452  001D                     	;# 
  1453  001E                     	;# 
  1454  001F                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  0090                     	;# 
  1459  0091                     	;# 
  1460  0092                     	;# 
  1461  0093                     	;# 
  1462  0094                     	;# 
  1463  0095                     	;# 
  1464  0096                     	;# 
  1465  0098                     	;# 
  1466  0099                     	;# 
  1467  009A                     	;# 
  1468  009B                     	;# 
  1469  009B                     	;# 
  1470  009C                     	;# 
  1471  009D                     	;# 
  1472  009E                     	;# 
  1473  009F                     	;# 
  1474  010C                     	;# 
  1475  010D                     	;# 
  1476  010E                     	;# 
  1477  0111                     	;# 
  1478  0112                     	;# 
  1479  0113                     	;# 
  1480  0114                     	;# 
  1481  0115                     	;# 
  1482  0116                     	;# 
  1483  0117                     	;# 
  1484  0118                     	;# 
  1485  0119                     	;# 
  1486  011C                     	;# 
  1487  018C                     	;# 
  1488  018D                     	;# 
  1489  018E                     	;# 
  1490  0191                     	;# 
  1491  0191                     	;# 
  1492  0192                     	;# 
  1493  0193                     	;# 
  1494  0193                     	;# 
  1495  0194                     	;# 
  1496  0195                     	;# 
  1497  0196                     	;# 
  1498  0197                     	;# 
  1499  0199                     	;# 
  1500  0199                     	;# 
  1501  0199                     	;# 
  1502  019A                     	;# 
  1503  019A                     	;# 
  1504  019A                     	;# 
  1505  019B                     	;# 
  1506  019B                     	;# 
  1507  019B                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019C                     	;# 
  1511  019C                     	;# 
  1512  019C                     	;# 
  1513  019D                     	;# 
  1514  019D                     	;# 
  1515  019D                     	;# 
  1516  019E                     	;# 
  1517  019E                     	;# 
  1518  019E                     	;# 
  1519  019F                     	;# 
  1520  019F                     	;# 
  1521  019F                     	;# 
  1522  019F                     	;# 
  1523  019F                     	;# 
  1524  020C                     	;# 
  1525  020D                     	;# 
  1526  020E                     	;# 
  1527  0211                     	;# 
  1528  0211                     	;# 
  1529  0212                     	;# 
  1530  0212                     	;# 
  1531  0213                     	;# 
  1532  0213                     	;# 
  1533  0214                     	;# 
  1534  0214                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0215                     	;# 
  1538  0215                     	;# 
  1539  0216                     	;# 
  1540  0216                     	;# 
  1541  0217                     	;# 
  1542  0217                     	;# 
  1543  028C                     	;# 
  1544  028D                     	;# 
  1545  028E                     	;# 
  1546  0291                     	;# 
  1547  0291                     	;# 
  1548  0292                     	;# 
  1549  0293                     	;# 
  1550  0294                     	;# 
  1551  0298                     	;# 
  1552  0298                     	;# 
  1553  0299                     	;# 
  1554  029A                     	;# 
  1555  029B                     	;# 
  1556  029E                     	;# 
  1557  030C                     	;# 
  1558  030D                     	;# 
  1559  030E                     	;# 
  1560  038C                     	;# 
  1561  038D                     	;# 
  1562  038E                     	;# 
  1563  0391                     	;# 
  1564  0392                     	;# 
  1565  0393                     	;# 
  1566  0394                     	;# 
  1567  0395                     	;# 
  1568  0396                     	;# 
  1569  0397                     	;# 
  1570  0398                     	;# 
  1571  0399                     	;# 
  1572  040E                     	;# 
  1573  0413                     	;# 
  1574  0413                     	;# 
  1575  0414                     	;# 
  1576  0414                     	;# 
  1577  0415                     	;# 
  1578  0416                     	;# 
  1579  0417                     	;# 
  1580  0418                     	;# 
  1581  041A                     	;# 
  1582  041A                     	;# 
  1583  041B                     	;# 
  1584  041B                     	;# 
  1585  041C                     	;# 
  1586  041D                     	;# 
  1587  041E                     	;# 
  1588  041F                     	;# 
  1589  0493                     	;# 
  1590  0494                     	;# 
  1591  0495                     	;# 
  1592  0496                     	;# 
  1593  049A                     	;# 
  1594  049B                     	;# 
  1595  049C                     	;# 
  1596  049D                     	;# 
  1597  058C                     	;# 
  1598  058C                     	;# 
  1599  058D                     	;# 
  1600  058E                     	;# 
  1601  058E                     	;# 
  1602  058F                     	;# 
  1603  0590                     	;# 
  1604  0590                     	;# 
  1605  0591                     	;# 
  1606  0592                     	;# 
  1607  0592                     	;# 
  1608  0593                     	;# 
  1609  0594                     	;# 
  1610  0594                     	;# 
  1611  0595                     	;# 
  1612  0596                     	;# 
  1613  0596                     	;# 
  1614  0597                     	;# 
  1615  0598                     	;# 
  1616  0599                     	;# 
  1617  059A                     	;# 
  1618  059B                     	;# 
  1619  059B                     	;# 
  1620  059C                     	;# 
  1621  059D                     	;# 
  1622  060C                     	;# 
  1623  060C                     	;# 
  1624  060D                     	;# 
  1625  060E                     	;# 
  1626  060F                     	;# 
  1627  060F                     	;# 
  1628  0610                     	;# 
  1629  0611                     	;# 
  1630  0612                     	;# 
  1631  0613                     	;# 
  1632  0614                     	;# 
  1633  0617                     	;# 
  1634  0618                     	;# 
  1635  0619                     	;# 
  1636  061A                     	;# 
  1637  061B                     	;# 
  1638  061C                     	;# 
  1639  0691                     	;# 
  1640  0692                     	;# 
  1641  0693                     	;# 
  1642  0694                     	;# 
  1643  0695                     	;# 
  1644  0696                     	;# 
  1645  0697                     	;# 
  1646  0699                     	;# 
  1647  069A                     	;# 
  1648  0711                     	;# 
  1649  0712                     	;# 
  1650  0713                     	;# 
  1651  0714                     	;# 
  1652  0715                     	;# 
  1653  0718                     	;# 
  1654  0718                     	;# 
  1655  0719                     	;# 
  1656  071A                     	;# 
  1657  071A                     	;# 
  1658  071B                     	;# 
  1659  071C                     	;# 
  1660  071D                     	;# 
  1661  0791                     	;# 
  1662  0791                     	;# 
  1663  0792                     	;# 
  1664  0793                     	;# 
  1665  0793                     	;# 
  1666  0794                     	;# 
  1667  0795                     	;# 
  1668  0795                     	;# 
  1669  0796                     	;# 
  1670  0797                     	;# 
  1671  0797                     	;# 
  1672  0798                     	;# 
  1673  0799                     	;# 
  1674  079A                     	;# 
  1675  080C                     	;# 
  1676  080C                     	;# 
  1677  080D                     	;# 
  1678  080E                     	;# 
  1679  080E                     	;# 
  1680  080F                     	;# 
  1681  0810                     	;# 
  1682  0810                     	;# 
  1683  0811                     	;# 
  1684  0812                     	;# 
  1685  0812                     	;# 
  1686  0813                     	;# 
  1687  0814                     	;# 
  1688  0815                     	;# 
  1689  0816                     	;# 
  1690  0817                     	;# 
  1691  0818                     	;# 
  1692  0819                     	;# 
  1693  081A                     	;# 
  1694  081A                     	;# 
  1695  081B                     	;# 
  1696  081C                     	;# 
  1697  081C                     	;# 
  1698  081D                     	;# 
  1699  088C                     	;# 
  1700  088D                     	;# 
  1701  088E                     	;# 
  1702  088F                     	;# 
  1703  088F                     	;# 
  1704  0890                     	;# 
  1705  0891                     	;# 
  1706  0892                     	;# 
  1707  0893                     	;# 
  1708  0893                     	;# 
  1709  0894                     	;# 
  1710  0895                     	;# 
  1711  0896                     	;# 
  1712  0897                     	;# 
  1713  0897                     	;# 
  1714  0898                     	;# 
  1715  0899                     	;# 
  1716  0D8C                     	;# 
  1717  0D8C                     	;# 
  1718  0D8D                     	;# 
  1719  0D8E                     	;# 
  1720  0D8F                     	;# 
  1721  0D8F                     	;# 
  1722  0D90                     	;# 
  1723  0D91                     	;# 
  1724  0D92                     	;# 
  1725  0D92                     	;# 
  1726  0D93                     	;# 
  1727  0D94                     	;# 
  1728  0D95                     	;# 
  1729  0D95                     	;# 
  1730  0D96                     	;# 
  1731  0D97                     	;# 
  1732  0D98                     	;# 
  1733  0D99                     	;# 
  1734  0D9A                     	;# 
  1735  0D9B                     	;# 
  1736  0D9C                     	;# 
  1737  0D9D                     	;# 
  1738  0D9E                     	;# 
  1739  0D9E                     	;# 
  1740  0D9F                     	;# 
  1741  0DA0                     	;# 
  1742  0DA1                     	;# 
  1743  0DA1                     	;# 
  1744  0DA2                     	;# 
  1745  0DA3                     	;# 
  1746  0DA4                     	;# 
  1747  0DA4                     	;# 
  1748  0DA5                     	;# 
  1749  0DA6                     	;# 
  1750  0DA7                     	;# 
  1751  0DA7                     	;# 
  1752  0DA8                     	;# 
  1753  0DA9                     	;# 
  1754  0DAA                     	;# 
  1755  0DAB                     	;# 
  1756  0DAC                     	;# 
  1757  0DAD                     	;# 
  1758  0DAE                     	;# 
  1759  0DAF                     	;# 
  1760  0E0F                     	;# 
  1761  0E10                     	;# 
  1762  0E11                     	;# 
  1763  0E12                     	;# 
  1764  0E13                     	;# 
  1765  0E14                     	;# 
  1766  0E15                     	;# 
  1767  0E16                     	;# 
  1768  0E17                     	;# 
  1769  0E18                     	;# 
  1770  0E19                     	;# 
  1771  0E1A                     	;# 
  1772  0E1B                     	;# 
  1773  0E1C                     	;# 
  1774  0E1D                     	;# 
  1775  0E1E                     	;# 
  1776  0E1F                     	;# 
  1777  0E20                     	;# 
  1778  0E21                     	;# 
  1779  0E22                     	;# 
  1780  0E23                     	;# 
  1781  0E24                     	;# 
  1782  0E25                     	;# 
  1783  0E26                     	;# 
  1784  0E27                     	;# 
  1785  0E28                     	;# 
  1786  0E29                     	;# 
  1787  0E2A                     	;# 
  1788  0E2B                     	;# 
  1789  0E2C                     	;# 
  1790  0E2D                     	;# 
  1791  0E2E                     	;# 
  1792  0E90                     	;# 
  1793  0E91                     	;# 
  1794  0E92                     	;# 
  1795  0E94                     	;# 
  1796  0E95                     	;# 
  1797  0E9C                     	;# 
  1798  0E9D                     	;# 
  1799  0E9E                     	;# 
  1800  0E9F                     	;# 
  1801  0EA0                     	;# 
  1802  0EA1                     	;# 
  1803  0EA2                     	;# 
  1804  0EA3                     	;# 
  1805  0EA4                     	;# 
  1806  0EA5                     	;# 
  1807  0EA6                     	;# 
  1808  0EA7                     	;# 
  1809  0F0F                     	;# 
  1810  0F10                     	;# 
  1811  0F11                     	;# 
  1812  0F12                     	;# 
  1813  0F13                     	;# 
  1814  0F14                     	;# 
  1815  0F15                     	;# 
  1816  0F16                     	;# 
  1817  0F17                     	;# 
  1818  0F18                     	;# 
  1819  0F19                     	;# 
  1820  0F1A                     	;# 
  1821  0F1B                     	;# 
  1822  0F1C                     	;# 
  1823  0F1D                     	;# 
  1824  0F1E                     	;# 
  1825  0F1F                     	;# 
  1826  0F20                     	;# 
  1827  0F21                     	;# 
  1828  0F22                     	;# 
  1829  0F23                     	;# 
  1830  0F24                     	;# 
  1831  0F25                     	;# 
  1832  0F26                     	;# 
  1833  0F27                     	;# 
  1834  0F28                     	;# 
  1835  0F29                     	;# 
  1836  0F2A                     	;# 
  1837  0F2B                     	;# 
  1838  0F2C                     	;# 
  1839  0F2D                     	;# 
  1840  0F2E                     	;# 
  1841  0F2F                     	;# 
  1842  0F30                     	;# 
  1843  0F31                     	;# 
  1844  0F32                     	;# 
  1845  0F33                     	;# 
  1846  0F34                     	;# 
  1847  0F35                     	;# 
  1848  0F36                     	;# 
  1849  0F37                     	;# 
  1850  0FE4                     	;# 
  1851  0FE5                     	;# 
  1852  0FE6                     	;# 
  1853  0FE7                     	;# 
  1854  0FE8                     	;# 
  1855  0FE9                     	;# 
  1856  0FEA                     	;# 
  1857  0FEB                     	;# 
  1858  0FED                     	;# 
  1859  0FEE                     	;# 
  1860  0FEF                     	;# 
  1861  0000                     	;# 
  1862  0001                     	;# 
  1863  0002                     	;# 
  1864  0003                     	;# 
  1865  0004                     	;# 
  1866  0005                     	;# 
  1867  0006                     	;# 
  1868  0007                     	;# 
  1869  0008                     	;# 
  1870  0009                     	;# 
  1871  000A                     	;# 
  1872  000B                     	;# 
  1873  000C                     	;# 
  1874  000D                     	;# 
  1875  000E                     	;# 
  1876  0010                     	;# 
  1877  0011                     	;# 
  1878  0012                     	;# 
  1879  0013                     	;# 
  1880  0014                     	;# 
  1881  0015                     	;# 
  1882  0016                     	;# 
  1883  0016                     	;# 
  1884  0017                     	;# 
  1885  0018                     	;# 
  1886  0019                     	;# 
  1887  001A                     	;# 
  1888  001A                     	;# 
  1889  001B                     	;# 
  1890  001B                     	;# 
  1891  001C                     	;# 
  1892  001D                     	;# 
  1893  001E                     	;# 
  1894  001F                     	;# 
  1895  008C                     	;# 
  1896  008D                     	;# 
  1897  008E                     	;# 
  1898  0090                     	;# 
  1899  0091                     	;# 
  1900  0092                     	;# 
  1901  0093                     	;# 
  1902  0094                     	;# 
  1903  0095                     	;# 
  1904  0096                     	;# 
  1905  0098                     	;# 
  1906  0099                     	;# 
  1907  009A                     	;# 
  1908  009B                     	;# 
  1909  009B                     	;# 
  1910  009C                     	;# 
  1911  009D                     	;# 
  1912  009E                     	;# 
  1913  009F                     	;# 
  1914  010C                     	;# 
  1915  010D                     	;# 
  1916  010E                     	;# 
  1917  0111                     	;# 
  1918  0112                     	;# 
  1919  0113                     	;# 
  1920  0114                     	;# 
  1921  0115                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  0118                     	;# 
  1925  0119                     	;# 
  1926  011C                     	;# 
  1927  018C                     	;# 
  1928  018D                     	;# 
  1929  018E                     	;# 
  1930  0191                     	;# 
  1931  0191                     	;# 
  1932  0192                     	;# 
  1933  0193                     	;# 
  1934  0193                     	;# 
  1935  0194                     	;# 
  1936  0195                     	;# 
  1937  0196                     	;# 
  1938  0197                     	;# 
  1939  0199                     	;# 
  1940  0199                     	;# 
  1941  0199                     	;# 
  1942  019A                     	;# 
  1943  019A                     	;# 
  1944  019A                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019C                     	;# 
  1951  019C                     	;# 
  1952  019C                     	;# 
  1953  019D                     	;# 
  1954  019D                     	;# 
  1955  019D                     	;# 
  1956  019E                     	;# 
  1957  019E                     	;# 
  1958  019E                     	;# 
  1959  019F                     	;# 
  1960  019F                     	;# 
  1961  019F                     	;# 
  1962  019F                     	;# 
  1963  019F                     	;# 
  1964  020C                     	;# 
  1965  020D                     	;# 
  1966  020E                     	;# 
  1967  0211                     	;# 
  1968  0211                     	;# 
  1969  0212                     	;# 
  1970  0212                     	;# 
  1971  0213                     	;# 
  1972  0213                     	;# 
  1973  0214                     	;# 
  1974  0214                     	;# 
  1975  0215                     	;# 
  1976  0215                     	;# 
  1977  0215                     	;# 
  1978  0215                     	;# 
  1979  0216                     	;# 
  1980  0216                     	;# 
  1981  0217                     	;# 
  1982  0217                     	;# 
  1983  028C                     	;# 
  1984  028D                     	;# 
  1985  028E                     	;# 
  1986  0291                     	;# 
  1987  0291                     	;# 
  1988  0292                     	;# 
  1989  0293                     	;# 
  1990  0294                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029B                     	;# 
  1996  029E                     	;# 
  1997  030C                     	;# 
  1998  030D                     	;# 
  1999  030E                     	;# 
  2000  038C                     	;# 
  2001  038D                     	;# 
  2002  038E                     	;# 
  2003  0391                     	;# 
  2004  0392                     	;# 
  2005  0393                     	;# 
  2006  0394                     	;# 
  2007  0395                     	;# 
  2008  0396                     	;# 
  2009  0397                     	;# 
  2010  0398                     	;# 
  2011  0399                     	;# 
  2012  040E                     	;# 
  2013  0413                     	;# 
  2014  0413                     	;# 
  2015  0414                     	;# 
  2016  0414                     	;# 
  2017  0415                     	;# 
  2018  0416                     	;# 
  2019  0417                     	;# 
  2020  0418                     	;# 
  2021  041A                     	;# 
  2022  041A                     	;# 
  2023  041B                     	;# 
  2024  041B                     	;# 
  2025  041C                     	;# 
  2026  041D                     	;# 
  2027  041E                     	;# 
  2028  041F                     	;# 
  2029  0493                     	;# 
  2030  0494                     	;# 
  2031  0495                     	;# 
  2032  0496                     	;# 
  2033  049A                     	;# 
  2034  049B                     	;# 
  2035  049C                     	;# 
  2036  049D                     	;# 
  2037  058C                     	;# 
  2038  058C                     	;# 
  2039  058D                     	;# 
  2040  058E                     	;# 
  2041  058E                     	;# 
  2042  058F                     	;# 
  2043  0590                     	;# 
  2044  0590                     	;# 
  2045  0591                     	;# 
  2046  0592                     	;# 
  2047  0592                     	;# 
  2048  0593                     	;# 
  2049  0594                     	;# 
  2050  0594                     	;# 
  2051  0595                     	;# 
  2052  0596                     	;# 
  2053  0596                     	;# 
  2054  0597                     	;# 
  2055  0598                     	;# 
  2056  0599                     	;# 
  2057  059A                     	;# 
  2058  059B                     	;# 
  2059  059B                     	;# 
  2060  059C                     	;# 
  2061  059D                     	;# 
  2062  060C                     	;# 
  2063  060C                     	;# 
  2064  060D                     	;# 
  2065  060E                     	;# 
  2066  060F                     	;# 
  2067  060F                     	;# 
  2068  0610                     	;# 
  2069  0611                     	;# 
  2070  0612                     	;# 
  2071  0613                     	;# 
  2072  0614                     	;# 
  2073  0617                     	;# 
  2074  0618                     	;# 
  2075  0619                     	;# 
  2076  061A                     	;# 
  2077  061B                     	;# 
  2078  061C                     	;# 
  2079  0691                     	;# 
  2080  0692                     	;# 
  2081  0693                     	;# 
  2082  0694                     	;# 
  2083  0695                     	;# 
  2084  0696                     	;# 
  2085  0697                     	;# 
  2086  0699                     	;# 
  2087  069A                     	;# 
  2088  0711                     	;# 
  2089  0712                     	;# 
  2090  0713                     	;# 
  2091  0714                     	;# 
  2092  0715                     	;# 
  2093  0718                     	;# 
  2094  0718                     	;# 
  2095  0719                     	;# 
  2096  071A                     	;# 
  2097  071A                     	;# 
  2098  071B                     	;# 
  2099  071C                     	;# 
  2100  071D                     	;# 
  2101  0791                     	;# 
  2102  0791                     	;# 
  2103  0792                     	;# 
  2104  0793                     	;# 
  2105  0793                     	;# 
  2106  0794                     	;# 
  2107  0795                     	;# 
  2108  0795                     	;# 
  2109  0796                     	;# 
  2110  0797                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  080C                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080E                     	;# 
  2120  080F                     	;# 
  2121  0810                     	;# 
  2122  0810                     	;# 
  2123  0811                     	;# 
  2124  0812                     	;# 
  2125  0812                     	;# 
  2126  0813                     	;# 
  2127  0814                     	;# 
  2128  0815                     	;# 
  2129  0816                     	;# 
  2130  0817                     	;# 
  2131  0818                     	;# 
  2132  0819                     	;# 
  2133  081A                     	;# 
  2134  081A                     	;# 
  2135  081B                     	;# 
  2136  081C                     	;# 
  2137  081C                     	;# 
  2138  081D                     	;# 
  2139  088C                     	;# 
  2140  088D                     	;# 
  2141  088E                     	;# 
  2142  088F                     	;# 
  2143  088F                     	;# 
  2144  0890                     	;# 
  2145  0891                     	;# 
  2146  0892                     	;# 
  2147  0893                     	;# 
  2148  0893                     	;# 
  2149  0894                     	;# 
  2150  0895                     	;# 
  2151  0896                     	;# 
  2152  0897                     	;# 
  2153  0897                     	;# 
  2154  0898                     	;# 
  2155  0899                     	;# 
  2156  0D8C                     	;# 
  2157  0D8C                     	;# 
  2158  0D8D                     	;# 
  2159  0D8E                     	;# 
  2160  0D8F                     	;# 
  2161  0D8F                     	;# 
  2162  0D90                     	;# 
  2163  0D91                     	;# 
  2164  0D92                     	;# 
  2165  0D92                     	;# 
  2166  0D93                     	;# 
  2167  0D94                     	;# 
  2168  0D95                     	;# 
  2169  0D95                     	;# 
  2170  0D96                     	;# 
  2171  0D97                     	;# 
  2172  0D98                     	;# 
  2173  0D99                     	;# 
  2174  0D9A                     	;# 
  2175  0D9B                     	;# 
  2176  0D9C                     	;# 
  2177  0D9D                     	;# 
  2178  0D9E                     	;# 
  2179  0D9E                     	;# 
  2180  0D9F                     	;# 
  2181  0DA0                     	;# 
  2182  0DA1                     	;# 
  2183  0DA1                     	;# 
  2184  0DA2                     	;# 
  2185  0DA3                     	;# 
  2186  0DA4                     	;# 
  2187  0DA4                     	;# 
  2188  0DA5                     	;# 
  2189  0DA6                     	;# 
  2190  0DA7                     	;# 
  2191  0DA7                     	;# 
  2192  0DA8                     	;# 
  2193  0DA9                     	;# 
  2194  0DAA                     	;# 
  2195  0DAB                     	;# 
  2196  0DAC                     	;# 
  2197  0DAD                     	;# 
  2198  0DAE                     	;# 
  2199  0DAF                     	;# 
  2200  0E0F                     	;# 
  2201  0E10                     	;# 
  2202  0E11                     	;# 
  2203  0E12                     	;# 
  2204  0E13                     	;# 
  2205  0E14                     	;# 
  2206  0E15                     	;# 
  2207  0E16                     	;# 
  2208  0E17                     	;# 
  2209  0E18                     	;# 
  2210  0E19                     	;# 
  2211  0E1A                     	;# 
  2212  0E1B                     	;# 
  2213  0E1C                     	;# 
  2214  0E1D                     	;# 
  2215  0E1E                     	;# 
  2216  0E1F                     	;# 
  2217  0E20                     	;# 
  2218  0E21                     	;# 
  2219  0E22                     	;# 
  2220  0E23                     	;# 
  2221  0E24                     	;# 
  2222  0E25                     	;# 
  2223  0E26                     	;# 
  2224  0E27                     	;# 
  2225  0E28                     	;# 
  2226  0E29                     	;# 
  2227  0E2A                     	;# 
  2228  0E2B                     	;# 
  2229  0E2C                     	;# 
  2230  0E2D                     	;# 
  2231  0E2E                     	;# 
  2232  0E90                     	;# 
  2233  0E91                     	;# 
  2234  0E92                     	;# 
  2235  0E94                     	;# 
  2236  0E95                     	;# 
  2237  0E9C                     	;# 
  2238  0E9D                     	;# 
  2239  0E9E                     	;# 
  2240  0E9F                     	;# 
  2241  0EA0                     	;# 
  2242  0EA1                     	;# 
  2243  0EA2                     	;# 
  2244  0EA3                     	;# 
  2245  0EA4                     	;# 
  2246  0EA5                     	;# 
  2247  0EA6                     	;# 
  2248  0EA7                     	;# 
  2249  0F0F                     	;# 
  2250  0F10                     	;# 
  2251  0F11                     	;# 
  2252  0F12                     	;# 
  2253  0F13                     	;# 
  2254  0F14                     	;# 
  2255  0F15                     	;# 
  2256  0F16                     	;# 
  2257  0F17                     	;# 
  2258  0F18                     	;# 
  2259  0F19                     	;# 
  2260  0F1A                     	;# 
  2261  0F1B                     	;# 
  2262  0F1C                     	;# 
  2263  0F1D                     	;# 
  2264  0F1E                     	;# 
  2265  0F1F                     	;# 
  2266  0F20                     	;# 
  2267  0F21                     	;# 
  2268  0F22                     	;# 
  2269  0F23                     	;# 
  2270  0F24                     	;# 
  2271  0F25                     	;# 
  2272  0F26                     	;# 
  2273  0F27                     	;# 
  2274  0F28                     	;# 
  2275  0F29                     	;# 
  2276  0F2A                     	;# 
  2277  0F2B                     	;# 
  2278  0F2C                     	;# 
  2279  0F2D                     	;# 
  2280  0F2E                     	;# 
  2281  0F2F                     	;# 
  2282  0F30                     	;# 
  2283  0F31                     	;# 
  2284  0F32                     	;# 
  2285  0F33                     	;# 
  2286  0F34                     	;# 
  2287  0F35                     	;# 
  2288  0F36                     	;# 
  2289  0F37                     	;# 
  2290  0FE4                     	;# 
  2291  0FE5                     	;# 
  2292  0FE6                     	;# 
  2293  0FE7                     	;# 
  2294  0FE8                     	;# 
  2295  0FE9                     	;# 
  2296  0FEA                     	;# 
  2297  0FEB                     	;# 
  2298  0FED                     	;# 
  2299  0FEE                     	;# 
  2300  0FEF                     	;# 
  2301  0000                     	;# 
  2302  0001                     	;# 
  2303  0002                     	;# 
  2304  0003                     	;# 
  2305  0004                     	;# 
  2306  0005                     	;# 
  2307  0006                     	;# 
  2308  0007                     	;# 
  2309  0008                     	;# 
  2310  0009                     	;# 
  2311  000A                     	;# 
  2312  000B                     	;# 
  2313  000C                     	;# 
  2314  000D                     	;# 
  2315  000E                     	;# 
  2316  0010                     	;# 
  2317  0011                     	;# 
  2318  0012                     	;# 
  2319  0013                     	;# 
  2320  0014                     	;# 
  2321  0015                     	;# 
  2322  0016                     	;# 
  2323  0016                     	;# 
  2324  0017                     	;# 
  2325  0018                     	;# 
  2326  0019                     	;# 
  2327  001A                     	;# 
  2328  001A                     	;# 
  2329  001B                     	;# 
  2330  001B                     	;# 
  2331  001C                     	;# 
  2332  001D                     	;# 
  2333  001E                     	;# 
  2334  001F                     	;# 
  2335  008C                     	;# 
  2336  008D                     	;# 
  2337  008E                     	;# 
  2338  0090                     	;# 
  2339  0091                     	;# 
  2340  0092                     	;# 
  2341  0093                     	;# 
  2342  0094                     	;# 
  2343  0095                     	;# 
  2344  0096                     	;# 
  2345  0098                     	;# 
  2346  0099                     	;# 
  2347  009A                     	;# 
  2348  009B                     	;# 
  2349  009B                     	;# 
  2350  009C                     	;# 
  2351  009D                     	;# 
  2352  009E                     	;# 
  2353  009F                     	;# 
  2354  010C                     	;# 
  2355  010D                     	;# 
  2356  010E                     	;# 
  2357  0111                     	;# 
  2358  0112                     	;# 
  2359  0113                     	;# 
  2360  0114                     	;# 
  2361  0115                     	;# 
  2362  0116                     	;# 
  2363  0117                     	;# 
  2364  0118                     	;# 
  2365  0119                     	;# 
  2366  011C                     	;# 
  2367  018C                     	;# 
  2368  018D                     	;# 
  2369  018E                     	;# 
  2370  0191                     	;# 
  2371  0191                     	;# 
  2372  0192                     	;# 
  2373  0193                     	;# 
  2374  0193                     	;# 
  2375  0194                     	;# 
  2376  0195                     	;# 
  2377  0196                     	;# 
  2378  0197                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  019F                     	;# 
  2403  019F                     	;# 
  2404  020C                     	;# 
  2405  020D                     	;# 
  2406  020E                     	;# 
  2407  0211                     	;# 
  2408  0211                     	;# 
  2409  0212                     	;# 
  2410  0212                     	;# 
  2411  0213                     	;# 
  2412  0213                     	;# 
  2413  0214                     	;# 
  2414  0214                     	;# 
  2415  0215                     	;# 
  2416  0215                     	;# 
  2417  0215                     	;# 
  2418  0215                     	;# 
  2419  0216                     	;# 
  2420  0216                     	;# 
  2421  0217                     	;# 
  2422  0217                     	;# 
  2423  028C                     	;# 
  2424  028D                     	;# 
  2425  028E                     	;# 
  2426  0291                     	;# 
  2427  0291                     	;# 
  2428  0292                     	;# 
  2429  0293                     	;# 
  2430  0294                     	;# 
  2431  0298                     	;# 
  2432  0298                     	;# 
  2433  0299                     	;# 
  2434  029A                     	;# 
  2435  029B                     	;# 
  2436  029E                     	;# 
  2437  030C                     	;# 
  2438  030D                     	;# 
  2439  030E                     	;# 
  2440  038C                     	;# 
  2441  038D                     	;# 
  2442  038E                     	;# 
  2443  0391                     	;# 
  2444  0392                     	;# 
  2445  0393                     	;# 
  2446  0394                     	;# 
  2447  0395                     	;# 
  2448  0396                     	;# 
  2449  0397                     	;# 
  2450  0398                     	;# 
  2451  0399                     	;# 
  2452  040E                     	;# 
  2453  0413                     	;# 
  2454  0413                     	;# 
  2455  0414                     	;# 
  2456  0414                     	;# 
  2457  0415                     	;# 
  2458  0416                     	;# 
  2459  0417                     	;# 
  2460  0418                     	;# 
  2461  041A                     	;# 
  2462  041A                     	;# 
  2463  041B                     	;# 
  2464  041B                     	;# 
  2465  041C                     	;# 
  2466  041D                     	;# 
  2467  041E                     	;# 
  2468  041F                     	;# 
  2469  0493                     	;# 
  2470  0494                     	;# 
  2471  0495                     	;# 
  2472  0496                     	;# 
  2473  049A                     	;# 
  2474  049B                     	;# 
  2475  049C                     	;# 
  2476  049D                     	;# 
  2477  058C                     	;# 
  2478  058C                     	;# 
  2479  058D                     	;# 
  2480  058E                     	;# 
  2481  058E                     	;# 
  2482  058F                     	;# 
  2483  0590                     	;# 
  2484  0590                     	;# 
  2485  0591                     	;# 
  2486  0592                     	;# 
  2487  0592                     	;# 
  2488  0593                     	;# 
  2489  0594                     	;# 
  2490  0594                     	;# 
  2491  0595                     	;# 
  2492  0596                     	;# 
  2493  0596                     	;# 
  2494  0597                     	;# 
  2495  0598                     	;# 
  2496  0599                     	;# 
  2497  059A                     	;# 
  2498  059B                     	;# 
  2499  059B                     	;# 
  2500  059C                     	;# 
  2501  059D                     	;# 
  2502  060C                     	;# 
  2503  060C                     	;# 
  2504  060D                     	;# 
  2505  060E                     	;# 
  2506  060F                     	;# 
  2507  060F                     	;# 
  2508  0610                     	;# 
  2509  0611                     	;# 
  2510  0612                     	;# 
  2511  0613                     	;# 
  2512  0614                     	;# 
  2513  0617                     	;# 
  2514  0618                     	;# 
  2515  0619                     	;# 
  2516  061A                     	;# 
  2517  061B                     	;# 
  2518  061C                     	;# 
  2519  0691                     	;# 
  2520  0692                     	;# 
  2521  0693                     	;# 
  2522  0694                     	;# 
  2523  0695                     	;# 
  2524  0696                     	;# 
  2525  0697                     	;# 
  2526  0699                     	;# 
  2527  069A                     	;# 
  2528  0711                     	;# 
  2529  0712                     	;# 
  2530  0713                     	;# 
  2531  0714                     	;# 
  2532  0715                     	;# 
  2533  0718                     	;# 
  2534  0718                     	;# 
  2535  0719                     	;# 
  2536  071A                     	;# 
  2537  071A                     	;# 
  2538  071B                     	;# 
  2539  071C                     	;# 
  2540  071D                     	;# 
  2541  0791                     	;# 
  2542  0791                     	;# 
  2543  0792                     	;# 
  2544  0793                     	;# 
  2545  0793                     	;# 
  2546  0794                     	;# 
  2547  0795                     	;# 
  2548  0795                     	;# 
  2549  0796                     	;# 
  2550  0797                     	;# 
  2551  0797                     	;# 
  2552  0798                     	;# 
  2553  0799                     	;# 
  2554  079A                     	;# 
  2555  080C                     	;# 
  2556  080C                     	;# 
  2557  080D                     	;# 
  2558  080E                     	;# 
  2559  080E                     	;# 
  2560  080F                     	;# 
  2561  0810                     	;# 
  2562  0810                     	;# 
  2563  0811                     	;# 
  2564  0812                     	;# 
  2565  0812                     	;# 
  2566  0813                     	;# 
  2567  0814                     	;# 
  2568  0815                     	;# 
  2569  0816                     	;# 
  2570  0817                     	;# 
  2571  0818                     	;# 
  2572  0819                     	;# 
  2573  081A                     	;# 
  2574  081A                     	;# 
  2575  081B                     	;# 
  2576  081C                     	;# 
  2577  081C                     	;# 
  2578  081D                     	;# 
  2579  088C                     	;# 
  2580  088D                     	;# 
  2581  088E                     	;# 
  2582  088F                     	;# 
  2583  088F                     	;# 
  2584  0890                     	;# 
  2585  0891                     	;# 
  2586  0892                     	;# 
  2587  0893                     	;# 
  2588  0893                     	;# 
  2589  0894                     	;# 
  2590  0895                     	;# 
  2591  0896                     	;# 
  2592  0897                     	;# 
  2593  0897                     	;# 
  2594  0898                     	;# 
  2595  0899                     	;# 
  2596  0D8C                     	;# 
  2597  0D8C                     	;# 
  2598  0D8D                     	;# 
  2599  0D8E                     	;# 
  2600  0D8F                     	;# 
  2601  0D8F                     	;# 
  2602  0D90                     	;# 
  2603  0D91                     	;# 
  2604  0D92                     	;# 
  2605  0D92                     	;# 
  2606  0D93                     	;# 
  2607  0D94                     	;# 
  2608  0D95                     	;# 
  2609  0D95                     	;# 
  2610  0D96                     	;# 
  2611  0D97                     	;# 
  2612  0D98                     	;# 
  2613  0D99                     	;# 
  2614  0D9A                     	;# 
  2615  0D9B                     	;# 
  2616  0D9C                     	;# 
  2617  0D9D                     	;# 
  2618  0D9E                     	;# 
  2619  0D9E                     	;# 
  2620  0D9F                     	;# 
  2621  0DA0                     	;# 
  2622  0DA1                     	;# 
  2623  0DA1                     	;# 
  2624  0DA2                     	;# 
  2625  0DA3                     	;# 
  2626  0DA4                     	;# 
  2627  0DA4                     	;# 
  2628  0DA5                     	;# 
  2629  0DA6                     	;# 
  2630  0DA7                     	;# 
  2631  0DA7                     	;# 
  2632  0DA8                     	;# 
  2633  0DA9                     	;# 
  2634  0DAA                     	;# 
  2635  0DAB                     	;# 
  2636  0DAC                     	;# 
  2637  0DAD                     	;# 
  2638  0DAE                     	;# 
  2639  0DAF                     	;# 
  2640  0E0F                     	;# 
  2641  0E10                     	;# 
  2642  0E11                     	;# 
  2643  0E12                     	;# 
  2644  0E13                     	;# 
  2645  0E14                     	;# 
  2646  0E15                     	;# 
  2647  0E16                     	;# 
  2648  0E17                     	;# 
  2649  0E18                     	;# 
  2650  0E19                     	;# 
  2651  0E1A                     	;# 
  2652  0E1B                     	;# 
  2653  0E1C                     	;# 
  2654  0E1D                     	;# 
  2655  0E1E                     	;# 
  2656  0E1F                     	;# 
  2657  0E20                     	;# 
  2658  0E21                     	;# 
  2659  0E22                     	;# 
  2660  0E23                     	;# 
  2661  0E24                     	;# 
  2662  0E25                     	;# 
  2663  0E26                     	;# 
  2664  0E27                     	;# 
  2665  0E28                     	;# 
  2666  0E29                     	;# 
  2667  0E2A                     	;# 
  2668  0E2B                     	;# 
  2669  0E2C                     	;# 
  2670  0E2D                     	;# 
  2671  0E2E                     	;# 
  2672  0E90                     	;# 
  2673  0E91                     	;# 
  2674  0E92                     	;# 
  2675  0E94                     	;# 
  2676  0E95                     	;# 
  2677  0E9C                     	;# 
  2678  0E9D                     	;# 
  2679  0E9E                     	;# 
  2680  0E9F                     	;# 
  2681  0EA0                     	;# 
  2682  0EA1                     	;# 
  2683  0EA2                     	;# 
  2684  0EA3                     	;# 
  2685  0EA4                     	;# 
  2686  0EA5                     	;# 
  2687  0EA6                     	;# 
  2688  0EA7                     	;# 
  2689  0F0F                     	;# 
  2690  0F10                     	;# 
  2691  0F11                     	;# 
  2692  0F12                     	;# 
  2693  0F13                     	;# 
  2694  0F14                     	;# 
  2695  0F15                     	;# 
  2696  0F16                     	;# 
  2697  0F17                     	;# 
  2698  0F18                     	;# 
  2699  0F19                     	;# 
  2700  0F1A                     	;# 
  2701  0F1B                     	;# 
  2702  0F1C                     	;# 
  2703  0F1D                     	;# 
  2704  0F1E                     	;# 
  2705  0F1F                     	;# 
  2706  0F20                     	;# 
  2707  0F21                     	;# 
  2708  0F22                     	;# 
  2709  0F23                     	;# 
  2710  0F24                     	;# 
  2711  0F25                     	;# 
  2712  0F26                     	;# 
  2713  0F27                     	;# 
  2714  0F28                     	;# 
  2715  0F29                     	;# 
  2716  0F2A                     	;# 
  2717  0F2B                     	;# 
  2718  0F2C                     	;# 
  2719  0F2D                     	;# 
  2720  0F2E                     	;# 
  2721  0F2F                     	;# 
  2722  0F30                     	;# 
  2723  0F31                     	;# 
  2724  0F32                     	;# 
  2725  0F33                     	;# 
  2726  0F34                     	;# 
  2727  0F35                     	;# 
  2728  0F36                     	;# 
  2729  0F37                     	;# 
  2730  0FE4                     	;# 
  2731  0FE5                     	;# 
  2732  0FE6                     	;# 
  2733  0FE7                     	;# 
  2734  0FE8                     	;# 
  2735  0FE9                     	;# 
  2736  0FEA                     	;# 
  2737  0FEB                     	;# 
  2738  0FED                     	;# 
  2739  0FEE                     	;# 
  2740  0FEF                     	;# 
  2741  0000                     	;# 
  2742  0001                     	;# 
  2743  0002                     	;# 
  2744  0003                     	;# 
  2745  0004                     	;# 
  2746  0005                     	;# 
  2747  0006                     	;# 
  2748  0007                     	;# 
  2749  0008                     	;# 
  2750  0009                     	;# 
  2751  000A                     	;# 
  2752  000B                     	;# 
  2753  000C                     	;# 
  2754  000D                     	;# 
  2755  000E                     	;# 
  2756  0010                     	;# 
  2757  0011                     	;# 
  2758  0012                     	;# 
  2759  0013                     	;# 
  2760  0014                     	;# 
  2761  0015                     	;# 
  2762  0016                     	;# 
  2763  0016                     	;# 
  2764  0017                     	;# 
  2765  0018                     	;# 
  2766  0019                     	;# 
  2767  001A                     	;# 
  2768  001A                     	;# 
  2769  001B                     	;# 
  2770  001B                     	;# 
  2771  001C                     	;# 
  2772  001D                     	;# 
  2773  001E                     	;# 
  2774  001F                     	;# 
  2775  008C                     	;# 
  2776  008D                     	;# 
  2777  008E                     	;# 
  2778  0090                     	;# 
  2779  0091                     	;# 
  2780  0092                     	;# 
  2781  0093                     	;# 
  2782  0094                     	;# 
  2783  0095                     	;# 
  2784  0096                     	;# 
  2785  0098                     	;# 
  2786  0099                     	;# 
  2787  009A                     	;# 
  2788  009B                     	;# 
  2789  009B                     	;# 
  2790  009C                     	;# 
  2791  009D                     	;# 
  2792  009E                     	;# 
  2793  009F                     	;# 
  2794  010C                     	;# 
  2795  010D                     	;# 
  2796  010E                     	;# 
  2797  0111                     	;# 
  2798  0112                     	;# 
  2799  0113                     	;# 
  2800  0114                     	;# 
  2801  0115                     	;# 
  2802  0116                     	;# 
  2803  0117                     	;# 
  2804  0118                     	;# 
  2805  0119                     	;# 
  2806  011C                     	;# 
  2807  018C                     	;# 
  2808  018D                     	;# 
  2809  018E                     	;# 
  2810  0191                     	;# 
  2811  0191                     	;# 
  2812  0192                     	;# 
  2813  0193                     	;# 
  2814  0193                     	;# 
  2815  0194                     	;# 
  2816  0195                     	;# 
  2817  0196                     	;# 
  2818  0197                     	;# 
  2819  0199                     	;# 
  2820  0199                     	;# 
  2821  0199                     	;# 
  2822  019A                     	;# 
  2823  019A                     	;# 
  2824  019A                     	;# 
  2825  019B                     	;# 
  2826  019B                     	;# 
  2827  019B                     	;# 
  2828  019B                     	;# 
  2829  019B                     	;# 
  2830  019C                     	;# 
  2831  019C                     	;# 
  2832  019C                     	;# 
  2833  019D                     	;# 
  2834  019D                     	;# 
  2835  019D                     	;# 
  2836  019E                     	;# 
  2837  019E                     	;# 
  2838  019E                     	;# 
  2839  019F                     	;# 
  2840  019F                     	;# 
  2841  019F                     	;# 
  2842  019F                     	;# 
  2843  019F                     	;# 
  2844  020C                     	;# 
  2845  020D                     	;# 
  2846  020E                     	;# 
  2847  0211                     	;# 
  2848  0211                     	;# 
  2849  0212                     	;# 
  2850  0212                     	;# 
  2851  0213                     	;# 
  2852  0213                     	;# 
  2853  0214                     	;# 
  2854  0214                     	;# 
  2855  0215                     	;# 
  2856  0215                     	;# 
  2857  0215                     	;# 
  2858  0215                     	;# 
  2859  0216                     	;# 
  2860  0216                     	;# 
  2861  0217                     	;# 
  2862  0217                     	;# 
  2863  028C                     	;# 
  2864  028D                     	;# 
  2865  028E                     	;# 
  2866  0291                     	;# 
  2867  0291                     	;# 
  2868  0292                     	;# 
  2869  0293                     	;# 
  2870  0294                     	;# 
  2871  0298                     	;# 
  2872  0298                     	;# 
  2873  0299                     	;# 
  2874  029A                     	;# 
  2875  029B                     	;# 
  2876  029E                     	;# 
  2877  030C                     	;# 
  2878  030D                     	;# 
  2879  030E                     	;# 
  2880  038C                     	;# 
  2881  038D                     	;# 
  2882  038E                     	;# 
  2883  0391                     	;# 
  2884  0392                     	;# 
  2885  0393                     	;# 
  2886  0394                     	;# 
  2887  0395                     	;# 
  2888  0396                     	;# 
  2889  0397                     	;# 
  2890  0398                     	;# 
  2891  0399                     	;# 
  2892  040E                     	;# 
  2893  0413                     	;# 
  2894  0413                     	;# 
  2895  0414                     	;# 
  2896  0414                     	;# 
  2897  0415                     	;# 
  2898  0416                     	;# 
  2899  0417                     	;# 
  2900  0418                     	;# 
  2901  041A                     	;# 
  2902  041A                     	;# 
  2903  041B                     	;# 
  2904  041B                     	;# 
  2905  041C                     	;# 
  2906  041D                     	;# 
  2907  041E                     	;# 
  2908  041F                     	;# 
  2909  0493                     	;# 
  2910  0494                     	;# 
  2911  0495                     	;# 
  2912  0496                     	;# 
  2913  049A                     	;# 
  2914  049B                     	;# 
  2915  049C                     	;# 
  2916  049D                     	;# 
  2917  058C                     	;# 
  2918  058C                     	;# 
  2919  058D                     	;# 
  2920  058E                     	;# 
  2921  058E                     	;# 
  2922  058F                     	;# 
  2923  0590                     	;# 
  2924  0590                     	;# 
  2925  0591                     	;# 
  2926  0592                     	;# 
  2927  0592                     	;# 
  2928  0593                     	;# 
  2929  0594                     	;# 
  2930  0594                     	;# 
  2931  0595                     	;# 
  2932  0596                     	;# 
  2933  0596                     	;# 
  2934  0597                     	;# 
  2935  0598                     	;# 
  2936  0599                     	;# 
  2937  059A                     	;# 
  2938  059B                     	;# 
  2939  059B                     	;# 
  2940  059C                     	;# 
  2941  059D                     	;# 
  2942  060C                     	;# 
  2943  060C                     	;# 
  2944  060D                     	;# 
  2945  060E                     	;# 
  2946  060F                     	;# 
  2947  060F                     	;# 
  2948  0610                     	;# 
  2949  0611                     	;# 
  2950  0612                     	;# 
  2951  0613                     	;# 
  2952  0614                     	;# 
  2953  0617                     	;# 
  2954  0618                     	;# 
  2955  0619                     	;# 
  2956  061A                     	;# 
  2957  061B                     	;# 
  2958  061C                     	;# 
  2959  0691                     	;# 
  2960  0692                     	;# 
  2961  0693                     	;# 
  2962  0694                     	;# 
  2963  0695                     	;# 
  2964  0696                     	;# 
  2965  0697                     	;# 
  2966  0699                     	;# 
  2967  069A                     	;# 
  2968  0711                     	;# 
  2969  0712                     	;# 
  2970  0713                     	;# 
  2971  0714                     	;# 
  2972  0715                     	;# 
  2973  0718                     	;# 
  2974  0718                     	;# 
  2975  0719                     	;# 
  2976  071A                     	;# 
  2977  071A                     	;# 
  2978  071B                     	;# 
  2979  071C                     	;# 
  2980  071D                     	;# 
  2981  0791                     	;# 
  2982  0791                     	;# 
  2983  0792                     	;# 
  2984  0793                     	;# 
  2985  0793                     	;# 
  2986  0794                     	;# 
  2987  0795                     	;# 
  2988  0795                     	;# 
  2989  0796                     	;# 
  2990  0797                     	;# 
  2991  0797                     	;# 
  2992  0798                     	;# 
  2993  0799                     	;# 
  2994  079A                     	;# 
  2995  080C                     	;# 
  2996  080C                     	;# 
  2997  080D                     	;# 
  2998  080E                     	;# 
  2999  080E                     	;# 
  3000  080F                     	;# 
  3001  0810                     	;# 
  3002  0810                     	;# 
  3003  0811                     	;# 
  3004  0812                     	;# 
  3005  0812                     	;# 
  3006  0813                     	;# 
  3007  0814                     	;# 
  3008  0815                     	;# 
  3009  0816                     	;# 
  3010  0817                     	;# 
  3011  0818                     	;# 
  3012  0819                     	;# 
  3013  081A                     	;# 
  3014  081A                     	;# 
  3015  081B                     	;# 
  3016  081C                     	;# 
  3017  081C                     	;# 
  3018  081D                     	;# 
  3019  088C                     	;# 
  3020  088D                     	;# 
  3021  088E                     	;# 
  3022  088F                     	;# 
  3023  088F                     	;# 
  3024  0890                     	;# 
  3025  0891                     	;# 
  3026  0892                     	;# 
  3027  0893                     	;# 
  3028  0893                     	;# 
  3029  0894                     	;# 
  3030  0895                     	;# 
  3031  0896                     	;# 
  3032  0897                     	;# 
  3033  0897                     	;# 
  3034  0898                     	;# 
  3035  0899                     	;# 
  3036  0D8C                     	;# 
  3037  0D8C                     	;# 
  3038  0D8D                     	;# 
  3039  0D8E                     	;# 
  3040  0D8F                     	;# 
  3041  0D8F                     	;# 
  3042  0D90                     	;# 
  3043  0D91                     	;# 
  3044  0D92                     	;# 
  3045  0D92                     	;# 
  3046  0D93                     	;# 
  3047  0D94                     	;# 
  3048  0D95                     	;# 
  3049  0D95                     	;# 
  3050  0D96                     	;# 
  3051  0D97                     	;# 
  3052  0D98                     	;# 
  3053  0D99                     	;# 
  3054  0D9A                     	;# 
  3055  0D9B                     	;# 
  3056  0D9C                     	;# 
  3057  0D9D                     	;# 
  3058  0D9E                     	;# 
  3059  0D9E                     	;# 
  3060  0D9F                     	;# 
  3061  0DA0                     	;# 
  3062  0DA1                     	;# 
  3063  0DA1                     	;# 
  3064  0DA2                     	;# 
  3065  0DA3                     	;# 
  3066  0DA4                     	;# 
  3067  0DA4                     	;# 
  3068  0DA5                     	;# 
  3069  0DA6                     	;# 
  3070  0DA7                     	;# 
  3071  0DA7                     	;# 
  3072  0DA8                     	;# 
  3073  0DA9                     	;# 
  3074  0DAA                     	;# 
  3075  0DAB                     	;# 
  3076  0DAC                     	;# 
  3077  0DAD                     	;# 
  3078  0DAE                     	;# 
  3079  0DAF                     	;# 
  3080  0E0F                     	;# 
  3081  0E10                     	;# 
  3082  0E11                     	;# 
  3083  0E12                     	;# 
  3084  0E13                     	;# 
  3085  0E14                     	;# 
  3086  0E15                     	;# 
  3087  0E16                     	;# 
  3088  0E17                     	;# 
  3089  0E18                     	;# 
  3090  0E19                     	;# 
  3091  0E1A                     	;# 
  3092  0E1B                     	;# 
  3093  0E1C                     	;# 
  3094  0E1D                     	;# 
  3095  0E1E                     	;# 
  3096  0E1F                     	;# 
  3097  0E20                     	;# 
  3098  0E21                     	;# 
  3099  0E22                     	;# 
  3100  0E23                     	;# 
  3101  0E24                     	;# 
  3102  0E25                     	;# 
  3103  0E26                     	;# 
  3104  0E27                     	;# 
  3105  0E28                     	;# 
  3106  0E29                     	;# 
  3107  0E2A                     	;# 
  3108  0E2B                     	;# 
  3109  0E2C                     	;# 
  3110  0E2D                     	;# 
  3111  0E2E                     	;# 
  3112  0E90                     	;# 
  3113  0E91                     	;# 
  3114  0E92                     	;# 
  3115  0E94                     	;# 
  3116  0E95                     	;# 
  3117  0E9C                     	;# 
  3118  0E9D                     	;# 
  3119  0E9E                     	;# 
  3120  0E9F                     	;# 
  3121  0EA0                     	;# 
  3122  0EA1                     	;# 
  3123  0EA2                     	;# 
  3124  0EA3                     	;# 
  3125  0EA4                     	;# 
  3126  0EA5                     	;# 
  3127  0EA6                     	;# 
  3128  0EA7                     	;# 
  3129  0F0F                     	;# 
  3130  0F10                     	;# 
  3131  0F11                     	;# 
  3132  0F12                     	;# 
  3133  0F13                     	;# 
  3134  0F14                     	;# 
  3135  0F15                     	;# 
  3136  0F16                     	;# 
  3137  0F17                     	;# 
  3138  0F18                     	;# 
  3139  0F19                     	;# 
  3140  0F1A                     	;# 
  3141  0F1B                     	;# 
  3142  0F1C                     	;# 
  3143  0F1D                     	;# 
  3144  0F1E                     	;# 
  3145  0F1F                     	;# 
  3146  0F20                     	;# 
  3147  0F21                     	;# 
  3148  0F22                     	;# 
  3149  0F23                     	;# 
  3150  0F24                     	;# 
  3151  0F25                     	;# 
  3152  0F26                     	;# 
  3153  0F27                     	;# 
  3154  0F28                     	;# 
  3155  0F29                     	;# 
  3156  0F2A                     	;# 
  3157  0F2B                     	;# 
  3158  0F2C                     	;# 
  3159  0F2D                     	;# 
  3160  0F2E                     	;# 
  3161  0F2F                     	;# 
  3162  0F30                     	;# 
  3163  0F31                     	;# 
  3164  0F32                     	;# 
  3165  0F33                     	;# 
  3166  0F34                     	;# 
  3167  0F35                     	;# 
  3168  0F36                     	;# 
  3169  0F37                     	;# 
  3170  0FE4                     	;# 
  3171  0FE5                     	;# 
  3172  0FE6                     	;# 
  3173  0FE7                     	;# 
  3174  0FE8                     	;# 
  3175  0FE9                     	;# 
  3176  0FEA                     	;# 
  3177  0FEB                     	;# 
  3178  0FED                     	;# 
  3179  0FEE                     	;# 
  3180  0FEF                     	;# 
  3181  0000                     	;# 
  3182  0001                     	;# 
  3183  0002                     	;# 
  3184  0003                     	;# 
  3185  0004                     	;# 
  3186  0005                     	;# 
  3187  0006                     	;# 
  3188  0007                     	;# 
  3189  0008                     	;# 
  3190  0009                     	;# 
  3191  000A                     	;# 
  3192  000B                     	;# 
  3193  000C                     	;# 
  3194  000D                     	;# 
  3195  000E                     	;# 
  3196  0010                     	;# 
  3197  0011                     	;# 
  3198  0012                     	;# 
  3199  0013                     	;# 
  3200  0014                     	;# 
  3201  0015                     	;# 
  3202  0016                     	;# 
  3203  0016                     	;# 
  3204  0017                     	;# 
  3205  0018                     	;# 
  3206  0019                     	;# 
  3207  001A                     	;# 
  3208  001A                     	;# 
  3209  001B                     	;# 
  3210  001B                     	;# 
  3211  001C                     	;# 
  3212  001D                     	;# 
  3213  001E                     	;# 
  3214  001F                     	;# 
  3215  008C                     	;# 
  3216  008D                     	;# 
  3217  008E                     	;# 
  3218  0090                     	;# 
  3219  0091                     	;# 
  3220  0092                     	;# 
  3221  0093                     	;# 
  3222  0094                     	;# 
  3223  0095                     	;# 
  3224  0096                     	;# 
  3225  0098                     	;# 
  3226  0099                     	;# 
  3227  009A                     	;# 
  3228  009B                     	;# 
  3229  009B                     	;# 
  3230  009C                     	;# 
  3231  009D                     	;# 
  3232  009E                     	;# 
  3233  009F                     	;# 
  3234  010C                     	;# 
  3235  010D                     	;# 
  3236  010E                     	;# 
  3237  0111                     	;# 
  3238  0112                     	;# 
  3239  0113                     	;# 
  3240  0114                     	;# 
  3241  0115                     	;# 
  3242  0116                     	;# 
  3243  0117                     	;# 
  3244  0118                     	;# 
  3245  0119                     	;# 
  3246  011C                     	;# 
  3247  018C                     	;# 
  3248  018D                     	;# 
  3249  018E                     	;# 
  3250  0191                     	;# 
  3251  0191                     	;# 
  3252  0192                     	;# 
  3253  0193                     	;# 
  3254  0193                     	;# 
  3255  0194                     	;# 
  3256  0195                     	;# 
  3257  0196                     	;# 
  3258  0197                     	;# 
  3259  0199                     	;# 
  3260  0199                     	;# 
  3261  0199                     	;# 
  3262  019A                     	;# 
  3263  019A                     	;# 
  3264  019A                     	;# 
  3265  019B                     	;# 
  3266  019B                     	;# 
  3267  019B                     	;# 
  3268  019B                     	;# 
  3269  019B                     	;# 
  3270  019C                     	;# 
  3271  019C                     	;# 
  3272  019C                     	;# 
  3273  019D                     	;# 
  3274  019D                     	;# 
  3275  019D                     	;# 
  3276  019E                     	;# 
  3277  019E                     	;# 
  3278  019E                     	;# 
  3279  019F                     	;# 
  3280  019F                     	;# 
  3281  019F                     	;# 
  3282  019F                     	;# 
  3283  019F                     	;# 
  3284  020C                     	;# 
  3285  020D                     	;# 
  3286  020E                     	;# 
  3287  0211                     	;# 
  3288  0211                     	;# 
  3289  0212                     	;# 
  3290  0212                     	;# 
  3291  0213                     	;# 
  3292  0213                     	;# 
  3293  0214                     	;# 
  3294  0214                     	;# 
  3295  0215                     	;# 
  3296  0215                     	;# 
  3297  0215                     	;# 
  3298  0215                     	;# 
  3299  0216                     	;# 
  3300  0216                     	;# 
  3301  0217                     	;# 
  3302  0217                     	;# 
  3303  028C                     	;# 
  3304  028D                     	;# 
  3305  028E                     	;# 
  3306  0291                     	;# 
  3307  0291                     	;# 
  3308  0292                     	;# 
  3309  0293                     	;# 
  3310  0294                     	;# 
  3311  0298                     	;# 
  3312  0298                     	;# 
  3313  0299                     	;# 
  3314  029A                     	;# 
  3315  029B                     	;# 
  3316  029E                     	;# 
  3317  030C                     	;# 
  3318  030D                     	;# 
  3319  030E                     	;# 
  3320  038C                     	;# 
  3321  038D                     	;# 
  3322  038E                     	;# 
  3323  0391                     	;# 
  3324  0392                     	;# 
  3325  0393                     	;# 
  3326  0394                     	;# 
  3327  0395                     	;# 
  3328  0396                     	;# 
  3329  0397                     	;# 
  3330  0398                     	;# 
  3331  0399                     	;# 
  3332  040E                     	;# 
  3333  0413                     	;# 
  3334  0413                     	;# 
  3335  0414                     	;# 
  3336  0414                     	;# 
  3337  0415                     	;# 
  3338  0416                     	;# 
  3339  0417                     	;# 
  3340  0418                     	;# 
  3341  041A                     	;# 
  3342  041A                     	;# 
  3343  041B                     	;# 
  3344  041B                     	;# 
  3345  041C                     	;# 
  3346  041D                     	;# 
  3347  041E                     	;# 
  3348  041F                     	;# 
  3349  0493                     	;# 
  3350  0494                     	;# 
  3351  0495                     	;# 
  3352  0496                     	;# 
  3353  049A                     	;# 
  3354  049B                     	;# 
  3355  049C                     	;# 
  3356  049D                     	;# 
  3357  058C                     	;# 
  3358  058C                     	;# 
  3359  058D                     	;# 
  3360  058E                     	;# 
  3361  058E                     	;# 
  3362  058F                     	;# 
  3363  0590                     	;# 
  3364  0590                     	;# 
  3365  0591                     	;# 
  3366  0592                     	;# 
  3367  0592                     	;# 
  3368  0593                     	;# 
  3369  0594                     	;# 
  3370  0594                     	;# 
  3371  0595                     	;# 
  3372  0596                     	;# 
  3373  0596                     	;# 
  3374  0597                     	;# 
  3375  0598                     	;# 
  3376  0599                     	;# 
  3377  059A                     	;# 
  3378  059B                     	;# 
  3379  059B                     	;# 
  3380  059C                     	;# 
  3381  059D                     	;# 
  3382  060C                     	;# 
  3383  060C                     	;# 
  3384  060D                     	;# 
  3385  060E                     	;# 
  3386  060F                     	;# 
  3387  060F                     	;# 
  3388  0610                     	;# 
  3389  0611                     	;# 
  3390  0612                     	;# 
  3391  0613                     	;# 
  3392  0614                     	;# 
  3393  0617                     	;# 
  3394  0618                     	;# 
  3395  0619                     	;# 
  3396  061A                     	;# 
  3397  061B                     	;# 
  3398  061C                     	;# 
  3399  0691                     	;# 
  3400  0692                     	;# 
  3401  0693                     	;# 
  3402  0694                     	;# 
  3403  0695                     	;# 
  3404  0696                     	;# 
  3405  0697                     	;# 
  3406  0699                     	;# 
  3407  069A                     	;# 
  3408  0711                     	;# 
  3409  0712                     	;# 
  3410  0713                     	;# 
  3411  0714                     	;# 
  3412  0715                     	;# 
  3413  0718                     	;# 
  3414  0718                     	;# 
  3415  0719                     	;# 
  3416  071A                     	;# 
  3417  071A                     	;# 
  3418  071B                     	;# 
  3419  071C                     	;# 
  3420  071D                     	;# 
  3421  0791                     	;# 
  3422  0791                     	;# 
  3423  0792                     	;# 
  3424  0793                     	;# 
  3425  0793                     	;# 
  3426  0794                     	;# 
  3427  0795                     	;# 
  3428  0795                     	;# 
  3429  0796                     	;# 
  3430  0797                     	;# 
  3431  0797                     	;# 
  3432  0798                     	;# 
  3433  0799                     	;# 
  3434  079A                     	;# 
  3435  080C                     	;# 
  3436  080C                     	;# 
  3437  080D                     	;# 
  3438  080E                     	;# 
  3439  080E                     	;# 
  3440  080F                     	;# 
  3441  0810                     	;# 
  3442  0810                     	;# 
  3443  0811                     	;# 
  3444  0812                     	;# 
  3445  0812                     	;# 
  3446  0813                     	;# 
  3447  0814                     	;# 
  3448  0815                     	;# 
  3449  0816                     	;# 
  3450  0817                     	;# 
  3451  0818                     	;# 
  3452  0819                     	;# 
  3453  081A                     	;# 
  3454  081A                     	;# 
  3455  081B                     	;# 
  3456  081C                     	;# 
  3457  081C                     	;# 
  3458  081D                     	;# 
  3459  088C                     	;# 
  3460  088D                     	;# 
  3461  088E                     	;# 
  3462  088F                     	;# 
  3463  088F                     	;# 
  3464  0890                     	;# 
  3465  0891                     	;# 
  3466  0892                     	;# 
  3467  0893                     	;# 
  3468  0893                     	;# 
  3469  0894                     	;# 
  3470  0895                     	;# 
  3471  0896                     	;# 
  3472  0897                     	;# 
  3473  0897                     	;# 
  3474  0898                     	;# 
  3475  0899                     	;# 
  3476  0D8C                     	;# 
  3477  0D8C                     	;# 
  3478  0D8D                     	;# 
  3479  0D8E                     	;# 
  3480  0D8F                     	;# 
  3481  0D8F                     	;# 
  3482  0D90                     	;# 
  3483  0D91                     	;# 
  3484  0D92                     	;# 
  3485  0D92                     	;# 
  3486  0D93                     	;# 
  3487  0D94                     	;# 
  3488  0D95                     	;# 
  3489  0D95                     	;# 
  3490  0D96                     	;# 
  3491  0D97                     	;# 
  3492  0D98                     	;# 
  3493  0D99                     	;# 
  3494  0D9A                     	;# 
  3495  0D9B                     	;# 
  3496  0D9C                     	;# 
  3497  0D9D                     	;# 
  3498  0D9E                     	;# 
  3499  0D9E                     	;# 
  3500  0D9F                     	;# 
  3501  0DA0                     	;# 
  3502  0DA1                     	;# 
  3503  0DA1                     	;# 
  3504  0DA2                     	;# 
  3505  0DA3                     	;# 
  3506  0DA4                     	;# 
  3507  0DA4                     	;# 
  3508  0DA5                     	;# 
  3509  0DA6                     	;# 
  3510  0DA7                     	;# 
  3511  0DA7                     	;# 
  3512  0DA8                     	;# 
  3513  0DA9                     	;# 
  3514  0DAA                     	;# 
  3515  0DAB                     	;# 
  3516  0DAC                     	;# 
  3517  0DAD                     	;# 
  3518  0DAE                     	;# 
  3519  0DAF                     	;# 
  3520  0E0F                     	;# 
  3521  0E10                     	;# 
  3522  0E11                     	;# 
  3523  0E12                     	;# 
  3524  0E13                     	;# 
  3525  0E14                     	;# 
  3526  0E15                     	;# 
  3527  0E16                     	;# 
  3528  0E17                     	;# 
  3529  0E18                     	;# 
  3530  0E19                     	;# 
  3531  0E1A                     	;# 
  3532  0E1B                     	;# 
  3533  0E1C                     	;# 
  3534  0E1D                     	;# 
  3535  0E1E                     	;# 
  3536  0E1F                     	;# 
  3537  0E20                     	;# 
  3538  0E21                     	;# 
  3539  0E22                     	;# 
  3540  0E23                     	;# 
  3541  0E24                     	;# 
  3542  0E25                     	;# 
  3543  0E26                     	;# 
  3544  0E27                     	;# 
  3545  0E28                     	;# 
  3546  0E29                     	;# 
  3547  0E2A                     	;# 
  3548  0E2B                     	;# 
  3549  0E2C                     	;# 
  3550  0E2D                     	;# 
  3551  0E2E                     	;# 
  3552  0E90                     	;# 
  3553  0E91                     	;# 
  3554  0E92                     	;# 
  3555  0E94                     	;# 
  3556  0E95                     	;# 
  3557  0E9C                     	;# 
  3558  0E9D                     	;# 
  3559  0E9E                     	;# 
  3560  0E9F                     	;# 
  3561  0EA0                     	;# 
  3562  0EA1                     	;# 
  3563  0EA2                     	;# 
  3564  0EA3                     	;# 
  3565  0EA4                     	;# 
  3566  0EA5                     	;# 
  3567  0EA6                     	;# 
  3568  0EA7                     	;# 
  3569  0F0F                     	;# 
  3570  0F10                     	;# 
  3571  0F11                     	;# 
  3572  0F12                     	;# 
  3573  0F13                     	;# 
  3574  0F14                     	;# 
  3575  0F15                     	;# 
  3576  0F16                     	;# 
  3577  0F17                     	;# 
  3578  0F18                     	;# 
  3579  0F19                     	;# 
  3580  0F1A                     	;# 
  3581  0F1B                     	;# 
  3582  0F1C                     	;# 
  3583  0F1D                     	;# 
  3584  0F1E                     	;# 
  3585  0F1F                     	;# 
  3586  0F20                     	;# 
  3587  0F21                     	;# 
  3588  0F22                     	;# 
  3589  0F23                     	;# 
  3590  0F24                     	;# 
  3591  0F25                     	;# 
  3592  0F26                     	;# 
  3593  0F27                     	;# 
  3594  0F28                     	;# 
  3595  0F29                     	;# 
  3596  0F2A                     	;# 
  3597  0F2B                     	;# 
  3598  0F2C                     	;# 
  3599  0F2D                     	;# 
  3600  0F2E                     	;# 
  3601  0F2F                     	;# 
  3602  0F30                     	;# 
  3603  0F31                     	;# 
  3604  0F32                     	;# 
  3605  0F33                     	;# 
  3606  0F34                     	;# 
  3607  0F35                     	;# 
  3608  0F36                     	;# 
  3609  0F37                     	;# 
  3610  0FE4                     	;# 
  3611  0FE5                     	;# 
  3612  0FE6                     	;# 
  3613  0FE7                     	;# 
  3614  0FE8                     	;# 
  3615  0FE9                     	;# 
  3616  0FEA                     	;# 
  3617  0FEB                     	;# 
  3618  0FED                     	;# 
  3619  0FEE                     	;# 
  3620  0FEF                     	;# 
  3621  0000                     	;# 
  3622  0001                     	;# 
  3623  0002                     	;# 
  3624  0003                     	;# 
  3625  0004                     	;# 
  3626  0005                     	;# 
  3627  0006                     	;# 
  3628  0007                     	;# 
  3629  0008                     	;# 
  3630  0009                     	;# 
  3631  000A                     	;# 
  3632  000B                     	;# 
  3633  000C                     	;# 
  3634  000D                     	;# 
  3635  000E                     	;# 
  3636  0010                     	;# 
  3637  0011                     	;# 
  3638  0012                     	;# 
  3639  0013                     	;# 
  3640  0014                     	;# 
  3641  0015                     	;# 
  3642  0016                     	;# 
  3643  0016                     	;# 
  3644  0017                     	;# 
  3645  0018                     	;# 
  3646  0019                     	;# 
  3647  001A                     	;# 
  3648  001A                     	;# 
  3649  001B                     	;# 
  3650  001B                     	;# 
  3651  001C                     	;# 
  3652  001D                     	;# 
  3653  001E                     	;# 
  3654  001F                     	;# 
  3655  008C                     	;# 
  3656  008D                     	;# 
  3657  008E                     	;# 
  3658  0090                     	;# 
  3659  0091                     	;# 
  3660  0092                     	;# 
  3661  0093                     	;# 
  3662  0094                     	;# 
  3663  0095                     	;# 
  3664  0096                     	;# 
  3665  0098                     	;# 
  3666  0099                     	;# 
  3667  009A                     	;# 
  3668  009B                     	;# 
  3669  009B                     	;# 
  3670  009C                     	;# 
  3671  009D                     	;# 
  3672  009E                     	;# 
  3673  009F                     	;# 
  3674  010C                     	;# 
  3675  010D                     	;# 
  3676  010E                     	;# 
  3677  0111                     	;# 
  3678  0112                     	;# 
  3679  0113                     	;# 
  3680  0114                     	;# 
  3681  0115                     	;# 
  3682  0116                     	;# 
  3683  0117                     	;# 
  3684  0118                     	;# 
  3685  0119                     	;# 
  3686  011C                     	;# 
  3687  018C                     	;# 
  3688  018D                     	;# 
  3689  018E                     	;# 
  3690  0191                     	;# 
  3691  0191                     	;# 
  3692  0192                     	;# 
  3693  0193                     	;# 
  3694  0193                     	;# 
  3695  0194                     	;# 
  3696  0195                     	;# 
  3697  0196                     	;# 
  3698  0197                     	;# 
  3699  0199                     	;# 
  3700  0199                     	;# 
  3701  0199                     	;# 
  3702  019A                     	;# 
  3703  019A                     	;# 
  3704  019A                     	;# 
  3705  019B                     	;# 
  3706  019B                     	;# 
  3707  019B                     	;# 
  3708  019B                     	;# 
  3709  019B                     	;# 
  3710  019C                     	;# 
  3711  019C                     	;# 
  3712  019C                     	;# 
  3713  019D                     	;# 
  3714  019D                     	;# 
  3715  019D                     	;# 
  3716  019E                     	;# 
  3717  019E                     	;# 
  3718  019E                     	;# 
  3719  019F                     	;# 
  3720  019F                     	;# 
  3721  019F                     	;# 
  3722  019F                     	;# 
  3723  019F                     	;# 
  3724  020C                     	;# 
  3725  020D                     	;# 
  3726  020E                     	;# 
  3727  0211                     	;# 
  3728  0211                     	;# 
  3729  0212                     	;# 
  3730  0212                     	;# 
  3731  0213                     	;# 
  3732  0213                     	;# 
  3733  0214                     	;# 
  3734  0214                     	;# 
  3735  0215                     	;# 
  3736  0215                     	;# 
  3737  0215                     	;# 
  3738  0215                     	;# 
  3739  0216                     	;# 
  3740  0216                     	;# 
  3741  0217                     	;# 
  3742  0217                     	;# 
  3743  028C                     	;# 
  3744  028D                     	;# 
  3745  028E                     	;# 
  3746  0291                     	;# 
  3747  0291                     	;# 
  3748  0292                     	;# 
  3749  0293                     	;# 
  3750  0294                     	;# 
  3751  0298                     	;# 
  3752  0298                     	;# 
  3753  0299                     	;# 
  3754  029A                     	;# 
  3755  029B                     	;# 
  3756  029E                     	;# 
  3757  030C                     	;# 
  3758  030D                     	;# 
  3759  030E                     	;# 
  3760  038C                     	;# 
  3761  038D                     	;# 
  3762  038E                     	;# 
  3763  0391                     	;# 
  3764  0392                     	;# 
  3765  0393                     	;# 
  3766  0394                     	;# 
  3767  0395                     	;# 
  3768  0396                     	;# 
  3769  0397                     	;# 
  3770  0398                     	;# 
  3771  0399                     	;# 
  3772  040E                     	;# 
  3773  0413                     	;# 
  3774  0413                     	;# 
  3775  0414                     	;# 
  3776  0414                     	;# 
  3777  0415                     	;# 
  3778  0416                     	;# 
  3779  0417                     	;# 
  3780  0418                     	;# 
  3781  041A                     	;# 
  3782  041A                     	;# 
  3783  041B                     	;# 
  3784  041B                     	;# 
  3785  041C                     	;# 
  3786  041D                     	;# 
  3787  041E                     	;# 
  3788  041F                     	;# 
  3789  0493                     	;# 
  3790  0494                     	;# 
  3791  0495                     	;# 
  3792  0496                     	;# 
  3793  049A                     	;# 
  3794  049B                     	;# 
  3795  049C                     	;# 
  3796  049D                     	;# 
  3797  058C                     	;# 
  3798  058C                     	;# 
  3799  058D                     	;# 
  3800  058E                     	;# 
  3801  058E                     	;# 
  3802  058F                     	;# 
  3803  0590                     	;# 
  3804  0590                     	;# 
  3805  0591                     	;# 
  3806  0592                     	;# 
  3807  0592                     	;# 
  3808  0593                     	;# 
  3809  0594                     	;# 
  3810  0594                     	;# 
  3811  0595                     	;# 
  3812  0596                     	;# 
  3813  0596                     	;# 
  3814  0597                     	;# 
  3815  0598                     	;# 
  3816  0599                     	;# 
  3817  059A                     	;# 
  3818  059B                     	;# 
  3819  059B                     	;# 
  3820  059C                     	;# 
  3821  059D                     	;# 
  3822  060C                     	;# 
  3823  060C                     	;# 
  3824  060D                     	;# 
  3825  060E                     	;# 
  3826  060F                     	;# 
  3827  060F                     	;# 
  3828  0610                     	;# 
  3829  0611                     	;# 
  3830  0612                     	;# 
  3831  0613                     	;# 
  3832  0614                     	;# 
  3833  0617                     	;# 
  3834  0618                     	;# 
  3835  0619                     	;# 
  3836  061A                     	;# 
  3837  061B                     	;# 
  3838  061C                     	;# 
  3839  0691                     	;# 
  3840  0692                     	;# 
  3841  0693                     	;# 
  3842  0694                     	;# 
  3843  0695                     	;# 
  3844  0696                     	;# 
  3845  0697                     	;# 
  3846  0699                     	;# 
  3847  069A                     	;# 
  3848  0711                     	;# 
  3849  0712                     	;# 
  3850  0713                     	;# 
  3851  0714                     	;# 
  3852  0715                     	;# 
  3853  0718                     	;# 
  3854  0718                     	;# 
  3855  0719                     	;# 
  3856  071A                     	;# 
  3857  071A                     	;# 
  3858  071B                     	;# 
  3859  071C                     	;# 
  3860  071D                     	;# 
  3861  0791                     	;# 
  3862  0791                     	;# 
  3863  0792                     	;# 
  3864  0793                     	;# 
  3865  0793                     	;# 
  3866  0794                     	;# 
  3867  0795                     	;# 
  3868  0795                     	;# 
  3869  0796                     	;# 
  3870  0797                     	;# 
  3871  0797                     	;# 
  3872  0798                     	;# 
  3873  0799                     	;# 
  3874  079A                     	;# 
  3875  080C                     	;# 
  3876  080C                     	;# 
  3877  080D                     	;# 
  3878  080E                     	;# 
  3879  080E                     	;# 
  3880  080F                     	;# 
  3881  0810                     	;# 
  3882  0810                     	;# 
  3883  0811                     	;# 
  3884  0812                     	;# 
  3885  0812                     	;# 
  3886  0813                     	;# 
  3887  0814                     	;# 
  3888  0815                     	;# 
  3889  0816                     	;# 
  3890  0817                     	;# 
  3891  0818                     	;# 
  3892  0819                     	;# 
  3893  081A                     	;# 
  3894  081A                     	;# 
  3895  081B                     	;# 
  3896  081C                     	;# 
  3897  081C                     	;# 
  3898  081D                     	;# 
  3899  088C                     	;# 
  3900  088D                     	;# 
  3901  088E                     	;# 
  3902  088F                     	;# 
  3903  088F                     	;# 
  3904  0890                     	;# 
  3905  0891                     	;# 
  3906  0892                     	;# 
  3907  0893                     	;# 
  3908  0893                     	;# 
  3909  0894                     	;# 
  3910  0895                     	;# 
  3911  0896                     	;# 
  3912  0897                     	;# 
  3913  0897                     	;# 
  3914  0898                     	;# 
  3915  0899                     	;# 
  3916  0D8C                     	;# 
  3917  0D8C                     	;# 
  3918  0D8D                     	;# 
  3919  0D8E                     	;# 
  3920  0D8F                     	;# 
  3921  0D8F                     	;# 
  3922  0D90                     	;# 
  3923  0D91                     	;# 
  3924  0D92                     	;# 
  3925  0D92                     	;# 
  3926  0D93                     	;# 
  3927  0D94                     	;# 
  3928  0D95                     	;# 
  3929  0D95                     	;# 
  3930  0D96                     	;# 
  3931  0D97                     	;# 
  3932  0D98                     	;# 
  3933  0D99                     	;# 
  3934  0D9A                     	;# 
  3935  0D9B                     	;# 
  3936  0D9C                     	;# 
  3937  0D9D                     	;# 
  3938  0D9E                     	;# 
  3939  0D9E                     	;# 
  3940  0D9F                     	;# 
  3941  0DA0                     	;# 
  3942  0DA1                     	;# 
  3943  0DA1                     	;# 
  3944  0DA2                     	;# 
  3945  0DA3                     	;# 
  3946  0DA4                     	;# 
  3947  0DA4                     	;# 
  3948  0DA5                     	;# 
  3949  0DA6                     	;# 
  3950  0DA7                     	;# 
  3951  0DA7                     	;# 
  3952  0DA8                     	;# 
  3953  0DA9                     	;# 
  3954  0DAA                     	;# 
  3955  0DAB                     	;# 
  3956  0DAC                     	;# 
  3957  0DAD                     	;# 
  3958  0DAE                     	;# 
  3959  0DAF                     	;# 
  3960  0E0F                     	;# 
  3961  0E10                     	;# 
  3962  0E11                     	;# 
  3963  0E12                     	;# 
  3964  0E13                     	;# 
  3965  0E14                     	;# 
  3966  0E15                     	;# 
  3967  0E16                     	;# 
  3968  0E17                     	;# 
  3969  0E18                     	;# 
  3970  0E19                     	;# 
  3971  0E1A                     	;# 
  3972  0E1B                     	;# 
  3973  0E1C                     	;# 
  3974  0E1D                     	;# 
  3975  0E1E                     	;# 
  3976  0E1F                     	;# 
  3977  0E20                     	;# 
  3978  0E21                     	;# 
  3979  0E22                     	;# 
  3980  0E23                     	;# 
  3981  0E24                     	;# 
  3982  0E25                     	;# 
  3983  0E26                     	;# 
  3984  0E27                     	;# 
  3985  0E28                     	;# 
  3986  0E29                     	;# 
  3987  0E2A                     	;# 
  3988  0E2B                     	;# 
  3989  0E2C                     	;# 
  3990  0E2D                     	;# 
  3991  0E2E                     	;# 
  3992  0E90                     	;# 
  3993  0E91                     	;# 
  3994  0E92                     	;# 
  3995  0E94                     	;# 
  3996  0E95                     	;# 
  3997  0E9C                     	;# 
  3998  0E9D                     	;# 
  3999  0E9E                     	;# 
  4000  0E9F                     	;# 
  4001  0EA0                     	;# 
  4002  0EA1                     	;# 
  4003  0EA2                     	;# 
  4004  0EA3                     	;# 
  4005  0EA4                     	;# 
  4006  0EA5                     	;# 
  4007  0EA6                     	;# 
  4008  0EA7                     	;# 
  4009  0F0F                     	;# 
  4010  0F10                     	;# 
  4011  0F11                     	;# 
  4012  0F12                     	;# 
  4013  0F13                     	;# 
  4014  0F14                     	;# 
  4015  0F15                     	;# 
  4016  0F16                     	;# 
  4017  0F17                     	;# 
  4018  0F18                     	;# 
  4019  0F19                     	;# 
  4020  0F1A                     	;# 
  4021  0F1B                     	;# 
  4022  0F1C                     	;# 
  4023  0F1D                     	;# 
  4024  0F1E                     	;# 
  4025  0F1F                     	;# 
  4026  0F20                     	;# 
  4027  0F21                     	;# 
  4028  0F22                     	;# 
  4029  0F23                     	;# 
  4030  0F24                     	;# 
  4031  0F25                     	;# 
  4032  0F26                     	;# 
  4033  0F27                     	;# 
  4034  0F28                     	;# 
  4035  0F29                     	;# 
  4036  0F2A                     	;# 
  4037  0F2B                     	;# 
  4038  0F2C                     	;# 
  4039  0F2D                     	;# 
  4040  0F2E                     	;# 
  4041  0F2F                     	;# 
  4042  0F30                     	;# 
  4043  0F31                     	;# 
  4044  0F32                     	;# 
  4045  0F33                     	;# 
  4046  0F34                     	;# 
  4047  0F35                     	;# 
  4048  0F36                     	;# 
  4049  0F37                     	;# 
  4050  0FE4                     	;# 
  4051  0FE5                     	;# 
  4052  0FE6                     	;# 
  4053  0FE7                     	;# 
  4054  0FE8                     	;# 
  4055  0FE9                     	;# 
  4056  0FEA                     	;# 
  4057  0FEB                     	;# 
  4058  0FED                     	;# 
  4059  0FEE                     	;# 
  4060  0FEF                     	;# 
  4061  0000                     	;# 
  4062  0001                     	;# 
  4063  0002                     	;# 
  4064  0003                     	;# 
  4065  0004                     	;# 
  4066  0005                     	;# 
  4067  0006                     	;# 
  4068  0007                     	;# 
  4069  0008                     	;# 
  4070  0009                     	;# 
  4071  000A                     	;# 
  4072  000B                     	;# 
  4073  000C                     	;# 
  4074  000D                     	;# 
  4075  000E                     	;# 
  4076  0010                     	;# 
  4077  0011                     	;# 
  4078  0012                     	;# 
  4079  0013                     	;# 
  4080  0014                     	;# 
  4081  0015                     	;# 
  4082  0016                     	;# 
  4083  0016                     	;# 
  4084  0017                     	;# 
  4085  0018                     	;# 
  4086  0019                     	;# 
  4087  001A                     	;# 
  4088  001A                     	;# 
  4089  001B                     	;# 
  4090  001B                     	;# 
  4091  001C                     	;# 
  4092  001D                     	;# 
  4093  001E                     	;# 
  4094  001F                     	;# 
  4095  008C                     	;# 
  4096  008D                     	;# 
  4097  008E                     	;# 
  4098  0090                     	;# 
  4099  0091                     	;# 
  4100  0092                     	;# 
  4101  0093                     	;# 
  4102  0094                     	;# 
  4103  0095                     	;# 
  4104  0096                     	;# 
  4105  0098                     	;# 
  4106  0099                     	;# 
  4107  009A                     	;# 
  4108  009B                     	;# 
  4109  009B                     	;# 
  4110  009C                     	;# 
  4111  009D                     	;# 
  4112  009E                     	;# 
  4113  009F                     	;# 
  4114  010C                     	;# 
  4115  010D                     	;# 
  4116  010E                     	;# 
  4117  0111                     	;# 
  4118  0112                     	;# 
  4119  0113                     	;# 
  4120  0114                     	;# 
  4121  0115                     	;# 
  4122  0116                     	;# 
  4123  0117                     	;# 
  4124  0118                     	;# 
  4125  0119                     	;# 
  4126  011C                     	;# 
  4127  018C                     	;# 
  4128  018D                     	;# 
  4129  018E                     	;# 
  4130  0191                     	;# 
  4131  0191                     	;# 
  4132  0192                     	;# 
  4133  0193                     	;# 
  4134  0193                     	;# 
  4135  0194                     	;# 
  4136  0195                     	;# 
  4137  0196                     	;# 
  4138  0197                     	;# 
  4139  0199                     	;# 
  4140  0199                     	;# 
  4141  0199                     	;# 
  4142  019A                     	;# 
  4143  019A                     	;# 
  4144  019A                     	;# 
  4145  019B                     	;# 
  4146  019B                     	;# 
  4147  019B                     	;# 
  4148  019B                     	;# 
  4149  019B                     	;# 
  4150  019C                     	;# 
  4151  019C                     	;# 
  4152  019C                     	;# 
  4153  019D                     	;# 
  4154  019D                     	;# 
  4155  019D                     	;# 
  4156  019E                     	;# 
  4157  019E                     	;# 
  4158  019E                     	;# 
  4159  019F                     	;# 
  4160  019F                     	;# 
  4161  019F                     	;# 
  4162  019F                     	;# 
  4163  019F                     	;# 
  4164  020C                     	;# 
  4165  020D                     	;# 
  4166  020E                     	;# 
  4167  0211                     	;# 
  4168  0211                     	;# 
  4169  0212                     	;# 
  4170  0212                     	;# 
  4171  0213                     	;# 
  4172  0213                     	;# 
  4173  0214                     	;# 
  4174  0214                     	;# 
  4175  0215                     	;# 
  4176  0215                     	;# 
  4177  0215                     	;# 
  4178  0215                     	;# 
  4179  0216                     	;# 
  4180  0216                     	;# 
  4181  0217                     	;# 
  4182  0217                     	;# 
  4183  028C                     	;# 
  4184  028D                     	;# 
  4185  028E                     	;# 
  4186  0291                     	;# 
  4187  0291                     	;# 
  4188  0292                     	;# 
  4189  0293                     	;# 
  4190  0294                     	;# 
  4191  0298                     	;# 
  4192  0298                     	;# 
  4193  0299                     	;# 
  4194  029A                     	;# 
  4195  029B                     	;# 
  4196  029E                     	;# 
  4197  030C                     	;# 
  4198  030D                     	;# 
  4199  030E                     	;# 
  4200  038C                     	;# 
  4201  038D                     	;# 
  4202  038E                     	;# 
  4203  0391                     	;# 
  4204  0392                     	;# 
  4205  0393                     	;# 
  4206  0394                     	;# 
  4207  0395                     	;# 
  4208  0396                     	;# 
  4209  0397                     	;# 
  4210  0398                     	;# 
  4211  0399                     	;# 
  4212  040E                     	;# 
  4213  0413                     	;# 
  4214  0413                     	;# 
  4215  0414                     	;# 
  4216  0414                     	;# 
  4217  0415                     	;# 
  4218  0416                     	;# 
  4219  0417                     	;# 
  4220  0418                     	;# 
  4221  041A                     	;# 
  4222  041A                     	;# 
  4223  041B                     	;# 
  4224  041B                     	;# 
  4225  041C                     	;# 
  4226  041D                     	;# 
  4227  041E                     	;# 
  4228  041F                     	;# 
  4229  0493                     	;# 
  4230  0494                     	;# 
  4231  0495                     	;# 
  4232  0496                     	;# 
  4233  049A                     	;# 
  4234  049B                     	;# 
  4235  049C                     	;# 
  4236  049D                     	;# 
  4237  058C                     	;# 
  4238  058C                     	;# 
  4239  058D                     	;# 
  4240  058E                     	;# 
  4241  058E                     	;# 
  4242  058F                     	;# 
  4243  0590                     	;# 
  4244  0590                     	;# 
  4245  0591                     	;# 
  4246  0592                     	;# 
  4247  0592                     	;# 
  4248  0593                     	;# 
  4249  0594                     	;# 
  4250  0594                     	;# 
  4251  0595                     	;# 
  4252  0596                     	;# 
  4253  0596                     	;# 
  4254  0597                     	;# 
  4255  0598                     	;# 
  4256  0599                     	;# 
  4257  059A                     	;# 
  4258  059B                     	;# 
  4259  059B                     	;# 
  4260  059C                     	;# 
  4261  059D                     	;# 
  4262  060C                     	;# 
  4263  060C                     	;# 
  4264  060D                     	;# 
  4265  060E                     	;# 
  4266  060F                     	;# 
  4267  060F                     	;# 
  4268  0610                     	;# 
  4269  0611                     	;# 
  4270  0612                     	;# 
  4271  0613                     	;# 
  4272  0614                     	;# 
  4273  0617                     	;# 
  4274  0618                     	;# 
  4275  0619                     	;# 
  4276  061A                     	;# 
  4277  061B                     	;# 
  4278  061C                     	;# 
  4279  0691                     	;# 
  4280  0692                     	;# 
  4281  0693                     	;# 
  4282  0694                     	;# 
  4283  0695                     	;# 
  4284  0696                     	;# 
  4285  0697                     	;# 
  4286  0699                     	;# 
  4287  069A                     	;# 
  4288  0711                     	;# 
  4289  0712                     	;# 
  4290  0713                     	;# 
  4291  0714                     	;# 
  4292  0715                     	;# 
  4293  0718                     	;# 
  4294  0718                     	;# 
  4295  0719                     	;# 
  4296  071A                     	;# 
  4297  071A                     	;# 
  4298  071B                     	;# 
  4299  071C                     	;# 
  4300  071D                     	;# 
  4301  0791                     	;# 
  4302  0791                     	;# 
  4303  0792                     	;# 
  4304  0793                     	;# 
  4305  0793                     	;# 
  4306  0794                     	;# 
  4307  0795                     	;# 
  4308  0795                     	;# 
  4309  0796                     	;# 
  4310  0797                     	;# 
  4311  0797                     	;# 
  4312  0798                     	;# 
  4313  0799                     	;# 
  4314  079A                     	;# 
  4315  080C                     	;# 
  4316  080C                     	;# 
  4317  080D                     	;# 
  4318  080E                     	;# 
  4319  080E                     	;# 
  4320  080F                     	;# 
  4321  0810                     	;# 
  4322  0810                     	;# 
  4323  0811                     	;# 
  4324  0812                     	;# 
  4325  0812                     	;# 
  4326  0813                     	;# 
  4327  0814                     	;# 
  4328  0815                     	;# 
  4329  0816                     	;# 
  4330  0817                     	;# 
  4331  0818                     	;# 
  4332  0819                     	;# 
  4333  081A                     	;# 
  4334  081A                     	;# 
  4335  081B                     	;# 
  4336  081C                     	;# 
  4337  081C                     	;# 
  4338  081D                     	;# 
  4339  088C                     	;# 
  4340  088D                     	;# 
  4341  088E                     	;# 
  4342  088F                     	;# 
  4343  088F                     	;# 
  4344  0890                     	;# 
  4345  0891                     	;# 
  4346  0892                     	;# 
  4347  0893                     	;# 
  4348  0893                     	;# 
  4349  0894                     	;# 
  4350  0895                     	;# 
  4351  0896                     	;# 
  4352  0897                     	;# 
  4353  0897                     	;# 
  4354  0898                     	;# 
  4355  0899                     	;# 
  4356  0D8C                     	;# 
  4357  0D8C                     	;# 
  4358  0D8D                     	;# 
  4359  0D8E                     	;# 
  4360  0D8F                     	;# 
  4361  0D8F                     	;# 
  4362  0D90                     	;# 
  4363  0D91                     	;# 
  4364  0D92                     	;# 
  4365  0D92                     	;# 
  4366  0D93                     	;# 
  4367  0D94                     	;# 
  4368  0D95                     	;# 
  4369  0D95                     	;# 
  4370  0D96                     	;# 
  4371  0D97                     	;# 
  4372  0D98                     	;# 
  4373  0D99                     	;# 
  4374  0D9A                     	;# 
  4375  0D9B                     	;# 
  4376  0D9C                     	;# 
  4377  0D9D                     	;# 
  4378  0D9E                     	;# 
  4379  0D9E                     	;# 
  4380  0D9F                     	;# 
  4381  0DA0                     	;# 
  4382  0DA1                     	;# 
  4383  0DA1                     	;# 
  4384  0DA2                     	;# 
  4385  0DA3                     	;# 
  4386  0DA4                     	;# 
  4387  0DA4                     	;# 
  4388  0DA5                     	;# 
  4389  0DA6                     	;# 
  4390  0DA7                     	;# 
  4391  0DA7                     	;# 
  4392  0DA8                     	;# 
  4393  0DA9                     	;# 
  4394  0DAA                     	;# 
  4395  0DAB                     	;# 
  4396  0DAC                     	;# 
  4397  0DAD                     	;# 
  4398  0DAE                     	;# 
  4399  0DAF                     	;# 
  4400  0E0F                     	;# 
  4401  0E10                     	;# 
  4402  0E11                     	;# 
  4403  0E12                     	;# 
  4404  0E13                     	;# 
  4405  0E14                     	;# 
  4406  0E15                     	;# 
  4407  0E16                     	;# 
  4408  0E17                     	;# 
  4409  0E18                     	;# 
  4410  0E19                     	;# 
  4411  0E1A                     	;# 
  4412  0E1B                     	;# 
  4413  0E1C                     	;# 
  4414  0E1D                     	;# 
  4415  0E1E                     	;# 
  4416  0E1F                     	;# 
  4417  0E20                     	;# 
  4418  0E21                     	;# 
  4419  0E22                     	;# 
  4420  0E23                     	;# 
  4421  0E24                     	;# 
  4422  0E25                     	;# 
  4423  0E26                     	;# 
  4424  0E27                     	;# 
  4425  0E28                     	;# 
  4426  0E29                     	;# 
  4427  0E2A                     	;# 
  4428  0E2B                     	;# 
  4429  0E2C                     	;# 
  4430  0E2D                     	;# 
  4431  0E2E                     	;# 
  4432  0E90                     	;# 
  4433  0E91                     	;# 
  4434  0E92                     	;# 
  4435  0E94                     	;# 
  4436  0E95                     	;# 
  4437  0E9C                     	;# 
  4438  0E9D                     	;# 
  4439  0E9E                     	;# 
  4440  0E9F                     	;# 
  4441  0EA0                     	;# 
  4442  0EA1                     	;# 
  4443  0EA2                     	;# 
  4444  0EA3                     	;# 
  4445  0EA4                     	;# 
  4446  0EA5                     	;# 
  4447  0EA6                     	;# 
  4448  0EA7                     	;# 
  4449  0F0F                     	;# 
  4450  0F10                     	;# 
  4451  0F11                     	;# 
  4452  0F12                     	;# 
  4453  0F13                     	;# 
  4454  0F14                     	;# 
  4455  0F15                     	;# 
  4456  0F16                     	;# 
  4457  0F17                     	;# 
  4458  0F18                     	;# 
  4459  0F19                     	;# 
  4460  0F1A                     	;# 
  4461  0F1B                     	;# 
  4462  0F1C                     	;# 
  4463  0F1D                     	;# 
  4464  0F1E                     	;# 
  4465  0F1F                     	;# 
  4466  0F20                     	;# 
  4467  0F21                     	;# 
  4468  0F22                     	;# 
  4469  0F23                     	;# 
  4470  0F24                     	;# 
  4471  0F25                     	;# 
  4472  0F26                     	;# 
  4473  0F27                     	;# 
  4474  0F28                     	;# 
  4475  0F29                     	;# 
  4476  0F2A                     	;# 
  4477  0F2B                     	;# 
  4478  0F2C                     	;# 
  4479  0F2D                     	;# 
  4480  0F2E                     	;# 
  4481  0F2F                     	;# 
  4482  0F30                     	;# 
  4483  0F31                     	;# 
  4484  0F32                     	;# 
  4485  0F33                     	;# 
  4486  0F34                     	;# 
  4487  0F35                     	;# 
  4488  0F36                     	;# 
  4489  0F37                     	;# 
  4490  0FE4                     	;# 
  4491  0FE5                     	;# 
  4492  0FE6                     	;# 
  4493  0FE7                     	;# 
  4494  0FE8                     	;# 
  4495  0FE9                     	;# 
  4496  0FEA                     	;# 
  4497  0FEB                     	;# 
  4498  0FED                     	;# 
  4499  0FEE                     	;# 
  4500  0FEF                     	;# 
  4501                           
  4502                           	psect	idataBANK0
  4503  0D73                     __pidataBANK0:	
  4504                           
  4505                           ;initializer for _prevRow
  4506  0D73  34FF               	retlw	255
  4507                           
  4508                           ;initializer for _checkClock
  4509  0D74  3401               	retlw	1
  4510                           
  4511                           ;initializer for _SECOND_MULTIPLIER
  4512  0D75  3404               	retlw	4
  4513                           
  4514                           	psect	idataBANK1
  4515  0E8E                     __pidataBANK1:	
  4516                           
  4517                           ;initializer for _DISPLAYBANK_row_l
  4518  0E8E  3400               	retlw	0
  4519  0E8F  3401               	retlw	1
  4520  0E90  3400               	retlw	0
  4521  0E91  3401               	retlw	1
  4522  0E92  3400               	retlw	0
  4523  0E93  3401               	retlw	1
  4524  0E94  3400               	retlw	0
  4525  0E95  3401               	retlw	1
  4526  0E96  3400               	retlw	0
  4527  0E97  3401               	retlw	1
  4528  0E98  3400               	retlw	0
  4529  0E99  3401               	retlw	1
  4530                           
  4531                           ;initializer for _tick
  4532  0E9A  34F0               	retlw	240
  4533  0E9B  3400               	retlw	0
  4534                           
  4535                           ;initializer for _DISPLAYBANK_row
  4536  0E9C  3401               	retlw	1
  4537  0E9D  3402               	retlw	2
  4538  0E9E  34FF               	retlw	-1
  4539  0E9F  3400               	retlw	0
  4540  0EA0  3400               	retlw	0
  4541  0EA1  3400               	retlw	0
  4542  0EA2  3400               	retlw	0
  4543  0EA3  3400               	retlw	0
  4544  0EA4  3400               	retlw	0
  4545  0EA5  3400               	retlw	0
  4546  0EA6  3400               	retlw	0
  4547                           
  4548                           	psect	idataBANK2
  4549  0FAF                     __pidataBANK2:	
  4550                           
  4551                           ;initializer for _DISPLAYBANK_col_l
  4552  0FAF  3401               	retlw	1
  4553  0FB0  3400               	retlw	0
  4554  0FB1  3401               	retlw	1
  4555  0FB2  3400               	retlw	0
  4556  0FB3  3402               	retlw	2
  4557  0FB4  3400               	retlw	0
  4558  0FB5  3402               	retlw	2
  4559  0FB6  3400               	retlw	0
  4560  0FB7  3403               	retlw	3
  4561  0FB8  3400               	retlw	0
  4562  0FB9  3403               	retlw	3
  4563  0FBA  3400               	retlw	0
  4564  0FBB  3404               	retlw	4
  4565  0FBC  3400               	retlw	0
  4566  0FBD  3404               	retlw	4
  4567  0FBE  3400               	retlw	0
  4568  0FBF  3405               	retlw	5
  4569  0FC0  3400               	retlw	0
  4570  0FC1  3405               	retlw	5
  4571  0FC2  3400               	retlw	0
  4572  0FC3  3406               	retlw	6
  4573  0FC4  3400               	retlw	0
  4574  0FC5  3406               	retlw	6
  4575  0FC6  3400               	retlw	0
  4576  0FC7  341B               	retlw	27
  4577  0FC8  3400               	retlw	0
  4578  0FC9  340F               	retlw	15
  4579  0FCA  3400               	retlw	0
  4580  0FCB  340F               	retlw	15
  4581  0FCC  3400               	retlw	0
  4582  0FCD  34E0               	retlw	224
  4583  0FCE  3407               	retlw	7
  4584  0FCF  341B               	retlw	27
  4585  0FD0  3400               	retlw	0
  4586  0FD1  340F               	retlw	15
  4587  0FD2  3400               	retlw	0
  4588  0FD3  340F               	retlw	15
  4589  0FD4  3400               	retlw	0
  4590  0FD5  34E0               	retlw	224
  4591  0FD6  3407               	retlw	7
  4592                           
  4593                           	psect	nvBANK1
  4594  00DE                     __pnvBANK1:	
  4595  00DE                     _IOCCF3_InterruptHandler:	
  4596  00DE                     	ds	2
  4597  00E0                     _IOCCF2_InterruptHandler:	
  4598  00E0                     	ds	2
  4599  0019                     _T1GCONbits	set	25
  4600  0018                     _T1CONbits	set	24
  4601  0016                     _TMR1L	set	22
  4602  0017                     _TMR1H	set	23
  4603  0019                     _T1GCON	set	25
  4604  0018                     _T1CON	set	24
  4605  0011                     _PIR2bits	set	17
  4606  0010                     _PIR1bits	set	16
  4607  000B                     _INTCONbits	set	11
  4608  005F                     _GIE	set	95
  4609  0091                     _PIE2bits	set	145
  4610  0090                     _PIE1bits	set	144
  4611  0095                     _OPTION_REGbits	set	149
  4612  008E                     _TRISC	set	142
  4613  008D                     _TRISB	set	141
  4614  008C                     _TRISA	set	140
  4615  0098                     _OSCTUNE	set	152
  4616  0099                     _OSCCON	set	153
  4617  04D6                     _PLLR	set	1238
  4618  010E                     _LATC	set	270
  4619  010D                     _LATB	set	269
  4620  010C                     _LATA	set	268
  4621  018C                     _ANSELA	set	396
  4622  018D                     _ANSELB	set	397
  4623  018E                     _ANSELC	set	398
  4624  0211                     _SSP1BUF	set	529
  4625  0216                     _SSP1CON2bits	set	534
  4626  0215                     _SSP1CON1bits	set	533
  4627  0212                     _SSP1ADD	set	530
  4628  0217                     _SSP1CON3	set	535
  4629  0215                     _SSP1CON1	set	533
  4630  0214                     _SSP1STAT	set	532
  4631  020E                     _WPUC	set	526
  4632  020C                     _WPUA	set	524
  4633  020D                     _WPUB	set	525
  4634  028E                     _ODCONC	set	654
  4635  028D                     _ODCONB	set	653
  4636  028C                     _ODCONA	set	652
  4637  0397                     _IOCCPbits	set	919
  4638  0398                     _IOCCNbits	set	920
  4639  0399                     _IOCCFbits	set	921
  4640  0E21                     _SSPDATPPS	set	3617
  4641  0E20                     _SSPCLKPPS	set	3616
  4642  0E0F                     _PPSLOCKbits	set	3599
  4643  0E0F                     _PPSLOCK	set	3599
  4644  0E9C                     _RB4PPS	set	3740
  4645  0E9E                     _RB6PPS	set	3742
  4646                           
  4647                           ; #config settings
  4648  0000                     
  4649                           	psect	cinit
  4650  0039                     start_initialization:	
  4651  0039                     __initialization:	
  4652                           
  4653                           ; Initialize objects allocated to BANK0
  4654  0039  3073               	movlw	low __pidataBANK0
  4655  003A  0084               	movwf	4
  4656  003B  308D               	movlw	(high __pidataBANK0)| (0+128)
  4657  003C  0085               	movwf	5
  4658  003D  3069               	movlw	low __pdataBANK0
  4659  003E  0086               	movwf	6
  4660  003F  3000               	movlw	high __pdataBANK0
  4661  0040  0087               	movwf	7
  4662  0041  3003               	movlw	3
  4663  0042  318D  257C  3180   	fcall	init_ram
  4664                           
  4665                           ; Initialize objects allocated to BANK1
  4666  0045  308E               	movlw	low __pidataBANK1
  4667  0046  0084               	movwf	4
  4668  0047  308E               	movlw	(high __pidataBANK1)| (0+128)
  4669  0048  0085               	movwf	5
  4670  0049  30C5               	movlw	low __pdataBANK1
  4671  004A  0086               	movwf	6
  4672  004B  3000               	movlw	high __pdataBANK1
  4673  004C  0087               	movwf	7
  4674  004D  3019               	movlw	25
  4675  004E  318D  257C  3180   	fcall	init_ram
  4676                           
  4677                           ; Initialize objects allocated to BANK2
  4678  0051  30AF               	movlw	low __pidataBANK2
  4679  0052  0084               	movwf	4
  4680  0053  308F               	movlw	(high __pidataBANK2)| (0+128)
  4681  0054  0085               	movwf	5
  4682  0055  3020               	movlw	low __pdataBANK2
  4683  0056  0086               	movwf	6
  4684  0057  3001               	movlw	high __pdataBANK2
  4685  0058  0087               	movwf	7
  4686  0059  3028               	movlw	40
  4687  005A  318D  257C  3180   	fcall	init_ram
  4688                           
  4689                           ; Clear objects allocated to BANK0
  4690  005D  304E               	movlw	low __pbssBANK0
  4691  005E  0084               	movwf	4
  4692  005F  3000               	movlw	high __pbssBANK0
  4693  0060  0085               	movwf	5
  4694  0061  301B               	movlw	27
  4695  0062  318D  2576  3180   	fcall	clear_ram0
  4696                           
  4697                           ; Clear objects allocated to BANK1
  4698  0065  30A0               	movlw	low __pbssBANK1
  4699  0066  0084               	movwf	4
  4700  0067  3000               	movlw	high __pbssBANK1
  4701  0068  0085               	movwf	5
  4702  0069  3025               	movlw	37
  4703  006A  318D  2576         	fcall	clear_ram0
  4704  006C                     end_of_initialization:	
  4705                           ;End of C runtime variable initialization code
  4706                           
  4707  006C                     __end_of__initialization:	
  4708  006C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4709  006D  0020               	movlb	0
  4710  006E  3184  2C36         	ljmp	_main	;jump to C main() function
  4711                           
  4712                           	psect	bssBANK0
  4713  004E                     __pbssBANK0:	
  4714  004E                     _i2c_object:	
  4715  004E                     	ds	5
  4716  0053                     _timer1ReloadVal:	
  4717  0053                     	ds	2
  4718  0055                     _min:	
  4719  0055                     	ds	1
  4720  0056                     _localHour:	
  4721  0056                     	ds	1
  4722  0057                     _secondaryTick:	
  4723  0057                     	ds	1
  4724  0058                     _action:	
  4725  0058                     	ds	1
  4726  0059                     _blank:	
  4727  0059                     	ds	1
  4728  005A                     _settingHours:	
  4729  005A                     	ds	1
  4730  005B                     _mainState:	
  4731  005B                     	ds	1
  4732  005C                     _setDir:	
  4733  005C                     	ds	1
  4734  005D                     _setClock:	
  4735  005D                     	ds	1
  4736  005E                     _writeClock:	
  4737  005E                     	ds	1
  4738  005F                     I2C_ISR@i2c_10bit_address_restart:	
  4739  005F                     	ds	1
  4740  0060                     I2C_ISR@i2c_bytes_left:	
  4741  0060                     	ds	1
  4742  0061                     I2C_ISR@pi2c_buf_ptr:	
  4743  0061                     	ds	1
  4744  0062                     _p_i2c_current:	
  4745  0062                     	ds	1
  4746  0063                     _p_i2c_trb_current:	
  4747  0063                     	ds	1
  4748  0064                     _i2c_trb_count:	
  4749  0064                     	ds	1
  4750  0065                     _i2c_state:	
  4751  0065                     	ds	1
  4752  0066                     I2C_ISR@i2c_address:	
  4753  0066                     	ds	2
  4754  0068                     _hour:	
  4755  0068                     	ds	1
  4756                           
  4757                           	psect	dataBANK0
  4758  0069                     __pdataBANK0:	
  4759  0069                     _prevRow:	
  4760  0069                     	ds	1
  4761  006A                     _checkClock:	
  4762  006A                     	ds	1
  4763  006B                     _SECOND_MULTIPLIER:	
  4764  006B                     	ds	1
  4765                           
  4766                           	psect	bssBANK1
  4767  00A0                     __pbssBANK1:	
  4768  00A0                     TMR1_ISR@CountCallBack:	
  4769  00A0                     	ds	2
  4770  00A2                     _TMR1_InterruptHandler:	
  4771  00A2                     	ds	2
  4772  00A4                     _sec:	
  4773  00A4                     	ds	1
  4774  00A5                     _localMins:	
  4775  00A5                     	ds	1
  4776  00A6                     _DISPLAYBANK_col:	
  4777  00A6                     	ds	20
  4778  00BA                     I2C_MasterRead@trBlock:	
  4779  00BA                     	ds	4
  4780  00BE                     I2C_MasterWrite@trBlock:	
  4781  00BE                     	ds	4
  4782  00C2                     _i2c_tr_queue:	
  4783  00C2                     	ds	3
  4784                           
  4785                           	psect	dataBANK1
  4786  00C5                     __pdataBANK1:	
  4787  00C5                     _DISPLAYBANK_row_l:	
  4788  00C5                     	ds	12
  4789  00D1                     _tick:	
  4790  00D1                     	ds	2
  4791  00D3                     _DISPLAYBANK_row:	
  4792  00D3                     	ds	11
  4793                           
  4794                           	psect	dataBANK2
  4795  0120                     __pdataBANK2:	
  4796  0120                     _DISPLAYBANK_col_l:	
  4797  0120                     	ds	40
  4798                           
  4799                           	psect	inittext
  4800  0D7C                     init_ram:	
  4801  0D7C  00FE               	movwf	126
  4802  0D7D                     initloop:	
  4803  0D7D  0012               	moviw fsr0++
  4804  0D7E  001E               	movwi fsr1++
  4805  0D7F  0BFE               	decfsz	126,f
  4806  0D80  2D7D               	goto	initloop
  4807  0D81  3400               	retlw	0
  4808                           
  4809                           	psect	clrtext
  4810  0D76                     clear_ram0:	
  4811                           ;	Called with FSR0 containing the base address, and
  4812                           ;	WREG with the size to clear
  4813                           
  4814  0D76  0064               	clrwdt	;clear the watchdog before getting into this loop
  4815  0D77                     clrloop0:	
  4816  0D77  0180               	clrf	0	;clear RAM location pointed to by FSR
  4817  0D78  3101               	addfsr 0,1
  4818  0D79  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4819  0D7A  2D77               	goto	clrloop0	;have we reached the end yet?
  4820  0D7B  3400               	retlw	0	;all done for this memory range, return
  4821                           
  4822                           	psect	cstackBANK1
  4823  00E2                     __pcstackBANK1:	
  4824  00E2                     main@mask:	
  4825                           
  4826                           ; 2 bytes @ 0x0
  4827  00E2                     	ds	2
  4828  00E4                     main@i:	
  4829                           
  4830                           ; 1 bytes @ 0x2
  4831  00E4                     	ds	1
  4832  00E5                     main@row:	
  4833                           
  4834                           ; 1 bytes @ 0x3
  4835  00E5                     	ds	1
  4836                           
  4837                           	psect	cstackCOMMON
  4838  0070                     __pcstackCOMMON:	
  4839  0070                     ?_PIN_MANAGER_Initialize:	
  4840  0070                     ?_OSCILLATOR_Initialize:	
  4841                           ; 1 bytes @ 0x0
  4842                           
  4843  0070                     ?_I2C_Initialize:	
  4844                           ; 1 bytes @ 0x0
  4845                           
  4846  0070                     ?_TMR1_Initialize:	
  4847                           ; 1 bytes @ 0x0
  4848                           
  4849  0070                     ?_IOCCF2_DefaultInterruptHandler:	
  4850                           ; 1 bytes @ 0x0
  4851                           
  4852  0070                     ??_IOCCF2_DefaultInterruptHandler:	
  4853                           ; 1 bytes @ 0x0
  4854                           
  4855  0070                     ?_IOCCF3_DefaultInterruptHandler:	
  4856                           ; 1 bytes @ 0x0
  4857                           
  4858  0070                     ??_IOCCF3_DefaultInterruptHandler:	
  4859                           ; 1 bytes @ 0x0
  4860                           
  4861  0070                     ?_IOCCF2_ISR:	
  4862                           ; 1 bytes @ 0x0
  4863                           
  4864  0070                     ?_IOCCF3_ISR:	
  4865                           ; 1 bytes @ 0x0
  4866                           
  4867  0070                     ?_I2C_Stop:	
  4868                           ; 1 bytes @ 0x0
  4869                           
  4870  0070                     ??_I2C_Stop:	
  4871                           ; 1 bytes @ 0x0
  4872                           
  4873  0070                     ?_I2C_FunctionComplete:	
  4874                           ; 1 bytes @ 0x0
  4875                           
  4876  0070                     ??_I2C_FunctionComplete:	
  4877                           ; 1 bytes @ 0x0
  4878                           
  4879  0070                     ?_TMR1_ISR:	
  4880                           ; 1 bytes @ 0x0
  4881                           
  4882  0070                     ?_TMR1_DefaultInterruptHandler:	
  4883                           ; 1 bytes @ 0x0
  4884                           
  4885  0070                     ??_TMR1_DefaultInterruptHandler:	
  4886                           ; 1 bytes @ 0x0
  4887                           
  4888  0070                     ?_TMR1_StartTimer:	
  4889                           ; 1 bytes @ 0x0
  4890                           
  4891  0070                     ?_TMR1_CallBack:	
  4892                           ; 1 bytes @ 0x0
  4893                           
  4894  0070                     ?_LED_Initialize:	
  4895                           ; 1 bytes @ 0x0
  4896                           
  4897  0070                     ?_Delay:	
  4898                           ; 1 bytes @ 0x0
  4899                           
  4900  0070                     ?_Clock_Initialize:	
  4901                           ; 1 bytes @ 0x0
  4902                           
  4903  0070                     ?_Acc_Initialize:	
  4904                           ; 1 bytes @ 0x0
  4905                           
  4906  0070                     ?_Tick:	
  4907                           ; 1 bytes @ 0x0
  4908                           
  4909  0070                     ?_TapTime:	
  4910                           ; 1 bytes @ 0x0
  4911                           
  4912  0070                     ??_TapTime:	
  4913                           ; 1 bytes @ 0x0
  4914                           
  4915  0070                     ?_SetTurn:	
  4916                           ; 1 bytes @ 0x0
  4917                           
  4918  0070                     ??_SetTurn:	
  4919                           ; 1 bytes @ 0x0
  4920                           
  4921  0070                     ?_Clock_Display:	
  4922                           ; 1 bytes @ 0x0
  4923                           
  4924  0070                     ?_Clock_Write:	
  4925                           ; 1 bytes @ 0x0
  4926                           
  4927  0070                     ?_Acc_ProcessClickSrc:	
  4928                           ; 1 bytes @ 0x0
  4929                           
  4930  0070                     ?_Clock_Read:	
  4931                           ; 1 bytes @ 0x0
  4932                           
  4933  0070                     ?_SYSTEM_Initialize:	
  4934                           ; 1 bytes @ 0x0
  4935                           
  4936  0070                     ?_PIN_MANAGER_IOC:	
  4937                           ; 1 bytes @ 0x0
  4938                           
  4939  0070                     ?_I2C_ISR:	
  4940                           ; 1 bytes @ 0x0
  4941                           
  4942  0070                     ?_I2C_BusCollisionISR:	
  4943                           ; 1 bytes @ 0x0
  4944                           
  4945  0070                     ??_I2C_BusCollisionISR:	
  4946                           ; 1 bytes @ 0x0
  4947                           
  4948  0070                     ?_INTERRUPT_InterruptManager:	
  4949                           ; 1 bytes @ 0x0
  4950                           
  4951  0070                     ?_main:	
  4952                           ; 1 bytes @ 0x0
  4953                           
  4954  0070                     ?_IncHour:	
  4955                           ; 1 bytes @ 0x0
  4956                           
  4957  0070                     ?_Clock_Tap:	
  4958                           ; 1 bytes @ 0x0
  4959                           
  4960  0070                     ?___wmul:	
  4961                           ; 1 bytes @ 0x0
  4962                           
  4963  0070                     ___wmul@multiplier:	
  4964                           ; 2 bytes @ 0x0
  4965                           
  4966                           
  4967                           ; 2 bytes @ 0x0
  4968  0070                     	ds	1
  4969  0071                     ??_IOCCF2_ISR:	
  4970  0071                     ??_IOCCF3_ISR:	
  4971                           ; 1 bytes @ 0x1
  4972                           
  4973  0071                     ??_PIN_MANAGER_IOC:	
  4974                           ; 1 bytes @ 0x1
  4975                           
  4976  0071                     I2C_Stop@completion_code:	
  4977                           ; 1 bytes @ 0x1
  4978                           
  4979                           
  4980                           ; 1 bytes @ 0x1
  4981  0071                     	ds	1
  4982  0072                     ??_I2C_ISR:	
  4983  0072                     ___wmul@multiplicand:	
  4984                           ; 1 bytes @ 0x2
  4985                           
  4986                           
  4987                           ; 2 bytes @ 0x2
  4988  0072                     	ds	2
  4989  0074                     ??___wmul:	
  4990  0074                     ___wmul@product:	
  4991                           ; 1 bytes @ 0x4
  4992                           
  4993                           
  4994                           ; 2 bytes @ 0x4
  4995  0074                     	ds	2
  4996  0076                     ?___lwmod:	
  4997  0076                     ___lwmod@divisor:	
  4998                           ; 2 bytes @ 0x6
  4999                           
  5000                           
  5001                           ; 2 bytes @ 0x6
  5002  0076                     	ds	2
  5003  0078                     ___lwmod@dividend:	
  5004                           
  5005                           ; 2 bytes @ 0x8
  5006  0078                     	ds	2
  5007  007A                     ??___lwmod:	
  5008                           
  5009                           ; 1 bytes @ 0xA
  5010  007A                     	ds	1
  5011  007B                     ___lwmod@counter:	
  5012                           
  5013                           ; 1 bytes @ 0xB
  5014  007B                     	ds	1
  5015  007C                     ??_Tick:	
  5016                           
  5017                           ; 1 bytes @ 0xC
  5018  007C                     	ds	2
  5019  007E                     ??_TMR1_ISR:	
  5020  007E                     ??_TMR1_CallBack:	
  5021                           ; 1 bytes @ 0xE
  5022                           
  5023                           
  5024                           	psect	cstackBANK0
  5025  0020                     __pcstackBANK0:	
  5026                           ; 1 bytes @ 0xE
  5027                           
  5028  0020                     ??_INTERRUPT_InterruptManager:	
  5029                           
  5030                           ; 1 bytes @ 0x0
  5031  0020                     	ds	1
  5032  0021                     ??_OSCILLATOR_Initialize:	
  5033  0021                     ??_I2C_Initialize:	
  5034                           ; 1 bytes @ 0x1
  5035                           
  5036  0021                     ?_IOCCF2_SetInterruptHandler:	
  5037                           ; 1 bytes @ 0x1
  5038                           
  5039  0021                     ?_IOCCF3_SetInterruptHandler:	
  5040                           ; 1 bytes @ 0x1
  5041                           
  5042  0021                     ?_I2C_MasterWriteTRBBuild:	
  5043                           ; 1 bytes @ 0x1
  5044                           
  5045  0021                     ?_I2C_MasterTRBInsert:	
  5046                           ; 1 bytes @ 0x1
  5047                           
  5048  0021                     ?_I2C_MasterReadTRBBuild:	
  5049                           ; 1 bytes @ 0x1
  5050                           
  5051  0021                     ?_TMR1_SetInterruptHandler:	
  5052                           ; 1 bytes @ 0x1
  5053                           
  5054  0021                     ??_TMR1_StartTimer:	
  5055                           ; 1 bytes @ 0x1
  5056                           
  5057  0021                     ??_Delay:	
  5058                           ; 1 bytes @ 0x1
  5059                           
  5060  0021                     ??_IncHour:	
  5061                           ; 1 bytes @ 0x1
  5062                           
  5063  0021                     I2C_MasterTRBInsert@ptrb_list:	
  5064                           ; 1 bytes @ 0x1
  5065                           
  5066  0021                     I2C_MasterReadTRBBuild@pdata:	
  5067                           ; 1 bytes @ 0x1
  5068                           
  5069  0021                     I2C_MasterWriteTRBBuild@pdata:	
  5070                           ; 1 bytes @ 0x1
  5071                           
  5072  0021                     IncHour@in:	
  5073                           ; 1 bytes @ 0x1
  5074                           
  5075  0021                     IOCCF2_SetInterruptHandler@InterruptHandler:	
  5076                           ; 1 bytes @ 0x1
  5077                           
  5078  0021                     IOCCF3_SetInterruptHandler@InterruptHandler:	
  5079                           ; 2 bytes @ 0x1
  5080                           
  5081  0021                     TMR1_SetInterruptHandler@InterruptHandler:	
  5082                           ; 2 bytes @ 0x1
  5083                           
  5084                           
  5085                           ; 2 bytes @ 0x1
  5086  0021                     	ds	1
  5087  0022                     I2C_MasterTRBInsert@pflag:	
  5088  0022                     I2C_MasterReadTRBBuild@length:	
  5089                           ; 1 bytes @ 0x2
  5090                           
  5091  0022                     I2C_MasterWriteTRBBuild@length:	
  5092                           ; 1 bytes @ 0x2
  5093                           
  5094  0022                     Delay@length:	
  5095                           ; 1 bytes @ 0x2
  5096                           
  5097                           
  5098                           ; 1 bytes @ 0x2
  5099  0022                     	ds	1
  5100  0023                     ??_PIN_MANAGER_Initialize:	
  5101  0023                     ??_TMR1_Initialize:	
  5102                           ; 1 bytes @ 0x3
  5103                           
  5104  0023                     ??_IOCCF2_SetInterruptHandler:	
  5105                           ; 1 bytes @ 0x3
  5106                           
  5107  0023                     ??_IOCCF3_SetInterruptHandler:	
  5108                           ; 1 bytes @ 0x3
  5109                           
  5110  0023                     ??_I2C_MasterTRBInsert:	
  5111                           ; 1 bytes @ 0x3
  5112                           
  5113  0023                     ??_TMR1_SetInterruptHandler:	
  5114                           ; 1 bytes @ 0x3
  5115                           
  5116  0023                     PIN_MANAGER_Initialize@state:	
  5117                           ; 1 bytes @ 0x3
  5118                           
  5119  0023                     Delay@i:	
  5120                           ; 1 bytes @ 0x3
  5121                           
  5122  0023                     I2C_MasterReadTRBBuild@address:	
  5123                           ; 1 bytes @ 0x3
  5124                           
  5125  0023                     I2C_MasterWriteTRBBuild@address:	
  5126                           ; 2 bytes @ 0x3
  5127                           
  5128                           
  5129                           ; 2 bytes @ 0x3
  5130  0023                     	ds	1
  5131  0024                     ??_SYSTEM_Initialize:	
  5132  0024                     I2C_MasterTRBInsert@count:	
  5133                           ; 1 bytes @ 0x4
  5134                           
  5135                           
  5136                           ; 1 bytes @ 0x4
  5137  0024                     	ds	1
  5138  0025                     ??_I2C_MasterWriteTRBBuild:	
  5139  0025                     ??_I2C_MasterReadTRBBuild:	
  5140                           ; 1 bytes @ 0x5
  5141                           
  5142                           
  5143                           ; 1 bytes @ 0x5
  5144  0025                     	ds	2
  5145  0027                     I2C_MasterReadTRBBuild@ptrb:	
  5146  0027                     I2C_MasterWriteTRBBuild@ptrb:	
  5147                           ; 1 bytes @ 0x7
  5148                           
  5149                           
  5150                           ; 1 bytes @ 0x7
  5151  0027                     	ds	1
  5152  0028                     ?_I2CRead:	
  5153  0028                     ?_I2C_MasterWrite:	
  5154                           ; 1 bytes @ 0x8
  5155                           
  5156  0028                     I2C_MasterWrite@length:	
  5157                           ; 1 bytes @ 0x8
  5158                           
  5159  0028                     I2CRead@registerAddress:	
  5160                           ; 1 bytes @ 0x8
  5161                           
  5162                           
  5163                           ; 1 bytes @ 0x8
  5164  0028                     	ds	1
  5165  0029                     I2CRead@length:	
  5166  0029                     I2C_MasterWrite@address:	
  5167                           ; 1 bytes @ 0x9
  5168                           
  5169                           
  5170                           ; 2 bytes @ 0x9
  5171  0029                     	ds	1
  5172  002A                     I2CRead@address:	
  5173                           
  5174                           ; 2 bytes @ 0xA
  5175  002A                     	ds	1
  5176  002B                     I2C_MasterWrite@pflag:	
  5177                           
  5178                           ; 1 bytes @ 0xB
  5179  002B                     	ds	1
  5180  002C                     ??_I2CRead:	
  5181  002C                     ??_I2C_MasterWrite:	
  5182                           ; 1 bytes @ 0xC
  5183                           
  5184                           
  5185                           ; 1 bytes @ 0xC
  5186  002C                     	ds	2
  5187  002E                     I2C_MasterWrite@pdata:	
  5188  002E                     I2CRead@pdata:	
  5189                           ; 1 bytes @ 0xE
  5190                           
  5191                           
  5192                           ; 1 bytes @ 0xE
  5193  002E                     	ds	1
  5194  002F                     ?_I2CWrite:	
  5195  002F                     I2CWrite@length:	
  5196                           ; 1 bytes @ 0xF
  5197                           
  5198  002F                     I2CRead@readBuffer:	
  5199                           ; 1 bytes @ 0xF
  5200                           
  5201                           
  5202                           ; 1 bytes @ 0xF
  5203  002F                     	ds	1
  5204  0030                     I2CWrite@address:	
  5205  0030                     I2CRead@readTRB:	
  5206                           ; 2 bytes @ 0x10
  5207                           
  5208                           
  5209                           ; 8 bytes @ 0x10
  5210  0030                     	ds	2
  5211  0032                     ??_I2CWrite:	
  5212                           
  5213                           ; 1 bytes @ 0x12
  5214  0032                     	ds	2
  5215  0034                     I2CWrite@i:	
  5216                           
  5217                           ; 2 bytes @ 0x14
  5218  0034                     	ds	2
  5219  0036                     I2CWrite@pdata:	
  5220                           
  5221                           ; 1 bytes @ 0x16
  5222  0036                     	ds	1
  5223  0037                     I2CWrite@status:	
  5224                           
  5225                           ; 1 bytes @ 0x17
  5226  0037                     	ds	1
  5227  0038                     ??_LED_Initialize:	
  5228  0038                     ?_LED_Row:	
  5229                           ; 1 bytes @ 0x18
  5230                           
  5231  0038                     ??_Clock_Write:	
  5232                           ; 1 bytes @ 0x18
  5233                           
  5234  0038                     I2CRead@status:	
  5235                           ; 1 bytes @ 0x18
  5236                           
  5237  0038                     LED_Row@mask:	
  5238                           ; 1 bytes @ 0x18
  5239                           
  5240                           
  5241                           ; 2 bytes @ 0x18
  5242  0038                     	ds	1
  5243  0039                     ??_Acc_Initialize:	
  5244  0039                     ??_Clock_Read:	
  5245                           ; 1 bytes @ 0x19
  5246                           
  5247  0039                     LED_Initialize@status:	
  5248                           ; 1 bytes @ 0x19
  5249                           
  5250  0039                     Clock_Write@status:	
  5251                           ; 1 bytes @ 0x19
  5252                           
  5253                           
  5254                           ; 1 bytes @ 0x19
  5255  0039                     	ds	1
  5256  003A                     ??_LED_Row:	
  5257  003A                     LED_Initialize@writeBuffer:	
  5258                           ; 1 bytes @ 0x1A
  5259                           
  5260  003A                     Clock_Read@dataBuffer:	
  5261                           ; 3 bytes @ 0x1A
  5262                           
  5263  003A                     Clock_Write@writeBuffer:	
  5264                           ; 3 bytes @ 0x1A
  5265                           
  5266  003A                     Acc_Initialize@dataBuffer:	
  5267                           ; 4 bytes @ 0x1A
  5268                           
  5269                           
  5270                           ; 6 bytes @ 0x1A
  5271  003A                     	ds	2
  5272  003C                     LED_Row@writeBuffer:	
  5273                           
  5274                           ; 3 bytes @ 0x1C
  5275  003C                     	ds	1
  5276  003D                     ??_Clock_Initialize:	
  5277  003D                     ??_Clock_Display:	
  5278                           ; 1 bytes @ 0x1D
  5279                           
  5280                           
  5281                           ; 1 bytes @ 0x1D
  5282  003D                     	ds	1
  5283  003E                     Clock_Initialize@status:	
  5284  003E                     Clock_Display@fetchTime:	
  5285                           ; 1 bytes @ 0x1E
  5286                           
  5287                           
  5288                           ; 1 bytes @ 0x1E
  5289  003E                     	ds	1
  5290  003F                     LED_Row@row:	
  5291  003F                     Clock_Initialize@start:	
  5292                           ; 1 bytes @ 0x1F
  5293                           
  5294  003F                     Clock_Display@hourDisplay:	
  5295                           ; 1 bytes @ 0x1F
  5296                           
  5297                           
  5298                           ; 1 bytes @ 0x1F
  5299  003F                     	ds	1
  5300  0040                     Clock_Display@col:	
  5301  0040                     Acc_Initialize@status:	
  5302                           ; 1 bytes @ 0x20
  5303                           
  5304  0040                     Clock_Initialize@writeBuffer:	
  5305                           ; 1 bytes @ 0x20
  5306                           
  5307                           
  5308                           ; 5 bytes @ 0x20
  5309  0040                     	ds	1
  5310  0041                     Clock_Display@row:	
  5311  0041                     Acc_Initialize@writeBuffer:	
  5312                           ; 1 bytes @ 0x21
  5313                           
  5314                           
  5315                           ; 7 bytes @ 0x21
  5316  0041                     	ds	1
  5317  0042                     ??_Clock_Tap:	
  5318                           
  5319                           ; 1 bytes @ 0x22
  5320  0042                     	ds	1
  5321  0043                     Clock_Tap@hours:	
  5322                           
  5323                           ; 1 bytes @ 0x23
  5324  0043                     	ds	1
  5325  0044                     ??_Acc_ProcessClickSrc:	
  5326                           
  5327                           ; 1 bytes @ 0x24
  5328  0044                     	ds	1
  5329  0045                     Acc_ProcessClickSrc@dataBuffer:	
  5330                           
  5331                           ; 6 bytes @ 0x25
  5332  0045                     	ds	6
  5333  004B                     Acc_ProcessClickSrc@hours:	
  5334                           
  5335                           ; 1 bytes @ 0x2B
  5336  004B                     	ds	1
  5337  004C                     ??_main:	
  5338                           
  5339                           ; 1 bytes @ 0x2C
  5340  004C                     	ds	2
  5341                           
  5342                           	psect	maintext
  5343  0436                     __pmaintext:	
  5344 ;;
  5345 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5346 ;;
  5347 ;; *************** function _main *****************
  5348 ;; Defined at:
  5349 ;;		line 86 in file "main.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  mask            2    0[BANK1 ] unsigned int 
  5354 ;;  row             1    3[BANK1 ] unsigned char 
  5355 ;;  i               1    2[BANK1 ] unsigned char 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : B1F/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5366 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5367 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;Total ram usage:        6 bytes
  5370 ;; Hardware stack levels required when called:   11
  5371 ;; This function calls:
  5372 ;;		_Acc_Initialize
  5373 ;;		_Acc_ProcessClickSrc
  5374 ;;		_Clock_Display
  5375 ;;		_Clock_Initialize
  5376 ;;		_Clock_Write
  5377 ;;		_Delay
  5378 ;;		_IOCCF2_SetInterruptHandler
  5379 ;;		_IOCCF3_SetInterruptHandler
  5380 ;;		_LED_Initialize
  5381 ;;		_LED_Row
  5382 ;;		_SYSTEM_Initialize
  5383 ;;		_TMR1_SetInterruptHandler
  5384 ;; This function is called by:
  5385 ;;		Startup code after reset
  5386 ;; This function uses a non-reentrant model
  5387 ;;
  5388                           
  5389                           
  5390                           ;psect for function _main
  5391  0436                     _main:	
  5392                           
  5393                           ;main.c: 89: SYSTEM_Initialize();
  5394                           
  5395                           ;incstack = 0
  5396                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5397  0436  318D  25C3  3184   	fcall	_SYSTEM_Initialize
  5398                           
  5399                           ;main.c: 92: (INTCONbits.GIE = 1);
  5400  0439  178B               	bsf	11,7	;volatile
  5401                           
  5402                           ;main.c: 95: (INTCONbits.PEIE = 1);
  5403  043A  170B               	bsf	11,6	;volatile
  5404                           
  5405                           ;main.c: 103: LED_Initialize();
  5406  043B  3187  279B  3184   	fcall	_LED_Initialize
  5407                           
  5408                           ;main.c: 104: LED_Row(0x00, 0b1111111111111110);
  5409  043E  30FE               	movlw	254
  5410  043F  0020               	movlb	0	; select bank0
  5411  0440  00B8               	movwf	LED_Row@mask
  5412  0441  30FF               	movlw	255
  5413  0442  00B9               	movwf	LED_Row@mask+1
  5414  0443  3000               	movlw	0
  5415  0444  3185  25A9  3184   	fcall	_LED_Row
  5416                           
  5417                           ;main.c: 105: Delay(100);
  5418  0447  3064               	movlw	100
  5419  0448  318E  2646  3184   	fcall	_Delay
  5420                           
  5421                           ;main.c: 111: Clock_Initialize(1);
  5422  044B  3001               	movlw	1
  5423  044C  3186  26CA  3184   	fcall	_Clock_Initialize
  5424                           
  5425                           ;main.c: 112: LED_Row(0x00, 0b1111111111111011);
  5426  044F  30FB               	movlw	251
  5427  0450  0020               	movlb	0	; select bank0
  5428  0451  00B8               	movwf	LED_Row@mask
  5429  0452  30FF               	movlw	255
  5430  0453  00B9               	movwf	LED_Row@mask+1
  5431  0454  3000               	movlw	0
  5432  0455  3185  25A9  3184   	fcall	_LED_Row
  5433                           
  5434                           ;main.c: 113: Delay(100);
  5435  0458  3064               	movlw	100
  5436  0459  318E  2646  3184   	fcall	_Delay
  5437                           
  5438                           ;main.c: 115: Acc_Initialize();
  5439  045C  3185  251B  3184   	fcall	_Acc_Initialize
  5440                           
  5441                           ;main.c: 116: LED_Row(0x00, 0b1111111111110111);
  5442  045F  30F7               	movlw	247
  5443  0460  0020               	movlb	0	; select bank0
  5444  0461  00B8               	movwf	LED_Row@mask
  5445  0462  30FF               	movlw	255
  5446  0463  00B9               	movwf	LED_Row@mask+1
  5447  0464  3000               	movlw	0
  5448  0465  3185  25A9  3184   	fcall	_LED_Row
  5449                           
  5450                           ;main.c: 117: Delay(100);
  5451  0468  3064               	movlw	100
  5452  0469  318E  2646  3184   	fcall	_Delay
  5453                           
  5454                           ;main.c: 119: TMR1_SetInterruptHandler(Tick);
  5455  046C  3014               	movlw	low _Tick
  5456  046D  0020               	movlb	0	; select bank0
  5457  046E  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  5458  046F  3006               	movlw	high _Tick
  5459  0470  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  5460  0471  318D  25A3  3184   	fcall	_TMR1_SetInterruptHandler
  5461                           
  5462                           ;main.c: 121: IOCCF2_SetInterruptHandler(TapTime);
  5463  0474  30FA               	movlw	low _TapTime
  5464  0475  0020               	movlb	0	; select bank0
  5465  0476  00A1               	movwf	IOCCF2_SetInterruptHandler@InterruptHandler
  5466  0477  300D               	movlw	high _TapTime
  5467  0478  00A2               	movwf	IOCCF2_SetInterruptHandler@InterruptHandler+1
  5468  0479  318D  2591  3184   	fcall	_IOCCF2_SetInterruptHandler
  5469                           
  5470                           ;main.c: 122: IOCCF3_SetInterruptHandler(SetTurn);
  5471  047C  3089               	movlw	low _SetTurn
  5472  047D  0020               	movlb	0	; select bank0
  5473  047E  00A1               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler
  5474  047F  300D               	movlw	high _SetTurn
  5475  0480  00A2               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler+1
  5476  0481  318D  259A  3184   	fcall	_IOCCF3_SetInterruptHandler
  5477                           
  5478                           ;main.c: 124: uint8_t i = 0;
  5479  0484  0021               	movlb	1	; select bank1
  5480  0485  01E4               	clrf	main@i^(0+128)
  5481                           
  5482                           ;main.c: 125: uint8_t row = 0;
  5483  0486  01E5               	clrf	main@row^(0+128)
  5484                           
  5485                           ;main.c: 126: uint16_t mask = 0x0000;
  5486  0487  01E2               	clrf	main@mask^(0+128)
  5487  0488  01E3               	clrf	(main@mask+1)^(0+128)
  5488  0489                     l3814:	
  5489                           ;main.c: 127: while (1)
  5490                           
  5491                           
  5492                           ;main.c: 128: {
  5493                           ;main.c: 129: row = DISPLAYBANK_row[++i];
  5494  0489  3001               	movlw	1
  5495  048A  0020               	movlb	0	; select bank0
  5496  048B  00CC               	movwf	??_main
  5497  048C  084C               	movf	??_main,w
  5498  048D  0021               	movlb	1	; select bank1
  5499  048E  07E4               	addwf	main@i^(0+128),f
  5500  048F  0864               	movf	main@i^(0+128),w
  5501  0490  3ED3               	addlw	(low (_DISPLAYBANK_row| 0))& (0+255)
  5502  0491  0086               	movwf	6
  5503  0492  0187               	clrf	7
  5504  0493  0801               	movf	1,w
  5505  0494  0020               	movlb	0	; select bank0
  5506  0495  00CD               	movwf	??_main+1
  5507  0496  084D               	movf	??_main+1,w
  5508  0497  0021               	movlb	1	; select bank1
  5509  0498  00E5               	movwf	main@row^(0+128)
  5510                           
  5511                           ;main.c: 130: if(i == 10 || row == 0xFF)
  5512  0499  300A               	movlw	10
  5513  049A  0664               	xorwf	main@i^(0+128),w
  5514  049B  1D03               	btfss	3,2
  5515  049C  0A65               	incf	main@row^(0+128),w
  5516  049D  1D03               	btfss	3,2
  5517  049E  2CAA               	goto	l3824
  5518                           
  5519                           ;main.c: 131: {
  5520                           ;main.c: 132: i = 0;
  5521  049F  01E4               	clrf	main@i^(0+128)
  5522                           
  5523                           ;main.c: 133: row = DISPLAYBANK_row[i];
  5524  04A0  0864               	movf	main@i^(0+128),w
  5525  04A1  3ED3               	addlw	(low (_DISPLAYBANK_row| 0))& (0+255)
  5526  04A2  0086               	movwf	6
  5527  04A3  0187               	clrf	7
  5528  04A4  0801               	movf	1,w
  5529  04A5  0020               	movlb	0	; select bank0
  5530  04A6  00CC               	movwf	??_main
  5531  04A7  084C               	movf	??_main,w
  5532  04A8  0021               	movlb	1	; select bank1
  5533  04A9  00E5               	movwf	main@row^(0+128)
  5534  04AA                     l3824:	
  5535                           
  5536                           ;main.c: 134: }
  5537                           ;main.c: 136: if(blank)
  5538  04AA  0020               	movlb	0	; select bank0
  5539  04AB  0859               	movf	_blank,w
  5540  04AC  1903               	btfsc	3,2
  5541  04AD  2CDC               	goto	l3856
  5542                           
  5543                           ;main.c: 137: {
  5544                           ;main.c: 138: if(mainState == STATE_SET_HOURS)
  5545  04AE  035B               	decf	_mainState,w
  5546  04AF  1D03               	btfss	3,2
  5547  04B0  2CC2               	goto	l3842
  5548                           
  5549                           ;main.c: 139: {
  5550                           ;main.c: 140: if(row < 4)
  5551  04B1  3004               	movlw	4
  5552  04B2  0021               	movlb	1	; select bank1
  5553  04B3  0265               	subwf	main@row^(0+128),w
  5554  04B4  1C03               	btfss	3,0
  5555  04B5  2CDD               	goto	L6
  5556                           
  5557                           ;main.c: 142: else if(row == 4)
  5558                           
  5559                           ;main.c: 141: mask = 0x0000;
  5560  04B6  3004               	movlw	4
  5561  04B7  0665               	xorwf	main@row^(0+128),w
  5562  04B8  1D03               	btfss	3,2
  5563  04B9  2CBC               	goto	l3836
  5564                           
  5565                           ;main.c: 143: mask = 0x0780;
  5566  04BA  3080               	movlw	128
  5567  04BB  2CD8               	goto	L8
  5568  04BC                     l3836:	
  5569                           
  5570                           ;main.c: 144: else if(row == 9)
  5571  04BC  3009               	movlw	9
  5572  04BD  0665               	xorwf	main@row^(0+128),w
  5573  04BE  1D03               	btfss	3,2
  5574  04BF  2CC7               	goto	L7
  5575                           
  5576                           ;main.c: 145: mask = 0x0007;
  5577  04C0  3007               	movlw	7
  5578  04C1  2CD0               	goto	L9
  5579  04C2                     l3842:	
  5580                           ;main.c: 148: }
  5581                           
  5582                           ;main.c: 146: else
  5583                           ;main.c: 147: mask = 0xFFFF;
  5584                           
  5585                           
  5586                           ;main.c: 149: else
  5587                           ;main.c: 150: {
  5588                           ;main.c: 151: if(row >= 0 && row < 4)
  5589  04C2  3004               	movlw	4
  5590  04C3  0021               	movlb	1	; select bank1
  5591  04C4  0265               	subwf	main@row^(0+128),w
  5592  04C5  1803               	skipnc
  5593  04C6  2CCB               	goto	l3846
  5594  04C7                     L7:	
  5595                           
  5596                           ;main.c: 152: mask = 0xFFFF;
  5597  04C7  30FF               	movlw	255
  5598  04C8  00E2               	movwf	main@mask^(0+128)
  5599  04C9  30FF               	movlw	255
  5600  04CA  2CDA               	goto	L5
  5601  04CB                     l3846:	
  5602                           
  5603                           ;main.c: 153: else if(row == 4)
  5604  04CB  3004               	movlw	4
  5605  04CC  0665               	xorwf	main@row^(0+128),w
  5606  04CD  1D03               	btfss	3,2
  5607  04CE  2CD3               	goto	l3850
  5608                           
  5609                           ;main.c: 154: mask = 0x000F;
  5610  04CF  300F               	movlw	15
  5611  04D0                     L9:	
  5612  04D0  00E2               	movwf	main@mask^(0+128)
  5613  04D1  3000               	movlw	0
  5614  04D2  2CDA               	goto	L5
  5615  04D3                     l3850:	
  5616                           
  5617                           ;main.c: 155: else if(row == 9)
  5618  04D3  3009               	movlw	9
  5619  04D4  0665               	xorwf	main@row^(0+128),w
  5620  04D5  1D03               	btfss	3,2
  5621  04D6  2CDD               	goto	L6
  5622                           
  5623                           ;main.c: 156: mask = 0x07E0;
  5624  04D7  30E0               	movlw	224
  5625  04D8                     L8:	
  5626  04D8  00E2               	movwf	main@mask^(0+128)
  5627  04D9  3007               	movlw	7
  5628  04DA                     L5:	
  5629  04DA  00E3               	movwf	(main@mask^(0+128)+1)
  5630  04DB  2CDF               	goto	l3858
  5631  04DC                     l3856:	
  5632                           ;main.c: 159: }
  5633                           ;main.c: 160: }
  5634                           
  5635                           ;main.c: 157: else
  5636                           ;main.c: 158: mask = 0x0000;
  5637                           
  5638                           
  5639                           ;main.c: 161: else
  5640                           ;main.c: 162: mask = 0x0000;
  5641  04DC  0021               	movlb	1	; select bank1
  5642  04DD                     L6:	
  5643  04DD  01E2               	clrf	main@mask^(0+128)
  5644  04DE  01E3               	clrf	(main@mask+1)^(0+128)
  5645  04DF                     l3858:	
  5646                           
  5647                           ;main.c: 163: LED_Row(row, DISPLAYBANK_col[i] | mask);
  5648  04DF  3564               	lslf	main@i^(0+128),w
  5649  04E0  3EA6               	addlw	(low (_DISPLAYBANK_col| 0))& (0+255)
  5650  04E1  0086               	movwf	6
  5651  04E2  0187               	clrf	7
  5652  04E3  3F40               	moviw [0]fsr1
  5653  04E4  0020               	movlb	0	; select bank0
  5654  04E5  00CC               	movwf	??_main
  5655  04E6  3F41               	moviw [1]fsr1
  5656  04E7  00CD               	movwf	??_main+1
  5657  04E8  0021               	movlb	1	; select bank1
  5658  04E9  0862               	movf	main@mask^(0+128),w
  5659  04EA  0020               	movlb	0	; select bank0
  5660  04EB  044C               	iorwf	??_main,w
  5661  04EC  00B8               	movwf	LED_Row@mask
  5662  04ED  0021               	movlb	1	; select bank1
  5663  04EE  0863               	movf	(main@mask+1)^(0+128),w
  5664  04EF  0020               	movlb	0	; select bank0
  5665  04F0  044D               	iorwf	??_main+1,w
  5666  04F1  00B9               	movwf	LED_Row@mask+1
  5667  04F2  0021               	movlb	1	; select bank1
  5668  04F3  0865               	movf	main@row^(0+128),w
  5669  04F4  3185  25A9  3184   	fcall	_LED_Row
  5670                           
  5671                           ;main.c: 165: switch(action)
  5672  04F7  2D0C               	goto	l3868
  5673  04F8                     l3860:	
  5674                           ;main.c: 166: {
  5675                           ;main.c: 167: case ACTION_GETTIME:
  5676                           
  5677                           
  5678                           ;main.c: 168: Clock_Display(1);
  5679  04F8  3001               	movlw	1
  5680  04F9  3180  2070  3184   	fcall	_Clock_Display
  5681                           
  5682                           ;main.c: 169: break;
  5683  04FC  2D18               	goto	l3870
  5684  04FD                     l3862:	
  5685                           ;main.c: 170: case ACTION_SETTIME:
  5686                           
  5687                           
  5688                           ;main.c: 171: Clock_Write();
  5689  04FD  318E  26FB  3184   	fcall	_Clock_Write
  5690                           
  5691                           ;main.c: 172: break;
  5692  0500  2D18               	goto	l3870
  5693  0501                     l3864:	
  5694                           ;main.c: 173: case ACTION_READ_TAP:
  5695                           
  5696                           
  5697                           ;main.c: 174: Acc_ProcessClickSrc(mainState == STATE_SET_HOURS);
  5698  0501  0020               	movlb	0	; select bank0
  5699  0502  035B               	decf	_mainState,w
  5700  0503  1D03               	btfss	3,2
  5701  0504  2D07               	goto	u2910
  5702  0505  3001               	movlw	1
  5703  0506  2D08               	goto	u2920
  5704  0507                     u2910:	
  5705  0507  3000               	movlw	0
  5706  0508                     u2920:	
  5707  0508  318E  2631  3184   	fcall	_Acc_ProcessClickSrc
  5708                           
  5709                           ;main.c: 178: }
  5710                           
  5711                           ;main.c: 177: break;
  5712                           
  5713                           ;main.c: 176: default:
  5714                           
  5715                           ;main.c: 175: break;
  5716  050B  2D18               	goto	l3870
  5717  050C                     l3868:	
  5718  050C  0020               	movlb	0	; select bank0
  5719  050D  0858               	movf	_action,w
  5720                           
  5721                           ; Switch size 1, requested type "space"
  5722                           ; Number of cases is 3, Range of values is 1 to 3
  5723                           ; switch strategies available:
  5724                           ; Name         Instructions Cycles
  5725                           ; simple_byte           10     6 (average)
  5726                           ; direct_byte           15     9 (fixed)
  5727                           ; jumptable            263     9 (fixed)
  5728                           ;	Chosen strategy is simple_byte
  5729  050E  3A01               	xorlw	1	; case 1
  5730  050F  1903               	skipnz
  5731  0510  2CF8               	goto	l3860
  5732  0511  3A03               	xorlw	3	; case 2
  5733  0512  1903               	skipnz
  5734  0513  2CFD               	goto	l3862
  5735  0514  3A01               	xorlw	1	; case 3
  5736  0515  1903               	skipnz
  5737  0516  2D01               	goto	l3864
  5738  0517  2D18               	goto	l3870
  5739  0518                     l3870:	
  5740                           
  5741                           ;main.c: 180: action = 0;
  5742  0518  0020               	movlb	0	; select bank0
  5743  0519  01D8               	clrf	_action
  5744  051A  2C89               	goto	l3814
  5745  051B                     __end_of_main:	
  5746                           
  5747                           	psect	text1
  5748  0DC3                     __ptext1:	
  5749 ;; *************** function _SYSTEM_Initialize *****************
  5750 ;; Defined at:
  5751 ;;		line 76 in file "mcc_generated_files/mcc.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;		None
  5754 ;; Auto vars:     Size  Location     Type
  5755 ;;		None
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      void 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0, pclath, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;Total ram usage:        0 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    7
  5772 ;; This function calls:
  5773 ;;		_I2C_Initialize
  5774 ;;		_OSCILLATOR_Initialize
  5775 ;;		_PIN_MANAGER_Initialize
  5776 ;;		_TMR1_Initialize
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           
  5783                           ;psect for function _SYSTEM_Initialize
  5784  0DC3                     _SYSTEM_Initialize:	
  5785                           
  5786                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  5787                           
  5788                           ;incstack = 0
  5789                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5790  0DC3  3186  2671  318D   	fcall	_PIN_MANAGER_Initialize
  5791                           
  5792                           ;mcc.c: 80: OSCILLATOR_Initialize();
  5793  0DC6  318D  2582  318D   	fcall	_OSCILLATOR_Initialize
  5794                           
  5795                           ;mcc.c: 81: I2C_Initialize();
  5796  0DC9  318E  2675  318D   	fcall	_I2C_Initialize
  5797                           
  5798                           ;mcc.c: 82: TMR1_Initialize();
  5799  0DCC  318E  26A7         	fcall	_TMR1_Initialize
  5800  0DCE  0008               	return
  5801  0DCF                     __end_of_SYSTEM_Initialize:	
  5802                           
  5803                           	psect	text2
  5804  0EA7                     __ptext2:	
  5805 ;; *************** function _TMR1_Initialize *****************
  5806 ;; Defined at:
  5807 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, status,2, status,0, pclath, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;Total ram usage:        0 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    6
  5828 ;; This function calls:
  5829 ;;		_TMR1_SetInterruptHandler
  5830 ;;		_TMR1_StartTimer
  5831 ;; This function is called by:
  5832 ;;		_SYSTEM_Initialize
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           
  5837                           ;psect for function _TMR1_Initialize
  5838  0EA7                     _TMR1_Initialize:	
  5839                           
  5840                           ;tmr1.c: 68: T1CON = 0xF0;
  5841                           
  5842                           ;incstack = 0
  5843                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5844  0EA7  30F0               	movlw	240
  5845  0EA8  0020               	movlb	0	; select bank0
  5846  0EA9  0098               	movwf	24	;volatile
  5847                           
  5848                           ;tmr1.c: 71: T1GCON = 0x00;
  5849  0EAA  0199               	clrf	25	;volatile
  5850                           
  5851                           ;tmr1.c: 74: TMR1H = 0xFC;
  5852  0EAB  30FC               	movlw	252
  5853  0EAC  0097               	movwf	23	;volatile
  5854                           
  5855                           ;tmr1.c: 77: TMR1L = 0x37;
  5856  0EAD  3037               	movlw	55
  5857  0EAE  0096               	movwf	22	;volatile
  5858                           
  5859                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  5860  0EAF  0817               	movf	23,w	;volatile
  5861  0EB0  00D4               	movwf	_timer1ReloadVal+1	;volatile
  5862  0EB1  0816               	movf	22,w	;volatile
  5863  0EB2  00D3               	movwf	_timer1ReloadVal	;volatile
  5864                           
  5865                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  5866  0EB3  1010               	bcf	16,0	;volatile
  5867                           
  5868                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
  5869  0EB4  0021               	movlb	1	; select bank1
  5870  0EB5  1410               	bsf	16,0	;volatile
  5871                           
  5872                           ;tmr1.c: 89: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  5873  0EB6  30FF               	movlw	low _TMR1_DefaultInterruptHandler
  5874  0EB7  0020               	movlb	0	; select bank0
  5875  0EB8  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  5876  0EB9  3007               	movlw	high _TMR1_DefaultInterruptHandler
  5877  0EBA  00A2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  5878  0EBB  318D  25A3  318E   	fcall	_TMR1_SetInterruptHandler
  5879                           
  5880                           ;tmr1.c: 92: TMR1_StartTimer();
  5881  0EBE  318D  2570         	fcall	_TMR1_StartTimer
  5882  0EC0  0008               	return
  5883  0EC1                     __end_of_TMR1_Initialize:	
  5884                           
  5885                           	psect	text3
  5886  0D70                     __ptext3:	
  5887 ;; *************** function _TMR1_StartTimer *****************
  5888 ;; Defined at:
  5889 ;;		line 95 in file "mcc_generated_files/tmr1.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;		None
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		None
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;Total ram usage:        0 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    5
  5910 ;; This function calls:
  5911 ;;		Nothing
  5912 ;; This function is called by:
  5913 ;;		_TMR1_Initialize
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           
  5918                           ;psect for function _TMR1_StartTimer
  5919  0D70                     _TMR1_StartTimer:	
  5920                           
  5921                           ;tmr1.c: 98: T1CONbits.TMR1ON = 1;
  5922                           
  5923                           ;incstack = 0
  5924                           ; Regs used in _TMR1_StartTimer: []
  5925  0D70  0020               	movlb	0	; select bank0
  5926  0D71  1418               	bsf	24,0	;volatile
  5927  0D72  0008               	return
  5928  0D73                     __end_of_TMR1_StartTimer:	
  5929                           
  5930                           	psect	text4
  5931  0DA3                     __ptext4:	
  5932 ;; *************** function _TMR1_SetInterruptHandler *****************
  5933 ;; Defined at:
  5934 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  InterruptHan    2    1[BANK0 ] PTR void 
  5937 ;;		 -> Tick(1), TMR1_DefaultInterruptHandler(1), 
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;		None
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      void 
  5942 ;; Registers used:
  5943 ;;		wreg
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5952 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;Total ram usage:        2 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:    5
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_TMR1_Initialize
  5960 ;;		_main
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           
  5965                           ;psect for function _TMR1_SetInterruptHandler
  5966  0DA3                     _TMR1_SetInterruptHandler:	
  5967                           
  5968                           ;tmr1.c: 186: TMR1_InterruptHandler = InterruptHandler;
  5969                           
  5970                           ;incstack = 0
  5971                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  5972  0DA3  0020               	movlb	0	; select bank0
  5973  0DA4  0822               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  5974  0DA5  0021               	movlb	1	; select bank1
  5975  0DA6  00A3               	movwf	(_TMR1_InterruptHandler+1)^(0+128)
  5976  0DA7  0020               	movlb	0	; select bank0
  5977  0DA8  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  5978  0DA9  0021               	movlb	1	; select bank1
  5979  0DAA  00A2               	movwf	_TMR1_InterruptHandler^(0+128)
  5980  0DAB  0008               	return
  5981  0DAC                     __end_of_TMR1_SetInterruptHandler:	
  5982                           
  5983                           	psect	text5
  5984  0671                     __ptext5:	
  5985 ;; *************** function _PIN_MANAGER_Initialize *****************
  5986 ;; Defined at:
  5987 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;		None
  5990 ;; Auto vars:     Size  Location     Type
  5991 ;;  state           1    3[BANK0 ] unsigned char 
  5992 ;; Return value:  Size  Location     Type
  5993 ;;                  1    wreg      void 
  5994 ;; Registers used:
  5995 ;;		wreg, status,2, status,0, pclath, cstack
  5996 ;; Tracked objects:
  5997 ;;		On entry : 0/0
  5998 ;;		On exit  : 0/0
  5999 ;;		Unchanged: 0/0
  6000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6004 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6005 ;;Total ram usage:        1 bytes
  6006 ;; Hardware stack levels used:    1
  6007 ;; Hardware stack levels required when called:    6
  6008 ;; This function calls:
  6009 ;;		_IOCCF2_SetInterruptHandler
  6010 ;;		_IOCCF3_SetInterruptHandler
  6011 ;; This function is called by:
  6012 ;;		_SYSTEM_Initialize
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           
  6017                           ;psect for function _PIN_MANAGER_Initialize
  6018  0671                     _PIN_MANAGER_Initialize:	
  6019                           
  6020                           ;pin_manager.c: 59: LATA = 0x00;
  6021                           
  6022                           ;incstack = 0
  6023                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6024  0671  0022               	movlb	2	; select bank2
  6025  0672  018C               	clrf	12	;volatile
  6026                           
  6027                           ;pin_manager.c: 60: LATB = 0x00;
  6028  0673  018D               	clrf	13	;volatile
  6029                           
  6030                           ;pin_manager.c: 61: LATC = 0x00;
  6031  0674  018E               	clrf	14	;volatile
  6032                           
  6033                           ;pin_manager.c: 66: TRISA = 0x11;
  6034  0675  3011               	movlw	17
  6035  0676  0021               	movlb	1	; select bank1
  6036  0677  008C               	movwf	12	;volatile
  6037                           
  6038                           ;pin_manager.c: 67: TRISB = 0x70;
  6039  0678  3070               	movlw	112
  6040  0679  008D               	movwf	13	;volatile
  6041                           
  6042                           ;pin_manager.c: 68: TRISC = 0xDE;
  6043  067A  30DE               	movlw	222
  6044  067B  008E               	movwf	14	;volatile
  6045                           
  6046                           ;pin_manager.c: 73: ANSELC = 0xC3;
  6047  067C  30C3               	movlw	195
  6048  067D  0023               	movlb	3	; select bank3
  6049  067E  008E               	movwf	14	;volatile
  6050                           
  6051                           ;pin_manager.c: 74: ANSELB = 0xA0;
  6052  067F  30A0               	movlw	160
  6053  0680  008D               	movwf	13	;volatile
  6054                           
  6055                           ;pin_manager.c: 75: ANSELA = 0x11;
  6056  0681  3011               	movlw	17
  6057  0682  008C               	movwf	12	;volatile
  6058                           
  6059                           ;pin_manager.c: 80: WPUB = 0xF0;
  6060  0683  30F0               	movlw	240
  6061  0684  0024               	movlb	4	; select bank4
  6062  0685  008D               	movwf	13	;volatile
  6063                           
  6064                           ;pin_manager.c: 81: WPUA = 0x3F;
  6065  0686  303F               	movlw	63
  6066  0687  008C               	movwf	12	;volatile
  6067                           
  6068                           ;pin_manager.c: 82: WPUC = 0xFF;
  6069  0688  30FF               	movlw	255
  6070  0689  008E               	movwf	14	;volatile
  6071                           
  6072                           ;pin_manager.c: 83: OPTION_REGbits.nWPUEN = 0;
  6073  068A  0021               	movlb	1	; select bank1
  6074  068B  1395               	bcf	21,7	;volatile
  6075                           
  6076                           ;pin_manager.c: 88: ODCONA = 0x00;
  6077  068C  0025               	movlb	5	; select bank5
  6078  068D  018C               	clrf	12	;volatile
  6079                           
  6080                           ;pin_manager.c: 89: ODCONB = 0x00;
  6081  068E  018D               	clrf	13	;volatile
  6082                           
  6083                           ;pin_manager.c: 90: ODCONC = 0x00;
  6084  068F  018E               	clrf	14	;volatile
  6085                           
  6086                           ;pin_manager.c: 97: IOCCFbits.IOCCF2 = 0;
  6087  0690  0027               	movlb	7	; select bank7
  6088  0691  1119               	bcf	25,2	;volatile
  6089                           
  6090                           ;pin_manager.c: 98: IOCCFbits.IOCCF3 = 0;
  6091  0692  1199               	bcf	25,3	;volatile
  6092                           
  6093                           ;pin_manager.c: 100: IOCCNbits.IOCCN2 = 0;
  6094  0693  1118               	bcf	24,2	;volatile
  6095                           
  6096                           ;pin_manager.c: 101: IOCCNbits.IOCCN3 = 0;
  6097  0694  1198               	bcf	24,3	;volatile
  6098                           
  6099                           ;pin_manager.c: 103: IOCCPbits.IOCCP2 = 1;
  6100  0695  1517               	bsf	23,2	;volatile
  6101                           
  6102                           ;pin_manager.c: 104: IOCCPbits.IOCCP3 = 1;
  6103  0696  1597               	bsf	23,3	;volatile
  6104                           
  6105                           ;pin_manager.c: 107: IOCCF2_SetInterruptHandler(IOCCF2_DefaultInterruptHandler);
  6106  0697  306F               	movlw	low _IOCCF2_DefaultInterruptHandler
  6107  0698  0020               	movlb	0	; select bank0
  6108  0699  00A1               	movwf	IOCCF2_SetInterruptHandler@InterruptHandler
  6109  069A  300D               	movlw	high _IOCCF2_DefaultInterruptHandler
  6110  069B  00A2               	movwf	IOCCF2_SetInterruptHandler@InterruptHandler+1
  6111  069C  318D  2591  3186   	fcall	_IOCCF2_SetInterruptHandler
  6112                           
  6113                           ;pin_manager.c: 108: IOCCF3_SetInterruptHandler(IOCCF3_DefaultInterruptHandler);
  6114  069F  3003               	movlw	low _IOCCF3_DefaultInterruptHandler
  6115  06A0  0020               	movlb	0	; select bank0
  6116  06A1  00A1               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler
  6117  06A2  3000               	movlw	high _IOCCF3_DefaultInterruptHandler
  6118  06A3  00A2               	movwf	IOCCF3_SetInterruptHandler@InterruptHandler+1
  6119  06A4  318D  259A  3186   	fcall	_IOCCF3_SetInterruptHandler
  6120                           
  6121                           ;pin_manager.c: 111: INTCONbits.IOCIE = 1;
  6122  06A7  158B               	bsf	11,3	;volatile
  6123                           
  6124                           ;pin_manager.c: 114: bool state = GIE;
  6125  06A8  3000               	movlw	0
  6126  06A9  1B8B               	btfsc	11,7	;volatile
  6127  06AA  3001               	movlw	1
  6128  06AB  0020               	movlb	0	; select bank0
  6129  06AC  00A3               	movwf	PIN_MANAGER_Initialize@state
  6130                           
  6131                           ;pin_manager.c: 115: GIE = 0;
  6132  06AD  138B               	bcf	11,7	;volatile
  6133                           
  6134                           ;pin_manager.c: 116: PPSLOCK = 0x55;
  6135  06AE  3055               	movlw	85
  6136  06AF  003C               	movlb	28	; select bank28
  6137  06B0  008F               	movwf	15	;volsfr
  6138                           
  6139                           ;pin_manager.c: 117: PPSLOCK = 0xAA;
  6140  06B1  30AA               	movlw	170
  6141  06B2  008F               	movwf	15	;volsfr
  6142                           
  6143                           ;pin_manager.c: 118: PPSLOCKbits.PPSLOCKED = 0x00;
  6144  06B3  100F               	bcf	15,0	;volsfr
  6145                           
  6146                           ;pin_manager.c: 120: SSPCLKPPS = 0x0E;
  6147  06B4  300E               	movlw	14
  6148  06B5  00A0               	movwf	32	;volatile
  6149                           
  6150                           ;pin_manager.c: 121: SSPDATPPS = 0x0C;
  6151  06B6  300C               	movlw	12
  6152  06B7  00A1               	movwf	33	;volatile
  6153                           
  6154                           ;pin_manager.c: 122: RB6PPS = 0x10;
  6155  06B8  3010               	movlw	16
  6156  06B9  003D               	movlb	29	; select bank29
  6157  06BA  009E               	movwf	30	;volatile
  6158                           
  6159                           ;pin_manager.c: 123: RB4PPS = 0x11;
  6160  06BB  3011               	movlw	17
  6161  06BC  009C               	movwf	28	;volatile
  6162                           
  6163                           ;pin_manager.c: 125: PPSLOCK = 0x55;
  6164  06BD  3055               	movlw	85
  6165  06BE  003C               	movlb	28	; select bank28
  6166  06BF  008F               	movwf	15	;volsfr
  6167                           
  6168                           ;pin_manager.c: 126: PPSLOCK = 0xAA;
  6169  06C0  30AA               	movlw	170
  6170  06C1  008F               	movwf	15	;volsfr
  6171                           
  6172                           ;pin_manager.c: 127: PPSLOCKbits.PPSLOCKED = 0x01;
  6173  06C2  140F               	bsf	15,0	;volsfr
  6174                           
  6175                           ;pin_manager.c: 129: GIE = state;
  6176  06C3  0020               	movlb	0	; select bank0
  6177  06C4  1C23               	btfss	PIN_MANAGER_Initialize@state,0
  6178  06C5  2EC8               	goto	u2600
  6179  06C6  178B               	bsf	11,7	;volatile
  6180  06C7  0008               	return
  6181  06C8                     u2600:	
  6182  06C8  138B               	bcf	11,7	;volatile
  6183  06C9  0008               	return
  6184  06CA                     __end_of_PIN_MANAGER_Initialize:	
  6185                           
  6186                           	psect	text6
  6187  0D9A                     __ptext6:	
  6188 ;; *************** function _IOCCF3_SetInterruptHandler *****************
  6189 ;; Defined at:
  6190 ;;		line 197 in file "mcc_generated_files/pin_manager.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  InterruptHan    2    1[BANK0 ] PTR void 
  6193 ;;		 -> SetTurn(1), IOCCF3_DefaultInterruptHandler(1), 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6209 ;;Total ram usage:        2 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    5
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_PIN_MANAGER_Initialize
  6216 ;;		_main
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           
  6221                           ;psect for function _IOCCF3_SetInterruptHandler
  6222  0D9A                     _IOCCF3_SetInterruptHandler:	
  6223                           
  6224                           ;pin_manager.c: 198: IOCCF3_InterruptHandler = InterruptHandler;
  6225                           
  6226                           ;incstack = 0
  6227                           ; Regs used in _IOCCF3_SetInterruptHandler: [wreg]
  6228  0D9A  0020               	movlb	0	; select bank0
  6229  0D9B  0822               	movf	IOCCF3_SetInterruptHandler@InterruptHandler+1,w
  6230  0D9C  0021               	movlb	1	; select bank1
  6231  0D9D  00DF               	movwf	(_IOCCF3_InterruptHandler+1)^(0+128)
  6232  0D9E  0020               	movlb	0	; select bank0
  6233  0D9F  0821               	movf	IOCCF3_SetInterruptHandler@InterruptHandler,w
  6234  0DA0  0021               	movlb	1	; select bank1
  6235  0DA1  00DE               	movwf	_IOCCF3_InterruptHandler^(0+128)
  6236  0DA2  0008               	return
  6237  0DA3                     __end_of_IOCCF3_SetInterruptHandler:	
  6238                           
  6239                           	psect	text7
  6240  0D91                     __ptext7:	
  6241 ;; *************** function _IOCCF2_SetInterruptHandler *****************
  6242 ;; Defined at:
  6243 ;;		line 167 in file "mcc_generated_files/pin_manager.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;  InterruptHan    2    1[BANK0 ] PTR void 
  6246 ;;		 -> TapTime(1), IOCCF2_DefaultInterruptHandler(1), 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6258 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6262 ;;Total ram usage:        2 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; Hardware stack levels required when called:    5
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_PIN_MANAGER_Initialize
  6269 ;;		_main
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _IOCCF2_SetInterruptHandler
  6275  0D91                     _IOCCF2_SetInterruptHandler:	
  6276                           
  6277                           ;pin_manager.c: 168: IOCCF2_InterruptHandler = InterruptHandler;
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _IOCCF2_SetInterruptHandler: [wreg]
  6281  0D91  0020               	movlb	0	; select bank0
  6282  0D92  0822               	movf	IOCCF2_SetInterruptHandler@InterruptHandler+1,w
  6283  0D93  0021               	movlb	1	; select bank1
  6284  0D94  00E1               	movwf	(_IOCCF2_InterruptHandler+1)^(0+128)
  6285  0D95  0020               	movlb	0	; select bank0
  6286  0D96  0821               	movf	IOCCF2_SetInterruptHandler@InterruptHandler,w
  6287  0D97  0021               	movlb	1	; select bank1
  6288  0D98  00E0               	movwf	_IOCCF2_InterruptHandler^(0+128)
  6289  0D99  0008               	return
  6290  0D9A                     __end_of_IOCCF2_SetInterruptHandler:	
  6291                           
  6292                           	psect	text8
  6293  0D82                     __ptext8:	
  6294 ;; *************** function _OSCILLATOR_Initialize *****************
  6295 ;; Defined at:
  6296 ;;		line 85 in file "mcc_generated_files/mcc.c"
  6297 ;; Parameters:    Size  Location     Type
  6298 ;;		None
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;		None
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      void 
  6303 ;; Registers used:
  6304 ;;		wreg, status,2
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;Total ram usage:        0 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    5
  6317 ;; This function calls:
  6318 ;;		Nothing
  6319 ;; This function is called by:
  6320 ;;		_SYSTEM_Initialize
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _OSCILLATOR_Initialize
  6326  0D82                     _OSCILLATOR_Initialize:	
  6327                           
  6328                           ;mcc.c: 88: OSCCON = 0x78;
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6332  0D82  3078               	movlw	120
  6333  0D83  0021               	movlb	1	; select bank1
  6334  0D84  0099               	movwf	25	;volatile
  6335                           
  6336                           ;mcc.c: 90: OSCTUNE = 0x00;
  6337  0D85  0198               	clrf	24	;volatile
  6338  0D86                     l20:	
  6339                           ;mcc.c: 93: {
  6340                           
  6341                           ;mcc.c: 92: while(PLLR == 0)
  6342                           
  6343  0D86  1B1A               	btfsc	26,6	;volatile
  6344  0D87  0008               	return
  6345  0D88  2D86               	goto	l20
  6346  0D89                     __end_of_OSCILLATOR_Initialize:	
  6347                           
  6348                           	psect	text9
  6349  0E75                     __ptext9:	
  6350 ;; *************** function _I2C_Initialize *****************
  6351 ;; Defined at:
  6352 ;;		line 198 in file "mcc_generated_files/i2c.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;Total ram usage:        1 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    5
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_SYSTEM_Initialize
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           
  6381                           ;psect for function _I2C_Initialize
  6382  0E75                     _I2C_Initialize:	
  6383                           
  6384                           ;i2c.c: 200: i2c_object.pTrHead = i2c_tr_queue;
  6385                           
  6386                           ;incstack = 0
  6387                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  6388  0E75  30C2               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  6389  0E76  0020               	movlb	0	; select bank0
  6390  0E77  00A1               	movwf	??_I2C_Initialize
  6391  0E78  0821               	movf	??_I2C_Initialize,w
  6392  0E79  00CF               	movwf	low ((_i2c_object| 0+1))
  6393                           
  6394                           ;i2c.c: 201: i2c_object.pTrTail = i2c_tr_queue;
  6395  0E7A  30C2               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  6396  0E7B  00A1               	movwf	??_I2C_Initialize
  6397  0E7C  0821               	movf	??_I2C_Initialize,w
  6398  0E7D  00CE               	movwf	_i2c_object
  6399                           
  6400                           ;i2c.c: 202: i2c_object.trStatus.s.empty = 1;
  6401  0E7E  14D0               	bsf	_i2c_object+2,1
  6402                           
  6403                           ;i2c.c: 203: i2c_object.trStatus.s.full = 0;
  6404  0E7F  1050               	bcf	_i2c_object+2,0
  6405                           
  6406                           ;i2c.c: 205: i2c_object.i2cErrors = 0;
  6407  0E80  01D2               	clrf	_i2c_object+4
  6408                           
  6409                           ;i2c.c: 208: SSP1STAT = 0x80;
  6410  0E81  3080               	movlw	128
  6411  0E82  0024               	movlb	4	; select bank4
  6412  0E83  0094               	movwf	20	;volatile
  6413                           
  6414                           ;i2c.c: 210: SSP1CON1 = 0x28;
  6415  0E84  3028               	movlw	40
  6416  0E85  0095               	movwf	21	;volatile
  6417                           
  6418                           ;i2c.c: 212: SSP1CON3 = 0x00;
  6419  0E86  0197               	clrf	23	;volatile
  6420                           
  6421                           ;i2c.c: 214: SSP1ADD = 0x13;
  6422  0E87  3013               	movlw	19
  6423  0E88  0092               	movwf	18	;volatile
  6424                           
  6425                           ;i2c.c: 218: PIR1bits.SSP1IF = 0;
  6426  0E89  0020               	movlb	0	; select bank0
  6427  0E8A  1190               	bcf	16,3	;volatile
  6428                           
  6429                           ;i2c.c: 220: PIE1bits.SSP1IE = 1;
  6430  0E8B  0021               	movlb	1	; select bank1
  6431  0E8C  1590               	bsf	16,3	;volatile
  6432  0E8D  0008               	return
  6433  0E8E                     __end_of_I2C_Initialize:	
  6434                           
  6435                           	psect	text10
  6436  05A9                     __ptext10:	
  6437 ;; *************** function _LED_Row *****************
  6438 ;; Defined at:
  6439 ;;		line 18 in file "LEDArray.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;  row             1    wreg     unsigned char 
  6442 ;;  mask            2   24[BANK0 ] unsigned int 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  row             1   31[BANK0 ] unsigned char 
  6445 ;;  writeBuffer     3   28[BANK0 ] unsigned char [3]
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6455 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;Total ram usage:        8 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    8
  6462 ;; This function calls:
  6463 ;;		_I2CWrite
  6464 ;; This function is called by:
  6465 ;;		_main
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           
  6470                           ;psect for function _LED_Row
  6471  05A9                     _LED_Row:	
  6472                           
  6473                           ;incstack = 0
  6474                           ; Regs used in _LED_Row: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6475                           ;LED_Row@row stored from wreg
  6476  05A9  0020               	movlb	0	; select bank0
  6477  05AA  00BF               	movwf	LED_Row@row
  6478                           
  6479                           ;LEDArray.c: 20: uint8_t writeBuffer[3];
  6480                           ;LEDArray.c: 23: if(row != prevRow)
  6481  05AB  083F               	movf	LED_Row@row,w
  6482  05AC  0669               	xorwf	_prevRow,w
  6483  05AD  1903               	skipnz
  6484  05AE  2DC9               	goto	l3688
  6485                           
  6486                           ;LEDArray.c: 24: {
  6487                           ;LEDArray.c: 25: writeBuffer[0] = (prevRow>7?0x01:0x00);
  6488  05AF  3008               	movlw	8
  6489  05B0  0269               	subwf	_prevRow,w
  6490  05B1  1C03               	btfss	3,0
  6491  05B2  2DB5               	goto	u2720
  6492  05B3  3001               	movlw	1
  6493  05B4  2DB6               	goto	u2730
  6494  05B5                     u2720:	
  6495  05B5  3000               	movlw	0
  6496  05B6                     u2730:	
  6497  05B6  00BA               	movwf	??_LED_Row
  6498  05B7  083A               	movf	??_LED_Row,w
  6499  05B8  00BC               	movwf	LED_Row@writeBuffer
  6500                           
  6501                           ;LEDArray.c: 26: writeBuffer[1] = 0xFF;
  6502  05B9  30FF               	movlw	255
  6503  05BA  00BA               	movwf	??_LED_Row
  6504  05BB  083A               	movf	??_LED_Row,w
  6505  05BC  00BD               	movwf	LED_Row@writeBuffer+1
  6506                           
  6507                           ;LEDArray.c: 27: I2CWrite(writeBuffer, 2, 0b0100001);
  6508  05BD  3002               	movlw	2
  6509  05BE  00BA               	movwf	??_LED_Row
  6510  05BF  083A               	movf	??_LED_Row,w
  6511  05C0  00AF               	movwf	I2CWrite@length
  6512  05C1  3021               	movlw	33
  6513  05C2  00B0               	movwf	I2CWrite@address
  6514  05C3  3000               	movlw	0
  6515  05C4  00B1               	movwf	I2CWrite@address+1
  6516  05C5  303C               	movlw	(low (LED_Row@writeBuffer| 0))& (0+255)
  6517  05C6  318F  273A  3185   	fcall	_I2CWrite
  6518  05C9                     l3688:	
  6519                           
  6520                           ;LEDArray.c: 28: }
  6521                           ;LEDArray.c: 31: writeBuffer[0] = 0x00;
  6522  05C9  0020               	movlb	0	; select bank0
  6523  05CA  01BC               	clrf	LED_Row@writeBuffer
  6524                           
  6525                           ;LEDArray.c: 32: writeBuffer[1] = mask & 0xFF;
  6526  05CB  0838               	movf	LED_Row@mask,w
  6527  05CC  00BA               	movwf	??_LED_Row
  6528  05CD  083A               	movf	??_LED_Row,w
  6529  05CE  00BD               	movwf	LED_Row@writeBuffer+1
  6530                           
  6531                           ;LEDArray.c: 33: writeBuffer[2] = mask >> 8;
  6532  05CF  0839               	movf	LED_Row@mask+1,w
  6533  05D0  00BA               	movwf	??_LED_Row
  6534  05D1  083A               	movf	??_LED_Row,w
  6535  05D2  00BE               	movwf	LED_Row@writeBuffer+2
  6536                           
  6537                           ;LEDArray.c: 34: I2CWrite(writeBuffer, 3, 0b0100000);
  6538  05D3  3003               	movlw	3
  6539  05D4  00BA               	movwf	??_LED_Row
  6540  05D5  083A               	movf	??_LED_Row,w
  6541  05D6  00AF               	movwf	I2CWrite@length
  6542  05D7  3020               	movlw	32
  6543  05D8  00B0               	movwf	I2CWrite@address
  6544  05D9  3000               	movlw	0
  6545  05DA  00B1               	movwf	I2CWrite@address+1
  6546  05DB  303C               	movlw	(low (LED_Row@writeBuffer| 0))& (0+255)
  6547  05DC  318F  273A  3185   	fcall	_I2CWrite
  6548                           
  6549                           ;LEDArray.c: 36: if(row != prevRow)
  6550  05DF  0020               	movlb	0	; select bank0
  6551  05E0  083F               	movf	LED_Row@row,w
  6552  05E1  0669               	xorwf	_prevRow,w
  6553  05E2  1903               	skipnz
  6554  05E3  2E0E               	goto	l3708
  6555                           
  6556                           ;LEDArray.c: 37: {
  6557                           ;LEDArray.c: 38: if(row > 7)
  6558  05E4  3008               	movlw	8
  6559  05E5  023F               	subwf	LED_Row@row,w
  6560  05E6  1C03               	skipc
  6561  05E7  2DF4               	goto	l3702
  6562                           
  6563                           ;LEDArray.c: 39: {
  6564                           ;LEDArray.c: 40: writeBuffer[0] = 0x01;
  6565  05E8  01BC               	clrf	LED_Row@writeBuffer
  6566  05E9  0ABC               	incf	LED_Row@writeBuffer,f
  6567                           
  6568                           ;LEDArray.c: 41: writeBuffer[1] = 0xFF - (1 << (row-8));
  6569  05EA  3001               	movlw	1
  6570  05EB  00BA               	movwf	??_LED_Row
  6571  05EC  083F               	movf	LED_Row@row,w
  6572  05ED  3EF8               	addlw	-8
  6573  05EE  0A89               	incf	9,f
  6574  05EF  2DF1               	goto	u2764
  6575  05F0                     u2765:	
  6576  05F0  35BA               	lslf	??_LED_Row,f
  6577  05F1                     u2764:	
  6578  05F1  0B89               	decfsz	9,f
  6579  05F2  2DF0               	goto	u2765
  6580  05F3  2DFC               	goto	L10
  6581  05F4                     l3702:	
  6582                           ;LEDArray.c: 42: }
  6583                           
  6584                           
  6585                           ;LEDArray.c: 43: else
  6586                           ;LEDArray.c: 44: {
  6587                           ;LEDArray.c: 45: writeBuffer[0] = 0x00;
  6588  05F4  01BC               	clrf	LED_Row@writeBuffer
  6589                           
  6590                           ;LEDArray.c: 46: writeBuffer[1] = 0xFF - (1 << row);
  6591  05F5  3001               	movlw	1
  6592  05F6  00BA               	movwf	??_LED_Row
  6593  05F7  0A3F               	incf	LED_Row@row,w
  6594  05F8  2DFA               	goto	u2774
  6595  05F9                     u2775:	
  6596  05F9  35BA               	lslf	??_LED_Row,f
  6597  05FA                     u2774:	
  6598  05FA  0B89               	decfsz	9,f
  6599  05FB  2DF9               	goto	u2775
  6600  05FC                     L10:	
  6601  05FC  083A               	movf	??_LED_Row,w
  6602  05FD  3AFF               	xorlw	255
  6603  05FE  3E01               	addlw	1
  6604  05FF  3EFF               	addlw	255
  6605  0600  00BB               	movwf	??_LED_Row+1
  6606  0601  083B               	movf	??_LED_Row+1,w
  6607  0602  00BD               	movwf	LED_Row@writeBuffer+1
  6608                           
  6609                           ;LEDArray.c: 47: }
  6610                           ;LEDArray.c: 48: I2CWrite(writeBuffer, 2, 0b0100001);
  6611  0603  3002               	movlw	2
  6612  0604  00BA               	movwf	??_LED_Row
  6613  0605  083A               	movf	??_LED_Row,w
  6614  0606  00AF               	movwf	I2CWrite@length
  6615  0607  3021               	movlw	33
  6616  0608  00B0               	movwf	I2CWrite@address
  6617  0609  3000               	movlw	0
  6618  060A  00B1               	movwf	I2CWrite@address+1
  6619  060B  303C               	movlw	(low (LED_Row@writeBuffer| 0))& (0+255)
  6620  060C  318F  273A         	fcall	_I2CWrite
  6621  060E                     l3708:	
  6622                           
  6623                           ;LEDArray.c: 49: }
  6624                           ;LEDArray.c: 51: prevRow = row;
  6625  060E  0020               	movlb	0	; select bank0
  6626  060F  083F               	movf	LED_Row@row,w
  6627  0610  00BA               	movwf	??_LED_Row
  6628  0611  083A               	movf	??_LED_Row,w
  6629  0612  00E9               	movwf	_prevRow
  6630  0613  0008               	return
  6631  0614                     __end_of_LED_Row:	
  6632                           
  6633                           	psect	text11
  6634  079B                     __ptext11:	
  6635 ;; *************** function _LED_Initialize *****************
  6636 ;; Defined at:
  6637 ;;		line 55 in file "LEDArray.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;  writeBuffer     3   26[BANK0 ] unsigned char [3]
  6642 ;;  status          1   25[BANK0 ] enum E12012
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6656 ;;Total ram usage:        5 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    8
  6659 ;; This function calls:
  6660 ;;		_I2CWrite
  6661 ;; This function is called by:
  6662 ;;		_main
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           
  6667                           ;psect for function _LED_Initialize
  6668  079B                     _LED_Initialize:	
  6669                           
  6670                           ;LEDArray.c: 57: uint8_t writeBuffer[3];
  6671                           ;LEDArray.c: 58: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  6672                           
  6673                           ;incstack = 0
  6674                           ; Regs used in _LED_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6675  079B  3002               	movlw	2
  6676  079C  0020               	movlb	0	; select bank0
  6677  079D  00B8               	movwf	??_LED_Initialize
  6678  079E  0838               	movf	??_LED_Initialize,w
  6679  079F  00B9               	movwf	LED_Initialize@status
  6680                           
  6681                           ;LEDArray.c: 60: writeBuffer[0] = 0x00;
  6682  07A0  01BA               	clrf	LED_Initialize@writeBuffer
  6683                           
  6684                           ;LEDArray.c: 61: writeBuffer[1] = 0xFF;
  6685  07A1  30FF               	movlw	255
  6686  07A2  00B8               	movwf	??_LED_Initialize
  6687  07A3  0838               	movf	??_LED_Initialize,w
  6688  07A4  00BB               	movwf	LED_Initialize@writeBuffer+1
  6689                           
  6690                           ;LEDArray.c: 62: writeBuffer[2] = 0xFF;
  6691  07A5  30FF               	movlw	255
  6692  07A6  00B8               	movwf	??_LED_Initialize
  6693  07A7  0838               	movf	??_LED_Initialize,w
  6694  07A8  00BC               	movwf	LED_Initialize@writeBuffer+2
  6695                           
  6696                           ;LEDArray.c: 63: I2CWrite(writeBuffer, 3, 0b0100001);
  6697  07A9  3003               	movlw	3
  6698  07AA  00B8               	movwf	??_LED_Initialize
  6699  07AB  0838               	movf	??_LED_Initialize,w
  6700  07AC  00AF               	movwf	I2CWrite@length
  6701  07AD  3021               	movlw	33
  6702  07AE  00B0               	movwf	I2CWrite@address
  6703  07AF  3000               	movlw	0
  6704  07B0  00B1               	movwf	I2CWrite@address+1
  6705  07B1  303A               	movlw	(low (LED_Initialize@writeBuffer| 0))& (0+255)
  6706  07B2  318F  273A  3187   	fcall	_I2CWrite
  6707                           
  6708                           ;LEDArray.c: 64: I2CWrite(writeBuffer, 3, 0b0100000);
  6709  07B5  3003               	movlw	3
  6710  07B6  0020               	movlb	0	; select bank0
  6711  07B7  00B8               	movwf	??_LED_Initialize
  6712  07B8  0838               	movf	??_LED_Initialize,w
  6713  07B9  00AF               	movwf	I2CWrite@length
  6714  07BA  3020               	movlw	32
  6715  07BB  00B0               	movwf	I2CWrite@address
  6716  07BC  3000               	movlw	0
  6717  07BD  00B1               	movwf	I2CWrite@address+1
  6718  07BE  303A               	movlw	(low (LED_Initialize@writeBuffer| 0))& (0+255)
  6719  07BF  318F  273A  3187   	fcall	_I2CWrite
  6720                           
  6721                           ;LEDArray.c: 66: writeBuffer[0] = 0x14;
  6722  07C2  3014               	movlw	20
  6723  07C3  0020               	movlb	0	; select bank0
  6724  07C4  00B8               	movwf	??_LED_Initialize
  6725  07C5  0838               	movf	??_LED_Initialize,w
  6726  07C6  00BA               	movwf	LED_Initialize@writeBuffer
  6727                           
  6728                           ;LEDArray.c: 67: I2CWrite(writeBuffer, 3, 0b0100000);
  6729  07C7  3003               	movlw	3
  6730  07C8  00B8               	movwf	??_LED_Initialize
  6731  07C9  0838               	movf	??_LED_Initialize,w
  6732  07CA  00AF               	movwf	I2CWrite@length
  6733  07CB  3020               	movlw	32
  6734  07CC  00B0               	movwf	I2CWrite@address
  6735  07CD  3000               	movlw	0
  6736  07CE  00B1               	movwf	I2CWrite@address+1
  6737  07CF  303A               	movlw	(low (LED_Initialize@writeBuffer| 0))& (0+255)
  6738  07D0  318F  273A         	fcall	_I2CWrite
  6739  07D2  0008               	return
  6740  07D3                     __end_of_LED_Initialize:	
  6741                           
  6742                           	psect	text12
  6743  0EFB                     __ptext12:	
  6744 ;; *************** function _Clock_Write *****************
  6745 ;; Defined at:
  6746 ;;		line 93 in file "clock.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  writeBuffer     4   26[BANK0 ] unsigned char [4]
  6751 ;;  status          1   25[BANK0 ] enum E12012
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1    wreg      void 
  6754 ;; Registers used:
  6755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;Total ram usage:        6 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    8
  6768 ;; This function calls:
  6769 ;;		_I2CWrite
  6770 ;; This function is called by:
  6771 ;;		_main
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           
  6776                           ;psect for function _Clock_Write
  6777  0EFB                     _Clock_Write:	
  6778                           
  6779                           ;clock.c: 95: uint8_t writeBuffer[4];
  6780                           ;clock.c: 96: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in _Clock_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6784  0EFB  3002               	movlw	2
  6785  0EFC  0020               	movlb	0	; select bank0
  6786  0EFD  00B8               	movwf	??_Clock_Write
  6787  0EFE  0838               	movf	??_Clock_Write,w
  6788  0EFF  00B9               	movwf	Clock_Write@status
  6789                           
  6790                           ;clock.c: 98: writeBuffer[0] = 0x00;
  6791  0F00  01BA               	clrf	Clock_Write@writeBuffer
  6792                           
  6793                           ;clock.c: 99: writeBuffer[1] = 0x80;
  6794  0F01  3080               	movlw	128
  6795  0F02  00B8               	movwf	??_Clock_Write
  6796  0F03  0838               	movf	??_Clock_Write,w
  6797  0F04  00BB               	movwf	Clock_Write@writeBuffer+1
  6798                           
  6799                           ;clock.c: 100: writeBuffer[2] = min;
  6800  0F05  0855               	movf	_min,w
  6801  0F06  00B8               	movwf	??_Clock_Write
  6802  0F07  0838               	movf	??_Clock_Write,w
  6803  0F08  00BC               	movwf	Clock_Write@writeBuffer+2
  6804                           
  6805                           ;clock.c: 101: writeBuffer[3] = (hour | 0x40);
  6806  0F09  0868               	movf	_hour,w
  6807  0F0A  3840               	iorlw	64
  6808  0F0B  00B8               	movwf	??_Clock_Write
  6809  0F0C  0838               	movf	??_Clock_Write,w
  6810  0F0D  00BD               	movwf	Clock_Write@writeBuffer+3
  6811                           
  6812                           ;clock.c: 102: I2CWrite(writeBuffer, 4, 0b1101111);
  6813  0F0E  3004               	movlw	4
  6814  0F0F  00B8               	movwf	??_Clock_Write
  6815  0F10  0838               	movf	??_Clock_Write,w
  6816  0F11  00AF               	movwf	I2CWrite@length
  6817  0F12  306F               	movlw	111
  6818  0F13  00B0               	movwf	I2CWrite@address
  6819  0F14  3000               	movlw	0
  6820  0F15  00B1               	movwf	I2CWrite@address+1
  6821  0F16  303A               	movlw	(low (Clock_Write@writeBuffer| 0))& (0+255)
  6822  0F17  318F  273A         	fcall	_I2CWrite
  6823  0F19  0008               	return
  6824  0F1A                     __end_of_Clock_Write:	
  6825                           
  6826                           	psect	text13
  6827  06CA                     __ptext13:	
  6828 ;; *************** function _Clock_Initialize *****************
  6829 ;; Defined at:
  6830 ;;		line 39 in file "clock.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  start           1    wreg     unsigned char 
  6833 ;; Auto vars:     Size  Location     Type
  6834 ;;  start           1   31[BANK0 ] unsigned char 
  6835 ;;  writeBuffer     5   32[BANK0 ] unsigned char [5]
  6836 ;;  status          1   30[BANK0 ] enum E12012
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  1    wreg      void 
  6839 ;; Registers used:
  6840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6849 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6850 ;;Total ram usage:        8 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    8
  6853 ;; This function calls:
  6854 ;;		_Clock_Read
  6855 ;;		_Delay
  6856 ;;		_I2CWrite
  6857 ;; This function is called by:
  6858 ;;		_main
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           
  6863                           ;psect for function _Clock_Initialize
  6864  06CA                     _Clock_Initialize:	
  6865                           
  6866                           ;incstack = 0
  6867                           ; Regs used in _Clock_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6868                           ;Clock_Initialize@start stored from wreg
  6869  06CA  0020               	movlb	0	; select bank0
  6870  06CB  00BF               	movwf	Clock_Initialize@start
  6871                           
  6872                           ;clock.c: 41: uint8_t writeBuffer[5];
  6873                           ;clock.c: 42: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  6874  06CC  3002               	movlw	2
  6875  06CD  00BD               	movwf	??_Clock_Initialize
  6876  06CE  083D               	movf	??_Clock_Initialize,w
  6877  06CF  00BE               	movwf	Clock_Initialize@status
  6878                           
  6879                           ;clock.c: 44: if(start)
  6880  06D0  083F               	movf	Clock_Initialize@start,w
  6881  06D1  1903               	btfsc	3,2
  6882  06D2  2ED6               	goto	l3716
  6883                           
  6884                           ;clock.c: 45: Clock_Read();
  6885  06D3  318E  26DC  3186   	fcall	_Clock_Read
  6886  06D6                     l3716:	
  6887                           
  6888                           ;clock.c: 47: writeBuffer[0] = 0x00;
  6889  06D6  0020               	movlb	0	; select bank0
  6890  06D7  01C0               	clrf	Clock_Initialize@writeBuffer
  6891                           
  6892                           ;clock.c: 48: if(start)
  6893  06D8  083F               	movf	Clock_Initialize@start,w
  6894  06D9  1903               	btfsc	3,2
  6895  06DA  2EE0               	goto	l3722
  6896                           
  6897                           ;clock.c: 49: writeBuffer[1] = 0x80;
  6898  06DB  3080               	movlw	128
  6899  06DC  00BD               	movwf	??_Clock_Initialize
  6900  06DD  083D               	movf	??_Clock_Initialize,w
  6901  06DE  00C1               	movwf	Clock_Initialize@writeBuffer+1
  6902  06DF  2EE1               	goto	l3724
  6903  06E0                     l3722:	
  6904                           
  6905                           ;clock.c: 50: else
  6906                           ;clock.c: 51: writeBuffer[1] = 0x00;
  6907  06E0  01C1               	clrf	Clock_Initialize@writeBuffer+1
  6908  06E1                     l3724:	
  6909                           
  6910                           ;clock.c: 52: writeBuffer[2] = min;
  6911  06E1  0855               	movf	_min,w
  6912  06E2  00BD               	movwf	??_Clock_Initialize
  6913  06E3  083D               	movf	??_Clock_Initialize,w
  6914  06E4  00C2               	movwf	Clock_Initialize@writeBuffer+2
  6915                           
  6916                           ;clock.c: 53: writeBuffer[3] = (0x40 | hour);
  6917  06E5  0868               	movf	_hour,w
  6918  06E6  3840               	iorlw	64
  6919  06E7  00BD               	movwf	??_Clock_Initialize
  6920  06E8  083D               	movf	??_Clock_Initialize,w
  6921  06E9  00C3               	movwf	Clock_Initialize@writeBuffer+3
  6922                           
  6923                           ;clock.c: 54: writeBuffer[4] = 0x08;
  6924  06EA  3008               	movlw	8
  6925  06EB  00BD               	movwf	??_Clock_Initialize
  6926  06EC  083D               	movf	??_Clock_Initialize,w
  6927  06ED  00C4               	movwf	Clock_Initialize@writeBuffer+4
  6928                           
  6929                           ;clock.c: 55: I2CWrite(writeBuffer, 5, 0b1101111);
  6930  06EE  3005               	movlw	5
  6931  06EF  00BD               	movwf	??_Clock_Initialize
  6932  06F0  083D               	movf	??_Clock_Initialize,w
  6933  06F1  00AF               	movwf	I2CWrite@length
  6934  06F2  306F               	movlw	111
  6935  06F3  00B0               	movwf	I2CWrite@address
  6936  06F4  3000               	movlw	0
  6937  06F5  00B1               	movwf	I2CWrite@address+1
  6938  06F6  3040               	movlw	(low (Clock_Initialize@writeBuffer| 0))& (0+255)
  6939  06F7  318F  273A  3186   	fcall	_I2CWrite
  6940                           
  6941                           ;clock.c: 57: Delay(0x10);
  6942  06FA  3010               	movlw	16
  6943  06FB  318E  2646  3186   	fcall	_Delay
  6944                           
  6945                           ;clock.c: 59: writeBuffer[0] = 0x07;
  6946  06FE  3007               	movlw	7
  6947  06FF  0020               	movlb	0	; select bank0
  6948  0700  00BD               	movwf	??_Clock_Initialize
  6949  0701  083D               	movf	??_Clock_Initialize,w
  6950  0702  00C0               	movwf	Clock_Initialize@writeBuffer
  6951                           
  6952                           ;clock.c: 61: writeBuffer[1] = 0x03;
  6953  0703  3003               	movlw	3
  6954  0704  00BD               	movwf	??_Clock_Initialize
  6955  0705  083D               	movf	??_Clock_Initialize,w
  6956  0706  00C1               	movwf	Clock_Initialize@writeBuffer+1
  6957                           
  6958                           ;clock.c: 62: I2CWrite(writeBuffer, 2, 0b1101111);
  6959  0707  3002               	movlw	2
  6960  0708  00BD               	movwf	??_Clock_Initialize
  6961  0709  083D               	movf	??_Clock_Initialize,w
  6962  070A  00AF               	movwf	I2CWrite@length
  6963  070B  306F               	movlw	111
  6964  070C  00B0               	movwf	I2CWrite@address
  6965  070D  3000               	movlw	0
  6966  070E  00B1               	movwf	I2CWrite@address+1
  6967  070F  3040               	movlw	(low (Clock_Initialize@writeBuffer| 0))& (0+255)
  6968  0710  318F  273A         	fcall	_I2CWrite
  6969  0712  0008               	return
  6970  0713                     __end_of_Clock_Initialize:	
  6971                           
  6972                           	psect	text14
  6973  0E46                     __ptext14:	
  6974 ;; *************** function _Delay *****************
  6975 ;; Defined at:
  6976 ;;		line 11 in file "lib.c"
  6977 ;; Parameters:    Size  Location     Type
  6978 ;;  length          1    wreg     unsigned char 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  length          1    2[BANK0 ] unsigned char 
  6981 ;;  i               1    3[BANK0 ] unsigned char 
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      void 
  6984 ;; Registers used:
  6985 ;;		wreg, status,2, status,0
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;Total ram usage:        3 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    5
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_main
  7002 ;;		_Clock_Initialize
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _Delay
  7008  0E46                     _Delay:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _Delay: [wreg+status,2+status,0]
  7012                           ;Delay@length stored from wreg
  7013  0E46  0020               	movlb	0	; select bank0
  7014  0E47  00A2               	movwf	Delay@length
  7015                           
  7016                           ;lib.c: 12: uint8_t i = 0;
  7017  0E48  01A3               	clrf	Delay@i
  7018                           
  7019                           ;lib.c: 13: for (i = 0; i < length; i++)
  7020  0E49  01A3               	clrf	Delay@i
  7021  0E4A                     l3628:	
  7022  0E4A  0822               	movf	Delay@length,w
  7023  0E4B  0223               	subwf	Delay@i,w
  7024  0E4C  1803               	btfsc	3,0
  7025  0E4D  0008               	return
  7026                           
  7027                           ;lib.c: 14: _delay((unsigned long)((10)*(32000000/4000.0)));
  7028  0E4E  3068               	movlw	104
  7029  0E4F  0020               	movlb	0	; select bank0
  7030  0E50  00A1               	movwf	??_Delay
  7031  0E51  30E4               	movlw	228
  7032  0E52                     u2937:	
  7033  0E52  0B89               	decfsz	9,f
  7034  0E53  2E52               	goto	u2937
  7035  0E54  0BA1               	decfsz	??_Delay,f
  7036  0E55  2E52               	goto	u2937
  7037  0E56  0000               	nop
  7038  0E57  3001               	movlw	1
  7039  0E58  0020               	movlb	0	; select bank0
  7040  0E59  00A1               	movwf	??_Delay
  7041  0E5A  0821               	movf	??_Delay,w
  7042  0E5B  07A3               	addwf	Delay@i,f
  7043  0E5C  2E4A               	goto	l3628
  7044  0E5D                     __end_of_Delay:	
  7045                           
  7046                           	psect	text15
  7047  0E31                     __ptext15:	
  7048 ;; *************** function _Acc_ProcessClickSrc *****************
  7049 ;; Defined at:
  7050 ;;		line 51 in file "accelerometer.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  hours           1    wreg     unsigned char 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;  hours           1   43[BANK0 ] unsigned char 
  7055 ;;  dataBuffer      6   37[BANK0 ] unsigned char [6]
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;Total ram usage:        8 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:   10
  7072 ;; This function calls:
  7073 ;;		_Clock_Tap
  7074 ;;		_I2CRead
  7075 ;; This function is called by:
  7076 ;;		_main
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           
  7081                           ;psect for function _Acc_ProcessClickSrc
  7082  0E31                     _Acc_ProcessClickSrc:	
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _Acc_ProcessClickSrc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7086                           ;Acc_ProcessClickSrc@hours stored from wreg
  7087  0E31  0020               	movlb	0	; select bank0
  7088  0E32  00CB               	movwf	Acc_ProcessClickSrc@hours
  7089                           
  7090                           ;accelerometer.c: 53: uint8_t dataBuffer[6];
  7091                           ;accelerometer.c: 54: I2CRead(dataBuffer, 0x39, 1, 0b0011000);
  7092  0E33  3039               	movlw	57
  7093  0E34  00C4               	movwf	??_Acc_ProcessClickSrc
  7094  0E35  0844               	movf	??_Acc_ProcessClickSrc,w
  7095  0E36  00A8               	movwf	I2CRead@registerAddress
  7096  0E37  01A9               	clrf	I2CRead@length
  7097  0E38  0AA9               	incf	I2CRead@length,f
  7098  0E39  3018               	movlw	24
  7099  0E3A  00AA               	movwf	I2CRead@address
  7100  0E3B  3000               	movlw	0
  7101  0E3C  00AB               	movwf	I2CRead@address+1
  7102  0E3D  3045               	movlw	(low (Acc_ProcessClickSrc@dataBuffer| 0))& (0+255)
  7103  0E3E  3187  2758  318E   	fcall	_I2CRead
  7104                           
  7105                           ;accelerometer.c: 57: Clock_Tap(hours);
  7106  0E41  0020               	movlb	0	; select bank0
  7107  0E42  084B               	movf	Acc_ProcessClickSrc@hours,w
  7108  0E43  318F  27D7         	fcall	_Clock_Tap
  7109  0E45  0008               	return
  7110  0E46                     __end_of_Acc_ProcessClickSrc:	
  7111                           
  7112                           	psect	text16
  7113  0FD7                     __ptext16:	
  7114 ;; *************** function _Clock_Tap *****************
  7115 ;; Defined at:
  7116 ;;		line 76 in file "clock.c"
  7117 ;; Parameters:    Size  Location     Type
  7118 ;;  hours           1    wreg     unsigned char 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  hours           1   35[BANK0 ] unsigned char 
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  1    wreg      void 
  7123 ;; Registers used:
  7124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;Total ram usage:        2 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    9
  7137 ;; This function calls:
  7138 ;;		_Clock_Display
  7139 ;;		_IncHour
  7140 ;; This function is called by:
  7141 ;;		_Acc_ProcessClickSrc
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           
  7146                           ;psect for function _Clock_Tap
  7147  0FD7                     _Clock_Tap:	
  7148                           
  7149                           ;incstack = 0
  7150                           ; Regs used in _Clock_Tap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7151                           ;Clock_Tap@hours stored from wreg
  7152  0FD7  0020               	movlb	0	; select bank0
  7153  0FD8  00C3               	movwf	Clock_Tap@hours
  7154                           
  7155                           ;clock.c: 78: if(hours)
  7156  0FD9  0843               	movf	Clock_Tap@hours,w
  7157  0FDA  1903               	btfsc	3,2
  7158  0FDB  2FE5               	goto	l3652
  7159                           
  7160                           ;clock.c: 79: hour = IncHour(hour);
  7161  0FDC  0868               	movf	_hour,w
  7162  0FDD  318E  260B  318F   	fcall	_IncHour
  7163  0FE0  0020               	movlb	0	; select bank0
  7164  0FE1  00C2               	movwf	??_Clock_Tap
  7165  0FE2  0842               	movf	??_Clock_Tap,w
  7166  0FE3  00E8               	movwf	_hour
  7167  0FE4  2FFC               	goto	l3662
  7168  0FE5                     l3652:	
  7169                           
  7170                           ;clock.c: 80: else
  7171                           ;clock.c: 81: {
  7172                           ;clock.c: 82: if(min >= 0x55)
  7173  0FE5  3055               	movlw	85
  7174  0FE6  0255               	subwf	_min,w
  7175  0FE7  1C03               	skipc
  7176  0FE8  2FEB               	goto	l3656
  7177                           
  7178                           ;clock.c: 83: min = 0x00;
  7179  0FE9  01D5               	clrf	_min
  7180  0FEA  2FFC               	goto	l3662
  7181  0FEB                     l3656:	
  7182                           
  7183                           ;clock.c: 84: else if((min & 0xf) >= 0x5)
  7184  0FEB  300F               	movlw	15
  7185  0FEC  0555               	andwf	_min,w
  7186  0FED  00C2               	movwf	??_Clock_Tap
  7187  0FEE  3005               	movlw	5
  7188  0FEF  0242               	subwf	??_Clock_Tap,w
  7189  0FF0  1C03               	skipc
  7190  0FF1  2FF6               	goto	l3660
  7191                           
  7192                           ;clock.c: 85: min = ((min & 0xf0) + 0x10);
  7193  0FF2  0855               	movf	_min,w
  7194  0FF3  39F0               	andlw	240
  7195  0FF4  3E10               	addlw	16
  7196  0FF5  2FF9               	goto	L11
  7197  0FF6                     l3660:	
  7198                           
  7199                           ;clock.c: 86: else
  7200                           ;clock.c: 87: min = ((min & 0xf0) + 0x05);
  7201  0FF6  0855               	movf	_min,w
  7202  0FF7  39F0               	andlw	240
  7203  0FF8  3E05               	addlw	5
  7204  0FF9                     L11:	
  7205  0FF9  00C2               	movwf	??_Clock_Tap
  7206  0FFA  0842               	movf	??_Clock_Tap,w
  7207  0FFB  00D5               	movwf	_min
  7208  0FFC                     l3662:	
  7209                           
  7210                           ;clock.c: 88: }
  7211                           ;clock.c: 90: Clock_Display(0);
  7212  0FFC  3000               	movlw	0
  7213  0FFD  3180  2070         	fcall	_Clock_Display
  7214  0FFF  0008               	return
  7215  1000                     __end_of_Clock_Tap:	
  7216                           
  7217                           	psect	text17
  7218  0070                     __ptext17:	
  7219 ;; *************** function _Clock_Display *****************
  7220 ;; Defined at:
  7221 ;;		line 115 in file "clock.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  fetchTime       1    wreg     unsigned char 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  fetchTime       1   30[BANK0 ] unsigned char 
  7226 ;;  row             1   33[BANK0 ] PTR char 
  7227 ;;		 -> DISPLAYBANK_row(11), 
  7228 ;;  col             1   32[BANK0 ] PTR unsigned int 
  7229 ;;		 -> DISPLAYBANK_col(20), 
  7230 ;;  hourDisplay     1   31[BANK0 ] unsigned char 
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      void 
  7233 ;; Registers used:
  7234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        5 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    8
  7247 ;; This function calls:
  7248 ;;		_Clock_Read
  7249 ;;		_IncHour
  7250 ;; This function is called by:
  7251 ;;		_main
  7252 ;;		_Clock_Tap
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           
  7257                           ;psect for function _Clock_Display
  7258  0070                     _Clock_Display:	
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in _Clock_Display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7262                           ;Clock_Display@fetchTime stored from wreg
  7263  0070  0020               	movlb	0	; select bank0
  7264  0071  00BE               	movwf	Clock_Display@fetchTime
  7265                           
  7266                           ;clock.c: 117: if(fetchTime)
  7267  0072  083E               	movf	Clock_Display@fetchTime,w
  7268  0073  1903               	btfsc	3,2
  7269  0074  2878               	goto	l3258
  7270                           
  7271                           ;clock.c: 118: Clock_Read();
  7272  0075  318E  26DC  3180   	fcall	_Clock_Read
  7273  0078                     l3258:	
  7274                           
  7275                           ;clock.c: 120: int8_t* row = DISPLAYBANK_row;
  7276  0078  30D3               	movlw	(low (_DISPLAYBANK_row| 0))& (0+255)
  7277  0079  0020               	movlb	0	; select bank0
  7278  007A  00BD               	movwf	??_Clock_Display
  7279  007B  083D               	movf	??_Clock_Display,w
  7280  007C  00C1               	movwf	Clock_Display@row
  7281                           
  7282                           ;clock.c: 121: uint16_t* col = DISPLAYBANK_col;
  7283  007D  30A6               	movlw	(low (_DISPLAYBANK_col| 0))& (0+255)
  7284  007E  00BD               	movwf	??_Clock_Display
  7285  007F  083D               	movf	??_Clock_Display,w
  7286  0080  00C0               	movwf	Clock_Display@col
  7287                           
  7288                           ;clock.c: 123: *(row++) = 0;
  7289  0081  0841               	movf	Clock_Display@row,w
  7290  0082  0086               	movwf	6
  7291  0083  0187               	clrf	7
  7292  0084  0181               	clrf	1
  7293  0085  3001               	movlw	1
  7294  0086  00BD               	movwf	??_Clock_Display
  7295  0087  083D               	movf	??_Clock_Display,w
  7296  0088  07C1               	addwf	Clock_Display@row,f
  7297                           
  7298                           ;clock.c: 124: *(col++) = 0x7E4;
  7299  0089  0840               	movf	Clock_Display@col,w
  7300  008A  0086               	movwf	6
  7301  008B  0187               	clrf	7
  7302  008C  30E4               	movlw	228
  7303  008D  3FC0               	movwi [0]fsr1
  7304  008E  3007               	movlw	7
  7305  008F  3FC1               	movwi [1]fsr1
  7306  0090  3002               	movlw	2
  7307  0091  00BD               	movwf	??_Clock_Display
  7308  0092  083D               	movf	??_Clock_Display,w
  7309  0093  07C0               	addwf	Clock_Display@col,f
  7310                           
  7311                           ;clock.c: 126: uint8_t hourDisplay = hour;
  7312  0094  0868               	movf	_hour,w
  7313  0095  00BD               	movwf	??_Clock_Display
  7314  0096  083D               	movf	??_Clock_Display,w
  7315  0097  00BF               	movwf	Clock_Display@hourDisplay
  7316                           
  7317                           ;clock.c: 128: if(min >= 0x05)
  7318  0098  3005               	movlw	5
  7319  0099  0255               	subwf	_min,w
  7320  009A  1C03               	skipc
  7321  009B  29AA               	goto	l3386
  7322                           
  7323                           ;clock.c: 129: {
  7324                           ;clock.c: 130: if(min < 0x10 || min >= 0x55)
  7325  009C  3010               	movlw	16
  7326  009D  0255               	subwf	_min,w
  7327  009E  1C03               	skipc
  7328  009F  28A4               	goto	l3278
  7329  00A0  3055               	movlw	85
  7330  00A1  0255               	subwf	_min,w
  7331  00A2  1C03               	skipc
  7332  00A3  28B7               	goto	l3286
  7333  00A4                     l3278:	
  7334                           
  7335                           ;clock.c: 131: {
  7336                           ;clock.c: 132: *(row++) = 2;
  7337  00A4  3002               	movlw	2
  7338  00A5  00BD               	movwf	??_Clock_Display
  7339  00A6  0841               	movf	Clock_Display@row,w
  7340  00A7  0086               	movwf	6
  7341  00A8  0187               	clrf	7
  7342  00A9  083D               	movf	??_Clock_Display,w
  7343  00AA  0081               	movwf	1
  7344  00AB  3001               	movlw	1
  7345  00AC  00BD               	movwf	??_Clock_Display
  7346  00AD  083D               	movf	??_Clock_Display,w
  7347  00AE  07C1               	addwf	Clock_Display@row,f
  7348                           
  7349                           ;clock.c: 133: *(col++) = 0x43F;
  7350  00AF  0840               	movf	Clock_Display@col,w
  7351  00B0  0086               	movwf	6
  7352  00B1  0187               	clrf	7
  7353  00B2  303F               	movlw	63
  7354  00B3  3FC0               	movwi [0]fsr1
  7355  00B4  3004               	movlw	4
  7356  00B5  3FC1               	movwi [1]fsr1
  7357  00B6  294A               	goto	l3350
  7358  00B7                     l3286:	
  7359                           ;clock.c: 134: }
  7360                           
  7361                           
  7362                           ;clock.c: 135: else if(min < 0x15 || min >= 0x50)
  7363  00B7  3015               	movlw	21
  7364  00B8  0255               	subwf	_min,w
  7365  00B9  1C03               	skipc
  7366  00BA  28BF               	goto	l3290
  7367  00BB  3050               	movlw	80
  7368  00BC  0255               	subwf	_min,w
  7369  00BD  1C03               	skipc
  7370  00BE  28E9               	goto	l3308
  7371  00BF                     l3290:	
  7372                           
  7373                           ;clock.c: 136: {
  7374                           ;clock.c: 137: if(min >= 0x50)
  7375  00BF  3050               	movlw	80
  7376  00C0  0255               	subwf	_min,w
  7377  00C1  1C03               	skipc
  7378  00C2  28D6               	goto	l3300
  7379                           
  7380                           ;clock.c: 138: {
  7381                           ;clock.c: 139: *(row++) = 3;
  7382  00C3  3003               	movlw	3
  7383  00C4  00BD               	movwf	??_Clock_Display
  7384  00C5  0841               	movf	Clock_Display@row,w
  7385  00C6  0086               	movwf	6
  7386  00C7  0187               	clrf	7
  7387  00C8  083D               	movf	??_Clock_Display,w
  7388  00C9  0081               	movwf	1
  7389  00CA  3001               	movlw	1
  7390  00CB  00BD               	movwf	??_Clock_Display
  7391  00CC  083D               	movf	??_Clock_Display,w
  7392  00CD  07C1               	addwf	Clock_Display@row,f
  7393                           
  7394                           ;clock.c: 140: *(col++) = 0x11F;
  7395  00CE  0840               	movf	Clock_Display@col,w
  7396  00CF  0086               	movwf	6
  7397  00D0  0187               	clrf	7
  7398  00D1  301F               	movlw	31
  7399  00D2  3FC0               	movwi [0]fsr1
  7400  00D3  3001               	movlw	1
  7401  00D4  3FC1               	movwi [1]fsr1
  7402  00D5  294A               	goto	l3350
  7403  00D6                     l3300:	
  7404                           ;clock.c: 141: }
  7405                           
  7406                           
  7407                           ;clock.c: 142: else
  7408                           ;clock.c: 143: {
  7409                           ;clock.c: 144: *(row++) = 3;
  7410  00D6  3003               	movlw	3
  7411  00D7  00BD               	movwf	??_Clock_Display
  7412  00D8  0841               	movf	Clock_Display@row,w
  7413  00D9  0086               	movwf	6
  7414  00DA  0187               	clrf	7
  7415  00DB  083D               	movf	??_Clock_Display,w
  7416  00DC  0081               	movwf	1
  7417  00DD  3001               	movlw	1
  7418  00DE  00BD               	movwf	??_Clock_Display
  7419  00DF  083D               	movf	??_Clock_Display,w
  7420  00E0  07C1               	addwf	Clock_Display@row,f
  7421                           
  7422                           ;clock.c: 145: *(col++) = 0x71F;
  7423  00E1  0840               	movf	Clock_Display@col,w
  7424  00E2  0086               	movwf	6
  7425  00E3  0187               	clrf	7
  7426  00E4  301F               	movlw	31
  7427  00E5  3FC0               	movwi [0]fsr1
  7428  00E6  3007               	movlw	7
  7429  00E7  3FC1               	movwi [1]fsr1
  7430  00E8  294A               	goto	l3350
  7431  00E9                     l3308:	
  7432                           ;clock.c: 146: }
  7433                           ;clock.c: 147: }
  7434                           
  7435                           
  7436                           ;clock.c: 148: else if(min < 0x20 || min >= 0x45)
  7437  00E9  3020               	movlw	32
  7438  00EA  0255               	subwf	_min,w
  7439  00EB  1C03               	skipc
  7440  00EC  28F1               	goto	l3312
  7441  00ED  3045               	movlw	69
  7442  00EE  0255               	subwf	_min,w
  7443  00EF  1C03               	skipc
  7444  00F0  2902               	goto	l3320
  7445  00F1                     l3312:	
  7446                           
  7447                           ;clock.c: 149: {
  7448                           ;clock.c: 150: *(row++) = 1;
  7449  00F1  0841               	movf	Clock_Display@row,w
  7450  00F2  0086               	movwf	6
  7451  00F3  0187               	clrf	7
  7452  00F4  0181               	clrf	1
  7453  00F5  0A81               	incf	1,f
  7454  00F6  3001               	movlw	1
  7455  00F7  00BD               	movwf	??_Clock_Display
  7456  00F8  083D               	movf	??_Clock_Display,w
  7457  00F9  07C1               	addwf	Clock_Display@row,f
  7458                           
  7459                           ;clock.c: 151: *(col++) = 0x602;
  7460  00FA  0840               	movf	Clock_Display@col,w
  7461  00FB  0086               	movwf	6
  7462  00FC  0187               	clrf	7
  7463  00FD  3002               	movlw	2
  7464  00FE  3FC0               	movwi [0]fsr1
  7465  00FF  3006               	movlw	6
  7466  0100  3FC1               	movwi [1]fsr1
  7467  0101  294A               	goto	l3350
  7468  0102                     l3320:	
  7469                           ;clock.c: 152: }
  7470                           
  7471                           
  7472                           ;clock.c: 153: else if(min < 0x25 || min >= 0x40)
  7473  0102  3025               	movlw	37
  7474  0103  0255               	subwf	_min,w
  7475  0104  1C03               	skipc
  7476  0105  290A               	goto	l3324
  7477  0106  3040               	movlw	64
  7478  0107  0255               	subwf	_min,w
  7479  0108  1C03               	skipc
  7480  0109  291D               	goto	l3332
  7481  010A                     l3324:	
  7482                           
  7483                           ;clock.c: 154: {
  7484                           ;clock.c: 155: *(row++) = 2;
  7485  010A  3002               	movlw	2
  7486  010B  00BD               	movwf	??_Clock_Display
  7487  010C  0841               	movf	Clock_Display@row,w
  7488  010D  0086               	movwf	6
  7489  010E  0187               	clrf	7
  7490  010F  083D               	movf	??_Clock_Display,w
  7491  0110  0081               	movwf	1
  7492  0111  3001               	movlw	1
  7493  0112  00BD               	movwf	??_Clock_Display
  7494  0113  083D               	movf	??_Clock_Display,w
  7495  0114  07C1               	addwf	Clock_Display@row,f
  7496                           
  7497                           ;clock.c: 156: *(col++) = 0x7C0;
  7498  0115  0840               	movf	Clock_Display@col,w
  7499  0116  0086               	movwf	6
  7500  0117  0187               	clrf	7
  7501  0118  30C0               	movlw	192
  7502  0119  3FC0               	movwi [0]fsr1
  7503  011A  3007               	movlw	7
  7504  011B  3FC1               	movwi [1]fsr1
  7505  011C  294A               	goto	l3350
  7506  011D                     l3332:	
  7507                           ;clock.c: 157: }
  7508                           
  7509                           
  7510                           ;clock.c: 158: else if(min < 0x30 || min >= 0x35)
  7511  011D  3030               	movlw	48
  7512  011E  0255               	subwf	_min,w
  7513  011F  1C03               	skipc
  7514  0120  2925               	goto	l3336
  7515  0121  3035               	movlw	53
  7516  0122  0255               	subwf	_min,w
  7517  0123  1C03               	skipc
  7518  0124  2938               	goto	l3344
  7519  0125                     l3336:	
  7520                           
  7521                           ;clock.c: 159: {
  7522                           ;clock.c: 160: *(row++) = 2;
  7523  0125  3002               	movlw	2
  7524  0126  00BD               	movwf	??_Clock_Display
  7525  0127  0841               	movf	Clock_Display@row,w
  7526  0128  0086               	movwf	6
  7527  0129  0187               	clrf	7
  7528  012A  083D               	movf	??_Clock_Display,w
  7529  012B  0081               	movwf	1
  7530  012C  3001               	movlw	1
  7531  012D  00BD               	movwf	??_Clock_Display
  7532  012E  083D               	movf	??_Clock_Display,w
  7533  012F  07C1               	addwf	Clock_Display@row,f
  7534                           
  7535                           ;clock.c: 161: *(col++) = 0x400;
  7536  0130  0840               	movf	Clock_Display@col,w
  7537  0131  0086               	movwf	6
  7538  0132  0187               	clrf	7
  7539  0133  3000               	movlw	0
  7540  0134  3FC0               	movwi [0]fsr1
  7541  0135  3004               	movlw	4
  7542  0136  3FC1               	movwi [1]fsr1
  7543  0137  294A               	goto	l3350
  7544  0138                     l3344:	
  7545                           ;clock.c: 162: }
  7546                           
  7547                           
  7548                           ;clock.c: 163: else
  7549                           ;clock.c: 164: {
  7550                           ;clock.c: 165: *(row++) = 3;
  7551  0138  3003               	movlw	3
  7552  0139  00BD               	movwf	??_Clock_Display
  7553  013A  0841               	movf	Clock_Display@row,w
  7554  013B  0086               	movwf	6
  7555  013C  0187               	clrf	7
  7556  013D  083D               	movf	??_Clock_Display,w
  7557  013E  0081               	movwf	1
  7558  013F  3001               	movlw	1
  7559  0140  00BD               	movwf	??_Clock_Display
  7560  0141  083D               	movf	??_Clock_Display,w
  7561  0142  07C1               	addwf	Clock_Display@row,f
  7562                           
  7563                           ;clock.c: 166: *(col++) = 0x7F0;
  7564  0143  0840               	movf	Clock_Display@col,w
  7565  0144  0086               	movwf	6
  7566  0145  0187               	clrf	7
  7567  0146  30F0               	movlw	240
  7568  0147  3FC0               	movwi [0]fsr1
  7569  0148  3007               	movlw	7
  7570  0149  3FC1               	movwi [1]fsr1
  7571  014A                     l3350:	
  7572  014A  3002               	movlw	2
  7573  014B  00BD               	movwf	??_Clock_Display
  7574  014C  083D               	movf	??_Clock_Display,w
  7575  014D  07C0               	addwf	Clock_Display@col,f
  7576                           
  7577                           ;clock.c: 167: }
  7578                           ;clock.c: 168: if(min >= 0x35)
  7579  014E  3035               	movlw	53
  7580  014F  0255               	subwf	_min,w
  7581  0150  1C03               	skipc
  7582  0151  2979               	goto	l3368
  7583                           
  7584                           ;clock.c: 169: {
  7585                           ;clock.c: 170: if(min < 0x50 || min >= 0x55)
  7586  0152  3050               	movlw	80
  7587  0153  0255               	subwf	_min,w
  7588  0154  1C03               	skipc
  7589  0155  295A               	goto	l3358
  7590  0156  3055               	movlw	85
  7591  0157  0255               	subwf	_min,w
  7592  0158  1C03               	skipc
  7593  0159  2970               	goto	l3366
  7594  015A                     l3358:	
  7595                           
  7596                           ;clock.c: 171: {
  7597                           ;clock.c: 172: *(row++) = 3;
  7598  015A  3003               	movlw	3
  7599  015B  00BD               	movwf	??_Clock_Display
  7600  015C  0841               	movf	Clock_Display@row,w
  7601  015D  0086               	movwf	6
  7602  015E  0187               	clrf	7
  7603  015F  083D               	movf	??_Clock_Display,w
  7604  0160  0081               	movwf	1
  7605  0161  3001               	movlw	1
  7606  0162  00BD               	movwf	??_Clock_Display
  7607  0163  083D               	movf	??_Clock_Display,w
  7608  0164  07C1               	addwf	Clock_Display@row,f
  7609                           
  7610                           ;clock.c: 173: *(col++) = 0x1FF;
  7611  0165  0840               	movf	Clock_Display@col,w
  7612  0166  0086               	movwf	6
  7613  0167  0187               	clrf	7
  7614  0168  30FF               	movlw	255
  7615  0169  3FC0               	movwi [0]fsr1
  7616  016A  3001               	movlw	1
  7617  016B  3FC1               	movwi [1]fsr1
  7618  016C  3002               	movlw	2
  7619  016D  00BD               	movwf	??_Clock_Display
  7620  016E  083D               	movf	??_Clock_Display,w
  7621  016F  07C0               	addwf	Clock_Display@col,f
  7622  0170                     l3366:	
  7623                           
  7624                           ;clock.c: 174: }
  7625                           ;clock.c: 175: hourDisplay = IncHour(hourDisplay);
  7626  0170  083F               	movf	Clock_Display@hourDisplay,w
  7627  0171  318E  260B  3180   	fcall	_IncHour
  7628  0174  0020               	movlb	0	; select bank0
  7629  0175  00BD               	movwf	??_Clock_Display
  7630  0176  083D               	movf	??_Clock_Display,w
  7631  0177  00BF               	movwf	Clock_Display@hourDisplay
  7632                           
  7633                           ;clock.c: 176: }
  7634  0178  29AA               	goto	l3386
  7635  0179                     l3368:	
  7636                           
  7637                           ;clock.c: 177: else
  7638                           ;clock.c: 178: {
  7639                           ;clock.c: 179: if(hourDisplay == 0x09)
  7640  0179  3009               	movlw	9
  7641  017A  063F               	xorwf	Clock_Display@hourDisplay,w
  7642  017B  1D03               	btfss	3,2
  7643  017C  2994               	goto	l3378
  7644                           
  7645                           ;clock.c: 180: {
  7646                           ;clock.c: 181: hourDisplay = 13;
  7647  017D  300D               	movlw	13
  7648  017E  00BD               	movwf	??_Clock_Display
  7649  017F  083D               	movf	??_Clock_Display,w
  7650  0180  00BF               	movwf	Clock_Display@hourDisplay
  7651                           
  7652                           ;clock.c: 182: *(row++) = 4;
  7653  0181  3004               	movlw	4
  7654  0182  00BD               	movwf	??_Clock_Display
  7655  0183  0841               	movf	Clock_Display@row,w
  7656  0184  0086               	movwf	6
  7657  0185  0187               	clrf	7
  7658  0186  083D               	movf	??_Clock_Display,w
  7659  0187  0081               	movwf	1
  7660  0188  3001               	movlw	1
  7661  0189  00BD               	movwf	??_Clock_Display
  7662  018A  083D               	movf	??_Clock_Display,w
  7663  018B  07C1               	addwf	Clock_Display@row,f
  7664                           
  7665                           ;clock.c: 183: *(col++) = 0x070;
  7666  018C  0840               	movf	Clock_Display@col,w
  7667  018D  0086               	movwf	6
  7668  018E  0187               	clrf	7
  7669  018F  3070               	movlw	112
  7670  0190  3FC0               	movwi [0]fsr1
  7671  0191  3000               	movlw	0
  7672  0192  3FC1               	movwi [1]fsr1
  7673  0193  29A6               	goto	l3384
  7674  0194                     l3378:	
  7675                           ;clock.c: 184: }
  7676                           
  7677                           
  7678                           ;clock.c: 185: else
  7679                           ;clock.c: 186: {
  7680                           ;clock.c: 187: *(row++) = 4;
  7681  0194  3004               	movlw	4
  7682  0195  00BD               	movwf	??_Clock_Display
  7683  0196  0841               	movf	Clock_Display@row,w
  7684  0197  0086               	movwf	6
  7685  0198  0187               	clrf	7
  7686  0199  083D               	movf	??_Clock_Display,w
  7687  019A  0081               	movwf	1
  7688  019B  3001               	movlw	1
  7689  019C  00BD               	movwf	??_Clock_Display
  7690  019D  083D               	movf	??_Clock_Display,w
  7691  019E  07C1               	addwf	Clock_Display@row,f
  7692                           
  7693                           ;clock.c: 188: *(col++) = 0x7F0;
  7694  019F  0840               	movf	Clock_Display@col,w
  7695  01A0  0086               	movwf	6
  7696  01A1  0187               	clrf	7
  7697  01A2  30F0               	movlw	240
  7698  01A3  3FC0               	movwi [0]fsr1
  7699  01A4  3007               	movlw	7
  7700  01A5  3FC1               	movwi [1]fsr1
  7701  01A6                     l3384:	
  7702  01A6  3002               	movlw	2
  7703  01A7  00BD               	movwf	??_Clock_Display
  7704  01A8  083D               	movf	??_Clock_Display,w
  7705  01A9  07C0               	addwf	Clock_Display@col,f
  7706  01AA                     l3386:	
  7707                           
  7708                           ;clock.c: 189: }
  7709                           ;clock.c: 190: }
  7710                           ;clock.c: 191: }
  7711                           ;clock.c: 193: if(min < 0x05)
  7712  01AA  3005               	movlw	5
  7713  01AB  0255               	subwf	_min,w
  7714  01AC  1803               	skipnc
  7715  01AD  2AC4               	goto	l3504
  7716                           
  7717                           ;clock.c: 194: {
  7718                           ;clock.c: 195: if(hourDisplay == 10)
  7719  01AE  300A               	movlw	10
  7720  01AF  063F               	xorwf	Clock_Display@hourDisplay,w
  7721  01B0  1D03               	btfss	3,2
  7722  01B1  29C5               	goto	l3398
  7723                           
  7724                           ;clock.c: 196: {
  7725                           ;clock.c: 197: *(row++) = 9;
  7726  01B2  3009               	movlw	9
  7727  01B3  00BD               	movwf	??_Clock_Display
  7728  01B4  0841               	movf	Clock_Display@row,w
  7729  01B5  0086               	movwf	6
  7730  01B6  0187               	clrf	7
  7731  01B7  083D               	movf	??_Clock_Display,w
  7732  01B8  0081               	movwf	1
  7733  01B9  3001               	movlw	1
  7734  01BA  00BD               	movwf	??_Clock_Display
  7735  01BB  083D               	movf	??_Clock_Display,w
  7736  01BC  07C1               	addwf	Clock_Display@row,f
  7737                           
  7738                           ;clock.c: 198: *(col++) = 0x018;
  7739  01BD  0840               	movf	Clock_Display@col,w
  7740  01BE  0086               	movwf	6
  7741  01BF  0187               	clrf	7
  7742  01C0  3018               	movlw	24
  7743  01C1  3FC0               	movwi [0]fsr1
  7744  01C2  3000               	movlw	0
  7745  01C3  3FC1               	movwi [1]fsr1
  7746  01C4  29D7               	goto	l3404
  7747  01C5                     l3398:	
  7748                           ;clock.c: 199: }
  7749                           
  7750                           
  7751                           ;clock.c: 200: else
  7752                           ;clock.c: 201: {
  7753                           ;clock.c: 202: *(row++) = 9;
  7754  01C5  3009               	movlw	9
  7755  01C6  00BD               	movwf	??_Clock_Display
  7756  01C7  0841               	movf	Clock_Display@row,w
  7757  01C8  0086               	movwf	6
  7758  01C9  0187               	clrf	7
  7759  01CA  083D               	movf	??_Clock_Display,w
  7760  01CB  0081               	movwf	1
  7761  01CC  3001               	movlw	1
  7762  01CD  00BD               	movwf	??_Clock_Display
  7763  01CE  083D               	movf	??_Clock_Display,w
  7764  01CF  07C1               	addwf	Clock_Display@row,f
  7765                           
  7766                           ;clock.c: 203: *(col++) = 0x01F;
  7767  01D0  0840               	movf	Clock_Display@col,w
  7768  01D1  0086               	movwf	6
  7769  01D2  0187               	clrf	7
  7770  01D3  301F               	movlw	31
  7771  01D4  3FC0               	movwi [0]fsr1
  7772  01D5  3000               	movlw	0
  7773  01D6  3FC1               	movwi [1]fsr1
  7774  01D7                     l3404:	
  7775  01D7  3002               	movlw	2
  7776  01D8  00BD               	movwf	??_Clock_Display
  7777  01D9  083D               	movf	??_Clock_Display,w
  7778  01DA  07C0               	addwf	Clock_Display@col,f
  7779                           
  7780                           ;clock.c: 204: }
  7781                           ;clock.c: 205: }
  7782                           ;clock.c: 207: switch(hourDisplay)
  7783  01DB  2AC4               	goto	l3504
  7784  01DC                     l3406:	
  7785                           ;clock.c: 208: {
  7786                           ;clock.c: 209: case 0x00:
  7787                           
  7788                           
  7789                           ;clock.c: 210: case 0x12:
  7790                           ;clock.c: 211: *(row++) = 8;
  7791  01DC  3008               	movlw	8
  7792  01DD  00BD               	movwf	??_Clock_Display
  7793  01DE  0841               	movf	Clock_Display@row,w
  7794  01DF  0086               	movwf	6
  7795  01E0  0187               	clrf	7
  7796  01E1  083D               	movf	??_Clock_Display,w
  7797  01E2  0081               	movwf	1
  7798  01E3  3001               	movlw	1
  7799  01E4  00BD               	movwf	??_Clock_Display
  7800  01E5  083D               	movf	??_Clock_Display,w
  7801  01E6  07C1               	addwf	Clock_Display@row,f
  7802                           
  7803                           ;clock.c: 212: *(col++) = 0x01F;
  7804  01E7  0840               	movf	Clock_Display@col,w
  7805  01E8  0086               	movwf	6
  7806  01E9  0187               	clrf	7
  7807  01EA  301F               	movlw	31
  7808  01EB  3FC0               	movwi [0]fsr1
  7809  01EC  3000               	movlw	0
  7810  01ED  3FC1               	movwi [1]fsr1
  7811  01EE  2ABF               	goto	l3500
  7812  01EF                     l3414:	
  7813                           ;clock.c: 214: case 0x01:
  7814                           
  7815                           ;clock.c: 213: break;
  7816                           
  7817                           
  7818                           ;clock.c: 215: *(row++) = 5;
  7819  01EF  3005               	movlw	5
  7820  01F0  00BD               	movwf	??_Clock_Display
  7821  01F1  0841               	movf	Clock_Display@row,w
  7822  01F2  0086               	movwf	6
  7823  01F3  0187               	clrf	7
  7824  01F4  083D               	movf	??_Clock_Display,w
  7825  01F5  0081               	movwf	1
  7826  01F6  3001               	movlw	1
  7827  01F7  00BD               	movwf	??_Clock_Display
  7828  01F8  083D               	movf	??_Clock_Display,w
  7829  01F9  07C1               	addwf	Clock_Display@row,f
  7830                           
  7831                           ;clock.c: 216: *(col++) = 0x7F8;
  7832  01FA  0840               	movf	Clock_Display@col,w
  7833  01FB  0086               	movwf	6
  7834  01FC  0187               	clrf	7
  7835  01FD  30F8               	movlw	248
  7836  01FE  3FC0               	movwi [0]fsr1
  7837  01FF  3007               	movlw	7
  7838  0200  3FC1               	movwi [1]fsr1
  7839  0201  2ABF               	goto	l3500
  7840  0202                     l3422:	
  7841                           ;clock.c: 218: case 0x02:
  7842                           
  7843                           ;clock.c: 217: break;
  7844                           
  7845                           
  7846                           ;clock.c: 219: *(row++) = 6;
  7847  0202  3006               	movlw	6
  7848  0203  00BD               	movwf	??_Clock_Display
  7849  0204  0841               	movf	Clock_Display@row,w
  7850  0205  0086               	movwf	6
  7851  0206  0187               	clrf	7
  7852  0207  083D               	movf	??_Clock_Display,w
  7853  0208  0081               	movwf	1
  7854  0209  3001               	movlw	1
  7855  020A  00BD               	movwf	??_Clock_Display
  7856  020B  083D               	movf	??_Clock_Display,w
  7857  020C  07C1               	addwf	Clock_Display@row,f
  7858                           
  7859                           ;clock.c: 220: *(col++) = 0x0FF;
  7860  020D  0840               	movf	Clock_Display@col,w
  7861  020E  0086               	movwf	6
  7862  020F  0187               	clrf	7
  7863  0210  30FF               	movlw	255
  7864  0211  3FC0               	movwi [0]fsr1
  7865  0212  3000               	movlw	0
  7866  0213  3FC1               	movwi [1]fsr1
  7867  0214  2ABF               	goto	l3500
  7868  0215                     l3430:	
  7869                           ;clock.c: 222: case 0x03:
  7870                           
  7871                           ;clock.c: 221: break;
  7872                           
  7873                           
  7874                           ;clock.c: 223: *(row++) = 5;
  7875  0215  3005               	movlw	5
  7876  0216  00BD               	movwf	??_Clock_Display
  7877  0217  0841               	movf	Clock_Display@row,w
  7878  0218  0086               	movwf	6
  7879  0219  0187               	clrf	7
  7880  021A  083D               	movf	??_Clock_Display,w
  7881  021B  0081               	movwf	1
  7882  021C  3001               	movlw	1
  7883  021D  00BD               	movwf	??_Clock_Display
  7884  021E  083D               	movf	??_Clock_Display,w
  7885  021F  07C1               	addwf	Clock_Display@row,f
  7886                           
  7887                           ;clock.c: 224: *(col++) = 0x03F;
  7888  0220  0840               	movf	Clock_Display@col,w
  7889  0221  0086               	movwf	6
  7890  0222  0187               	clrf	7
  7891  0223  303F               	movlw	63
  7892  0224  3FC0               	movwi [0]fsr1
  7893  0225  3000               	movlw	0
  7894  0226  3FC1               	movwi [1]fsr1
  7895  0227  2ABF               	goto	l3500
  7896  0228                     l3438:	
  7897                           ;clock.c: 226: case 0x04:
  7898                           
  7899                           ;clock.c: 225: break;
  7900                           
  7901                           
  7902                           ;clock.c: 227: *(row++) = 6;
  7903  0228  3006               	movlw	6
  7904  0229  00BD               	movwf	??_Clock_Display
  7905  022A  0841               	movf	Clock_Display@row,w
  7906  022B  0086               	movwf	6
  7907  022C  0187               	clrf	7
  7908  022D  083D               	movf	??_Clock_Display,w
  7909  022E  0081               	movwf	1
  7910  022F  3001               	movlw	1
  7911  0230  00BD               	movwf	??_Clock_Display
  7912  0231  083D               	movf	??_Clock_Display,w
  7913  0232  07C1               	addwf	Clock_Display@row,f
  7914                           
  7915                           ;clock.c: 228: *(col++) = 0x7F0;
  7916  0233  0840               	movf	Clock_Display@col,w
  7917  0234  0086               	movwf	6
  7918  0235  0187               	clrf	7
  7919  0236  30F0               	movlw	240
  7920  0237  3FC0               	movwi [0]fsr1
  7921  0238  3007               	movlw	7
  7922  0239  3FC1               	movwi [1]fsr1
  7923  023A  2ABF               	goto	l3500
  7924  023B                     l3446:	
  7925                           ;clock.c: 230: case 0x05:
  7926                           
  7927                           ;clock.c: 229: break;
  7928                           
  7929                           
  7930                           ;clock.c: 231: *(row++) = 6;
  7931  023B  3006               	movlw	6
  7932  023C  00BD               	movwf	??_Clock_Display
  7933  023D  0841               	movf	Clock_Display@row,w
  7934  023E  0086               	movwf	6
  7935  023F  0187               	clrf	7
  7936  0240  083D               	movf	??_Clock_Display,w
  7937  0241  0081               	movwf	1
  7938  0242  3001               	movlw	1
  7939  0243  00BD               	movwf	??_Clock_Display
  7940  0244  083D               	movf	??_Clock_Display,w
  7941  0245  07C1               	addwf	Clock_Display@row,f
  7942                           
  7943                           ;clock.c: 232: *(col++) = 0x70F;
  7944  0246  0840               	movf	Clock_Display@col,w
  7945  0247  0086               	movwf	6
  7946  0248  0187               	clrf	7
  7947  0249  300F               	movlw	15
  7948  024A  3FC0               	movwi [0]fsr1
  7949  024B  3007               	movlw	7
  7950  024C  3FC1               	movwi [1]fsr1
  7951  024D  2ABF               	goto	l3500
  7952  024E                     l3454:	
  7953                           ;clock.c: 234: case 0x06:
  7954                           
  7955                           ;clock.c: 233: break;
  7956                           
  7957                           
  7958                           ;clock.c: 235: *(row++) = 5;
  7959  024E  3005               	movlw	5
  7960  024F  00BD               	movwf	??_Clock_Display
  7961  0250  0841               	movf	Clock_Display@row,w
  7962  0251  0086               	movwf	6
  7963  0252  0187               	clrf	7
  7964  0253  083D               	movf	??_Clock_Display,w
  7965  0254  0081               	movwf	1
  7966  0255  3001               	movlw	1
  7967  0256  00BD               	movwf	??_Clock_Display
  7968  0257  083D               	movf	??_Clock_Display,w
  7969  0258  07C1               	addwf	Clock_Display@row,f
  7970                           
  7971                           ;clock.c: 236: *(col++) = 0x7C7;
  7972  0259  0840               	movf	Clock_Display@col,w
  7973  025A  0086               	movwf	6
  7974  025B  0187               	clrf	7
  7975  025C  30C7               	movlw	199
  7976  025D  3FC0               	movwi [0]fsr1
  7977  025E  3007               	movlw	7
  7978  025F  3FC1               	movwi [1]fsr1
  7979  0260  2ABF               	goto	l3500
  7980  0261                     l3462:	
  7981                           ;clock.c: 238: case 0x07:
  7982                           
  7983                           ;clock.c: 237: break;
  7984                           
  7985                           
  7986                           ;clock.c: 239: *(row++) = 8;
  7987  0261  3008               	movlw	8
  7988  0262  00BD               	movwf	??_Clock_Display
  7989  0263  0841               	movf	Clock_Display@row,w
  7990  0264  0086               	movwf	6
  7991  0265  0187               	clrf	7
  7992  0266  083D               	movf	??_Clock_Display,w
  7993  0267  0081               	movwf	1
  7994  0268  3001               	movlw	1
  7995  0269  00BD               	movwf	??_Clock_Display
  7996  026A  083D               	movf	??_Clock_Display,w
  7997  026B  07C1               	addwf	Clock_Display@row,f
  7998                           
  7999                           ;clock.c: 240: *(col++) = 0x7E0;
  8000  026C  0840               	movf	Clock_Display@col,w
  8001  026D  0086               	movwf	6
  8002  026E  0187               	clrf	7
  8003  026F  30E0               	movlw	224
  8004  0270  3FC0               	movwi [0]fsr1
  8005  0271  3007               	movlw	7
  8006  0272  3FC1               	movwi [1]fsr1
  8007  0273  2ABF               	goto	l3500
  8008  0274                     l3470:	
  8009                           ;clock.c: 242: case 0x08:
  8010                           
  8011                           ;clock.c: 241: break;
  8012                           
  8013                           
  8014                           ;clock.c: 243: *(row++) = 7;
  8015  0274  3007               	movlw	7
  8016  0275  00BD               	movwf	??_Clock_Display
  8017  0276  0841               	movf	Clock_Display@row,w
  8018  0277  0086               	movwf	6
  8019  0278  0187               	clrf	7
  8020  0279  083D               	movf	??_Clock_Display,w
  8021  027A  0081               	movwf	1
  8022  027B  3001               	movlw	1
  8023  027C  00BD               	movwf	??_Clock_Display
  8024  027D  083D               	movf	??_Clock_Display,w
  8025  027E  07C1               	addwf	Clock_Display@row,f
  8026                           
  8027                           ;clock.c: 244: *(col++) = 0x7E0;
  8028  027F  0840               	movf	Clock_Display@col,w
  8029  0280  0086               	movwf	6
  8030  0281  0187               	clrf	7
  8031  0282  30E0               	movlw	224
  8032  0283  3FC0               	movwi [0]fsr1
  8033  0284  3007               	movlw	7
  8034  0285  3FC1               	movwi [1]fsr1
  8035  0286  2ABF               	goto	l3500
  8036  0287                     l3478:	
  8037                           ;clock.c: 246: case 0x09:
  8038                           
  8039                           ;clock.c: 245: break;
  8040                           
  8041                           
  8042                           ;clock.c: 247: *(row++) = 4;
  8043  0287  3004               	movlw	4
  8044  0288  00BD               	movwf	??_Clock_Display
  8045  0289  0841               	movf	Clock_Display@row,w
  8046  028A  0086               	movwf	6
  8047  028B  0187               	clrf	7
  8048  028C  083D               	movf	??_Clock_Display,w
  8049  028D  0081               	movwf	1
  8050  028E  3001               	movlw	1
  8051  028F  00BD               	movwf	??_Clock_Display
  8052  0290  083D               	movf	??_Clock_Display,w
  8053  0291  07C1               	addwf	Clock_Display@row,f
  8054                           
  8055                           ;clock.c: 248: *(col++) = 0x07F;
  8056  0292  0840               	movf	Clock_Display@col,w
  8057  0293  0086               	movwf	6
  8058  0294  0187               	clrf	7
  8059  0295  307F               	movlw	127
  8060  0296  3FC0               	movwi [0]fsr1
  8061  0297  3000               	movlw	0
  8062  0298  3FC1               	movwi [1]fsr1
  8063  0299  2ABF               	goto	l3500
  8064  029A                     l3486:	
  8065                           ;clock.c: 250: case 0x10:
  8066                           
  8067                           ;clock.c: 249: break;
  8068                           
  8069                           
  8070                           ;clock.c: 251: *(row++) = 9;
  8071  029A  3009               	movlw	9
  8072  029B  00BD               	movwf	??_Clock_Display
  8073  029C  0841               	movf	Clock_Display@row,w
  8074  029D  0086               	movwf	6
  8075  029E  0187               	clrf	7
  8076  029F  083D               	movf	??_Clock_Display,w
  8077  02A0  0081               	movwf	1
  8078  02A1  3001               	movlw	1
  8079  02A2  00BD               	movwf	??_Clock_Display
  8080  02A3  083D               	movf	??_Clock_Display,w
  8081  02A4  07C1               	addwf	Clock_Display@row,f
  8082                           
  8083                           ;clock.c: 252: *(col++) = 0x7F8;
  8084  02A5  0840               	movf	Clock_Display@col,w
  8085  02A6  0086               	movwf	6
  8086  02A7  0187               	clrf	7
  8087  02A8  30F8               	movlw	248
  8088  02A9  3FC0               	movwi [0]fsr1
  8089  02AA  3007               	movlw	7
  8090  02AB  3FC1               	movwi [1]fsr1
  8091  02AC  2ABF               	goto	l3500
  8092  02AD                     l3494:	
  8093                           ;clock.c: 254: case 0x11:
  8094                           
  8095                           ;clock.c: 253: break;
  8096                           
  8097                           
  8098                           ;clock.c: 255: *(row++) = 7;
  8099  02AD  3007               	movlw	7
  8100  02AE  00BD               	movwf	??_Clock_Display
  8101  02AF  0841               	movf	Clock_Display@row,w
  8102  02B0  0086               	movwf	6
  8103  02B1  0187               	clrf	7
  8104  02B2  083D               	movf	??_Clock_Display,w
  8105  02B3  0081               	movwf	1
  8106  02B4  3001               	movlw	1
  8107  02B5  00BD               	movwf	??_Clock_Display
  8108  02B6  083D               	movf	??_Clock_Display,w
  8109  02B7  07C1               	addwf	Clock_Display@row,f
  8110                           
  8111                           ;clock.c: 256: *(col++) = 0x01F;
  8112  02B8  0840               	movf	Clock_Display@col,w
  8113  02B9  0086               	movwf	6
  8114  02BA  0187               	clrf	7
  8115  02BB  301F               	movlw	31
  8116  02BC  3FC0               	movwi [0]fsr1
  8117  02BD  3000               	movlw	0
  8118  02BE  3FC1               	movwi [1]fsr1
  8119  02BF                     l3500:	
  8120  02BF  3002               	movlw	2
  8121  02C0  00BD               	movwf	??_Clock_Display
  8122  02C1  083D               	movf	??_Clock_Display,w
  8123  02C2  07C0               	addwf	Clock_Display@col,f
  8124                           
  8125                           ;clock.c: 258: }
  8126                           
  8127                           ;clock.c: 257: break;
  8128  02C3  2AED               	goto	l3506
  8129  02C4                     l3504:	
  8130  02C4  083F               	movf	Clock_Display@hourDisplay,w
  8131                           
  8132                           ; Switch size 1, requested type "space"
  8133                           ; Number of cases is 13, Range of values is 0 to 18
  8134                           ; switch strategies available:
  8135                           ; Name         Instructions Cycles
  8136                           ; simple_byte           40    21 (average)
  8137                           ; direct_byte           44     6 (fixed)
  8138                           ; jumptable            260     6 (fixed)
  8139                           ;	Chosen strategy is simple_byte
  8140  02C5  3A00               	xorlw	0	; case 0
  8141  02C6  1903               	skipnz
  8142  02C7  29DC               	goto	l3406
  8143  02C8  3A01               	xorlw	1	; case 1
  8144  02C9  1903               	skipnz
  8145  02CA  29EF               	goto	l3414
  8146  02CB  3A03               	xorlw	3	; case 2
  8147  02CC  1903               	skipnz
  8148  02CD  2A02               	goto	l3422
  8149  02CE  3A01               	xorlw	1	; case 3
  8150  02CF  1903               	skipnz
  8151  02D0  2A15               	goto	l3430
  8152  02D1  3A07               	xorlw	7	; case 4
  8153  02D2  1903               	skipnz
  8154  02D3  2A28               	goto	l3438
  8155  02D4  3A01               	xorlw	1	; case 5
  8156  02D5  1903               	skipnz
  8157  02D6  2A3B               	goto	l3446
  8158  02D7  3A03               	xorlw	3	; case 6
  8159  02D8  1903               	skipnz
  8160  02D9  2A4E               	goto	l3454
  8161  02DA  3A01               	xorlw	1	; case 7
  8162  02DB  1903               	skipnz
  8163  02DC  2A61               	goto	l3462
  8164  02DD  3A0F               	xorlw	15	; case 8
  8165  02DE  1903               	skipnz
  8166  02DF  2A74               	goto	l3470
  8167  02E0  3A01               	xorlw	1	; case 9
  8168  02E1  1903               	skipnz
  8169  02E2  2A87               	goto	l3478
  8170  02E3  3A19               	xorlw	25	; case 16
  8171  02E4  1903               	skipnz
  8172  02E5  2A9A               	goto	l3486
  8173  02E6  3A01               	xorlw	1	; case 17
  8174  02E7  1903               	skipnz
  8175  02E8  2AAD               	goto	l3494
  8176  02E9  3A03               	xorlw	3	; case 18
  8177  02EA  1903               	skipnz
  8178  02EB  29DC               	goto	l3406
  8179  02EC  2AED               	goto	l3506
  8180  02ED                     l3506:	
  8181                           
  8182                           ;clock.c: 260: *(row++) = -1;
  8183  02ED  0841               	movf	Clock_Display@row,w
  8184  02EE  0086               	movwf	6
  8185  02EF  0187               	clrf	7
  8186  02F0  0181               	clrf	1
  8187  02F1  0381               	decf	1,f
  8188  02F2  3001               	movlw	1
  8189  02F3  00BD               	movwf	??_Clock_Display
  8190  02F4  083D               	movf	??_Clock_Display,w
  8191  02F5  07C1               	addwf	Clock_Display@row,f
  8192  02F6  0008               	return
  8193  02F7                     __end_of_Clock_Display:	
  8194                           
  8195                           	psect	text18
  8196  0E0B                     __ptext18:	
  8197 ;; *************** function _IncHour *****************
  8198 ;; Defined at:
  8199 ;;		line 66 in file "clock.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  in              1    wreg     unsigned char 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  in              1    1[BANK0 ] unsigned char 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;                  1    wreg      unsigned char 
  8206 ;; Registers used:
  8207 ;;		wreg, status,2, status,0
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;Total ram usage:        1 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    5
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_Clock_Tap
  8224 ;;		_Clock_Display
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _IncHour
  8230  0E0B                     _IncHour:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _IncHour: [wreg+status,2+status,0]
  8234                           ;IncHour@in stored from wreg
  8235  0E0B  0020               	movlb	0	; select bank0
  8236  0E0C  00A1               	movwf	IncHour@in
  8237                           
  8238                           ;clock.c: 68: if(in == 0x09)
  8239  0E0D  3009               	movlw	9
  8240  0E0E  0621               	xorwf	IncHour@in,w
  8241  0E0F  1D03               	btfss	3,2
  8242  0E10  2E13               	goto	l3228
  8243                           
  8244                           ;clock.c: 69: return 0x10;
  8245  0E11  3010               	movlw	16
  8246  0E12  0008               	return
  8247  0E13                     l3228:	
  8248                           
  8249                           ;clock.c: 70: else if(in == 0x12)
  8250  0E13  3012               	movlw	18
  8251  0E14  0621               	xorwf	IncHour@in,w
  8252  0E15  1D03               	btfss	3,2
  8253  0E16  2E19               	goto	l3236
  8254                           
  8255                           ;clock.c: 71: return 0x01;
  8256  0E17  3001               	movlw	1
  8257  0E18  0008               	return
  8258  0E19                     l3236:	
  8259                           
  8260                           ;clock.c: 72: else
  8261                           ;clock.c: 73: return in + 1;
  8262  0E19  0821               	movf	IncHour@in,w
  8263  0E1A  3E01               	addlw	1
  8264  0E1B  0008               	return
  8265  0E1C                     __end_of_IncHour:	
  8266                           
  8267                           	psect	text19
  8268  0EDC                     __ptext19:	
  8269 ;; *************** function _Clock_Read *****************
  8270 ;; Defined at:
  8271 ;;		line 105 in file "clock.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;		None
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  dataBuffer      3   26[BANK0 ] unsigned char [3]
  8276 ;; Return value:  Size  Location     Type
  8277 ;;                  1    wreg      void 
  8278 ;; Registers used:
  8279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: 0/0
  8284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;Total ram usage:        4 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    7
  8292 ;; This function calls:
  8293 ;;		_I2CRead
  8294 ;; This function is called by:
  8295 ;;		_Clock_Initialize
  8296 ;;		_Clock_Display
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _Clock_Read
  8302  0EDC                     _Clock_Read:	
  8303                           
  8304                           ;clock.c: 107: uint8_t dataBuffer[3];
  8305                           ;clock.c: 109: I2CRead(dataBuffer, 0x00, 3, 0b1101111);
  8306                           
  8307                           ;incstack = 0
  8308                           ; Regs used in _Clock_Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8309  0EDC  0020               	movlb	0	; select bank0
  8310  0EDD  01A8               	clrf	I2CRead@registerAddress
  8311  0EDE  3003               	movlw	3
  8312  0EDF  00B9               	movwf	??_Clock_Read
  8313  0EE0  0839               	movf	??_Clock_Read,w
  8314  0EE1  00A9               	movwf	I2CRead@length
  8315  0EE2  306F               	movlw	111
  8316  0EE3  00AA               	movwf	I2CRead@address
  8317  0EE4  3000               	movlw	0
  8318  0EE5  00AB               	movwf	I2CRead@address+1
  8319  0EE6  303A               	movlw	(low (Clock_Read@dataBuffer| 0))& (0+255)
  8320  0EE7  3187  2758         	fcall	_I2CRead
  8321                           
  8322                           ;clock.c: 110: sec = (dataBuffer[0] & 0x7f);
  8323  0EE9  0020               	movlb	0	; select bank0
  8324  0EEA  083A               	movf	Clock_Read@dataBuffer,w
  8325  0EEB  397F               	andlw	127
  8326  0EEC  00B9               	movwf	??_Clock_Read
  8327  0EED  0839               	movf	??_Clock_Read,w
  8328  0EEE  0021               	movlb	1	; select bank1
  8329  0EEF  00A4               	movwf	_sec^(0+128)
  8330                           
  8331                           ;clock.c: 111: min = dataBuffer[1];
  8332  0EF0  0020               	movlb	0	; select bank0
  8333  0EF1  083B               	movf	Clock_Read@dataBuffer+1,w
  8334  0EF2  00B9               	movwf	??_Clock_Read
  8335  0EF3  0839               	movf	??_Clock_Read,w
  8336  0EF4  00D5               	movwf	_min
  8337                           
  8338                           ;clock.c: 112: hour = (dataBuffer[2] & 0x1F);
  8339  0EF5  083C               	movf	Clock_Read@dataBuffer+2,w
  8340  0EF6  391F               	andlw	31
  8341  0EF7  00B9               	movwf	??_Clock_Read
  8342  0EF8  0839               	movf	??_Clock_Read,w
  8343  0EF9  00E8               	movwf	_hour
  8344  0EFA  0008               	return
  8345  0EFB                     __end_of_Clock_Read:	
  8346                           
  8347                           	psect	text20
  8348  051B                     __ptext20:	
  8349 ;; *************** function _Acc_Initialize *****************
  8350 ;; Defined at:
  8351 ;;		line 14 in file "accelerometer.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;		None
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  writeBuffer     7   33[BANK0 ] unsigned char [7]
  8356 ;;  dataBuffer      6   26[BANK0 ] unsigned char [6]
  8357 ;;  status          1   32[BANK0 ] enum E12012
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  1    wreg      void 
  8360 ;; Registers used:
  8361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 0/0
  8364 ;;		On exit  : 0/0
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;Total ram usage:       15 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    8
  8374 ;; This function calls:
  8375 ;;		_I2CRead
  8376 ;;		_I2CWrite
  8377 ;; This function is called by:
  8378 ;;		_main
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           
  8383                           ;psect for function _Acc_Initialize
  8384  051B                     _Acc_Initialize:	
  8385                           
  8386                           ;accelerometer.c: 16: uint8_t writeBuffer[7];
  8387                           ;accelerometer.c: 17: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  8388                           
  8389                           ;incstack = 0
  8390                           ; Regs used in _Acc_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8391  051B  3002               	movlw	2
  8392  051C  0020               	movlb	0	; select bank0
  8393  051D  00B9               	movwf	??_Acc_Initialize
  8394  051E  0839               	movf	??_Acc_Initialize,w
  8395  051F  00C0               	movwf	Acc_Initialize@status
  8396                           
  8397                           ;accelerometer.c: 19: writeBuffer[0] = 0xA0;
  8398  0520  30A0               	movlw	160
  8399  0521  00B9               	movwf	??_Acc_Initialize
  8400  0522  0839               	movf	??_Acc_Initialize,w
  8401  0523  00C1               	movwf	Acc_Initialize@writeBuffer
  8402                           
  8403                           ;accelerometer.c: 20: writeBuffer[1] = 0x57;
  8404  0524  3057               	movlw	87
  8405  0525  00B9               	movwf	??_Acc_Initialize
  8406  0526  0839               	movf	??_Acc_Initialize,w
  8407  0527  00C2               	movwf	Acc_Initialize@writeBuffer+1
  8408                           
  8409                           ;accelerometer.c: 21: writeBuffer[2] = 0x04;
  8410  0528  3004               	movlw	4
  8411  0529  00B9               	movwf	??_Acc_Initialize
  8412  052A  0839               	movf	??_Acc_Initialize,w
  8413  052B  00C3               	movwf	Acc_Initialize@writeBuffer+2
  8414                           
  8415                           ;accelerometer.c: 22: writeBuffer[3] = 0x80;
  8416  052C  3080               	movlw	128
  8417  052D  00B9               	movwf	??_Acc_Initialize
  8418  052E  0839               	movf	??_Acc_Initialize,w
  8419  052F  00C4               	movwf	Acc_Initialize@writeBuffer+3
  8420                           
  8421                           ;accelerometer.c: 23: writeBuffer[4] = 0x80;
  8422  0530  3080               	movlw	128
  8423  0531  00B9               	movwf	??_Acc_Initialize
  8424  0532  0839               	movf	??_Acc_Initialize,w
  8425  0533  00C5               	movwf	Acc_Initialize@writeBuffer+4
  8426                           
  8427                           ;accelerometer.c: 24: writeBuffer[5] = 0x08;
  8428  0534  3008               	movlw	8
  8429  0535  00B9               	movwf	??_Acc_Initialize
  8430  0536  0839               	movf	??_Acc_Initialize,w
  8431  0537  00C6               	movwf	Acc_Initialize@writeBuffer+5
  8432                           
  8433                           ;accelerometer.c: 25: writeBuffer[6] = 0x20;
  8434  0538  3020               	movlw	32
  8435  0539  00B9               	movwf	??_Acc_Initialize
  8436  053A  0839               	movf	??_Acc_Initialize,w
  8437  053B  00C7               	movwf	Acc_Initialize@writeBuffer+6
  8438                           
  8439                           ;accelerometer.c: 26: I2CWrite(writeBuffer, 7, 0b0011000);
  8440  053C  3007               	movlw	7
  8441  053D  00B9               	movwf	??_Acc_Initialize
  8442  053E  0839               	movf	??_Acc_Initialize,w
  8443  053F  00AF               	movwf	I2CWrite@length
  8444  0540  3018               	movlw	24
  8445  0541  00B0               	movwf	I2CWrite@address
  8446  0542  3000               	movlw	0
  8447  0543  00B1               	movwf	I2CWrite@address+1
  8448  0544  3041               	movlw	(low (Acc_Initialize@writeBuffer| 0))& (0+255)
  8449  0545  318F  273A  3185   	fcall	_I2CWrite
  8450                           
  8451                           ;accelerometer.c: 28: uint8_t dataBuffer[6];
  8452                           ;accelerometer.c: 29: I2CRead(dataBuffer, 0x31, 1, 0b0011000);
  8453  0548  3031               	movlw	49
  8454  0549  0020               	movlb	0	; select bank0
  8455  054A  00B9               	movwf	??_Acc_Initialize
  8456  054B  0839               	movf	??_Acc_Initialize,w
  8457  054C  00A8               	movwf	I2CRead@registerAddress
  8458  054D  01A9               	clrf	I2CRead@length
  8459  054E  0AA9               	incf	I2CRead@length,f
  8460  054F  3018               	movlw	24
  8461  0550  00AA               	movwf	I2CRead@address
  8462  0551  3000               	movlw	0
  8463  0552  00AB               	movwf	I2CRead@address+1
  8464  0553  303A               	movlw	(low (Acc_Initialize@dataBuffer| 0))& (0+255)
  8465  0554  3187  2758  3185   	fcall	_I2CRead
  8466                           
  8467                           ;accelerometer.c: 31: writeBuffer[0] = 0x30;
  8468  0557  3030               	movlw	48
  8469  0558  0020               	movlb	0	; select bank0
  8470  0559  00B9               	movwf	??_Acc_Initialize
  8471  055A  0839               	movf	??_Acc_Initialize,w
  8472  055B  00C1               	movwf	Acc_Initialize@writeBuffer
  8473                           
  8474                           ;accelerometer.c: 32: writeBuffer[1] = 0x00;
  8475  055C  01C2               	clrf	Acc_Initialize@writeBuffer+1
  8476                           
  8477                           ;accelerometer.c: 33: I2CWrite(writeBuffer, 2, 0b0011000);
  8478  055D  3002               	movlw	2
  8479  055E  00B9               	movwf	??_Acc_Initialize
  8480  055F  0839               	movf	??_Acc_Initialize,w
  8481  0560  00AF               	movwf	I2CWrite@length
  8482  0561  3018               	movlw	24
  8483  0562  00B0               	movwf	I2CWrite@address
  8484  0563  3000               	movlw	0
  8485  0564  00B1               	movwf	I2CWrite@address+1
  8486  0565  3041               	movlw	(low (Acc_Initialize@writeBuffer| 0))& (0+255)
  8487  0566  318F  273A  3185   	fcall	_I2CWrite
  8488                           
  8489                           ;accelerometer.c: 35: writeBuffer[0] = 0xB4;
  8490  0569  30B4               	movlw	180
  8491  056A  0020               	movlb	0	; select bank0
  8492  056B  00B9               	movwf	??_Acc_Initialize
  8493  056C  0839               	movf	??_Acc_Initialize,w
  8494  056D  00C1               	movwf	Acc_Initialize@writeBuffer
  8495                           
  8496                           ;accelerometer.c: 36: writeBuffer[1] = 0x04;
  8497  056E  3004               	movlw	4
  8498  056F  00B9               	movwf	??_Acc_Initialize
  8499  0570  0839               	movf	??_Acc_Initialize,w
  8500  0571  00C2               	movwf	Acc_Initialize@writeBuffer+1
  8501                           
  8502                           ;accelerometer.c: 37: I2CWrite(writeBuffer, 2, 0b0011000);
  8503  0572  3002               	movlw	2
  8504  0573  00B9               	movwf	??_Acc_Initialize
  8505  0574  0839               	movf	??_Acc_Initialize,w
  8506  0575  00AF               	movwf	I2CWrite@length
  8507  0576  3018               	movlw	24
  8508  0577  00B0               	movwf	I2CWrite@address
  8509  0578  3000               	movlw	0
  8510  0579  00B1               	movwf	I2CWrite@address+1
  8511  057A  3041               	movlw	(low (Acc_Initialize@writeBuffer| 0))& (0+255)
  8512  057B  318F  273A  3185   	fcall	_I2CWrite
  8513                           
  8514                           ;accelerometer.c: 39: writeBuffer[0] = 0xB6;
  8515  057E  30B6               	movlw	182
  8516  057F  0020               	movlb	0	; select bank0
  8517  0580  00B9               	movwf	??_Acc_Initialize
  8518  0581  0839               	movf	??_Acc_Initialize,w
  8519  0582  00C1               	movwf	Acc_Initialize@writeBuffer
  8520                           
  8521                           ;accelerometer.c: 40: writeBuffer[1] = 0x1f;
  8522  0583  301F               	movlw	31
  8523  0584  00B9               	movwf	??_Acc_Initialize
  8524  0585  0839               	movf	??_Acc_Initialize,w
  8525  0586  00C2               	movwf	Acc_Initialize@writeBuffer+1
  8526                           
  8527                           ;accelerometer.c: 41: writeBuffer[2] = 0x10;
  8528  0587  3010               	movlw	16
  8529  0588  00B9               	movwf	??_Acc_Initialize
  8530  0589  0839               	movf	??_Acc_Initialize,w
  8531  058A  00C3               	movwf	Acc_Initialize@writeBuffer+2
  8532                           
  8533                           ;accelerometer.c: 42: writeBuffer[3] = 0x01;
  8534  058B  01C4               	clrf	Acc_Initialize@writeBuffer+3
  8535  058C  0AC4               	incf	Acc_Initialize@writeBuffer+3,f
  8536                           
  8537                           ;accelerometer.c: 43: writeBuffer[4] = 0x10;
  8538  058D  3010               	movlw	16
  8539  058E  00B9               	movwf	??_Acc_Initialize
  8540  058F  0839               	movf	??_Acc_Initialize,w
  8541  0590  00C5               	movwf	Acc_Initialize@writeBuffer+4
  8542                           
  8543                           ;accelerometer.c: 44: writeBuffer[5] = 0x40;
  8544  0591  3040               	movlw	64
  8545  0592  00B9               	movwf	??_Acc_Initialize
  8546  0593  0839               	movf	??_Acc_Initialize,w
  8547  0594  00C6               	movwf	Acc_Initialize@writeBuffer+5
  8548                           
  8549                           ;accelerometer.c: 45: writeBuffer[6] = 0x05;
  8550  0595  3005               	movlw	5
  8551  0596  00B9               	movwf	??_Acc_Initialize
  8552  0597  0839               	movf	??_Acc_Initialize,w
  8553  0598  00C7               	movwf	Acc_Initialize@writeBuffer+6
  8554                           
  8555                           ;accelerometer.c: 46: writeBuffer[7] = 0x10;
  8556  0599  3010               	movlw	16
  8557  059A  00B9               	movwf	??_Acc_Initialize
  8558  059B  0839               	movf	??_Acc_Initialize,w
  8559  059C  00C8               	movwf	Acc_Initialize@writeBuffer+7
  8560                           
  8561                           ;accelerometer.c: 47: I2CWrite(writeBuffer, 8, 0b0011000);
  8562  059D  3008               	movlw	8
  8563  059E  00B9               	movwf	??_Acc_Initialize
  8564  059F  0839               	movf	??_Acc_Initialize,w
  8565  05A0  00AF               	movwf	I2CWrite@length
  8566  05A1  3018               	movlw	24
  8567  05A2  00B0               	movwf	I2CWrite@address
  8568  05A3  3000               	movlw	0
  8569  05A4  00B1               	movwf	I2CWrite@address+1
  8570  05A5  3041               	movlw	(low (Acc_Initialize@writeBuffer| 0))& (0+255)
  8571  05A6  318F  273A         	fcall	_I2CWrite
  8572  05A8  0008               	return
  8573  05A9                     __end_of_Acc_Initialize:	
  8574                           
  8575                           	psect	text21
  8576  0F3A                     __ptext21:	
  8577 ;; *************** function _I2CWrite *****************
  8578 ;; Defined at:
  8579 ;;		line 17 in file "lib.c"
  8580 ;; Parameters:    Size  Location     Type
  8581 ;;  pdata           1    wreg     PTR unsigned char 
  8582 ;;		 -> Acc_Initialize@writeBuffer(7), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5), LED_Initialize@write
      +Buffer(3), 
  8583 ;;		 -> LED_Row@writeBuffer(3), 
  8584 ;;  length          1   15[BANK0 ] unsigned char 
  8585 ;;  address         2   16[BANK0 ] unsigned int 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;  pdata           1   22[BANK0 ] PTR unsigned char 
  8588 ;;		 -> Acc_Initialize@writeBuffer(7), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5), LED_Initialize@write
      +Buffer(3), 
  8589 ;;		 -> LED_Row@writeBuffer(3), 
  8590 ;;  i               2   20[BANK0 ] int 
  8591 ;;  status          1   23[BANK0 ] enum E12012
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  1    wreg      void 
  8594 ;; Registers used:
  8595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8601 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;Total ram usage:        9 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    7
  8608 ;; This function calls:
  8609 ;;		_I2C_MasterWrite
  8610 ;; This function is called by:
  8611 ;;		_LED_Row
  8612 ;;		_LED_Initialize
  8613 ;;		_Clock_Initialize
  8614 ;;		_Clock_Write
  8615 ;;		_Acc_Initialize
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           
  8620                           ;psect for function _I2CWrite
  8621  0F3A                     _I2CWrite:	
  8622                           
  8623                           ;incstack = 0
  8624                           ; Regs used in _I2CWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8625                           ;I2CWrite@pdata stored from wreg
  8626  0F3A  0020               	movlb	0	; select bank0
  8627  0F3B  00B6               	movwf	I2CWrite@pdata
  8628                           
  8629                           ;lib.c: 21: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  8630  0F3C  3002               	movlw	2
  8631  0F3D  00B2               	movwf	??_I2CWrite
  8632  0F3E  0832               	movf	??_I2CWrite,w
  8633  0F3F  00B7               	movwf	I2CWrite@status
  8634                           
  8635                           ;lib.c: 23: for(int i = 0; i==0; )
  8636  0F40  01B4               	clrf	I2CWrite@i
  8637  0F41  01B5               	clrf	I2CWrite@i+1
  8638  0F42                     L12:	
  8639  0F42  0834               	movf	I2CWrite@i,w
  8640  0F43  0435               	iorwf	I2CWrite@i+1,w
  8641  0F44  1D03               	btfss	3,2
  8642  0F45  0008               	return
  8643                           
  8644                           ;lib.c: 24: {
  8645                           ;lib.c: 25: I2C_MasterWrite(pdata, length, address, &status);
  8646  0F46  082F               	movf	I2CWrite@length,w
  8647  0F47  00B2               	movwf	??_I2CWrite
  8648  0F48  0832               	movf	??_I2CWrite,w
  8649  0F49  00A8               	movwf	I2C_MasterWrite@length
  8650  0F4A  0831               	movf	I2CWrite@address+1,w
  8651  0F4B  00AA               	movwf	I2C_MasterWrite@address+1
  8652  0F4C  0830               	movf	I2CWrite@address,w
  8653  0F4D  00A9               	movwf	I2C_MasterWrite@address
  8654  0F4E  3037               	movlw	(low (I2CWrite@status| 0))& (0+255)
  8655  0F4F  00B3               	movwf	??_I2CWrite+1
  8656  0F50  0833               	movf	??_I2CWrite+1,w
  8657  0F51  00AB               	movwf	I2C_MasterWrite@pflag
  8658  0F52  0836               	movf	I2CWrite@pdata,w
  8659  0F53  318F  2787  318F   	fcall	_I2C_MasterWrite
  8660  0F56                     l3640:	
  8661                           ;lib.c: 26: while(status == I2C_MESSAGE_PENDING);
  8662                           
  8663  0F56  3002               	movlw	2
  8664  0F57  0020               	movlb	0	; select bank0
  8665  0F58  0637               	xorwf	I2CWrite@status,w
  8666  0F59  1903               	btfsc	3,2
  8667  0F5A  2F56               	goto	l3640
  8668                           
  8669                           ;lib.c: 28: if (status == I2C_MESSAGE_COMPLETE)
  8670  0F5B  0837               	movf	I2CWrite@status,w
  8671  0F5C  1903               	btfsc	3,2
  8672  0F5D  0008               	return
  8673  0F5E  2F42               	goto	L12
  8674  0F5F                     __end_of_I2CWrite:	
  8675                           ;lib.c: 29: break;
  8676                           
  8677                           
  8678                           	psect	text22
  8679  0F87                     __ptext22:	
  8680 ;; *************** function _I2C_MasterWrite *****************
  8681 ;; Defined at:
  8682 ;;		line 598 in file "mcc_generated_files/i2c.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;  pdata           1    wreg     PTR unsigned char 
  8685 ;;		 -> Acc_Initialize@writeBuffer(7), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5), LED_Initialize@write
      +Buffer(3), 
  8686 ;;		 -> LED_Row@writeBuffer(3), 
  8687 ;;  length          1    8[BANK0 ] unsigned char 
  8688 ;;  address         2    9[BANK0 ] unsigned int 
  8689 ;;  pflag           1   11[BANK0 ] PTR enum E11987
  8690 ;;		 -> I2CWrite@status(1), 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  8693 ;;		 -> Acc_Initialize@writeBuffer(7), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5), LED_Initialize@write
      +Buffer(3), 
  8694 ;;		 -> LED_Row@writeBuffer(3), 
  8695 ;; Return value:  Size  Location     Type
  8696 ;;                  1    wreg      void 
  8697 ;; Registers used:
  8698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8699 ;; Tracked objects:
  8700 ;;		On entry : 0/0
  8701 ;;		On exit  : 0/0
  8702 ;;		Unchanged: 0/0
  8703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8704 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;Total ram usage:        7 bytes
  8709 ;; Hardware stack levels used:    1
  8710 ;; Hardware stack levels required when called:    6
  8711 ;; This function calls:
  8712 ;;		_I2C_MasterTRBInsert
  8713 ;;		_I2C_MasterWriteTRBBuild
  8714 ;; This function is called by:
  8715 ;;		_I2CWrite
  8716 ;; This function uses a non-reentrant model
  8717 ;;
  8718                           
  8719                           
  8720                           ;psect for function _I2C_MasterWrite
  8721  0F87                     _I2C_MasterWrite:	
  8722                           
  8723                           ;incstack = 0
  8724                           ; Regs used in _I2C_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8725                           ;I2C_MasterWrite@pdata stored from wreg
  8726  0F87  0020               	movlb	0	; select bank0
  8727  0F88  00AE               	movwf	I2C_MasterWrite@pdata
  8728                           
  8729                           ;i2c.c: 604: static I2C_TRANSACTION_REQUEST_BLOCK trBlock;
  8730                           ;i2c.c: 607: if (i2c_object.trStatus.s.full != 1)
  8731  0F89  1850               	btfsc	_i2c_object+2,0
  8732  0F8A  2FA8               	goto	l3248
  8733                           
  8734                           ;i2c.c: 608: {
  8735                           ;i2c.c: 609: I2C_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  8736  0F8B  082E               	movf	I2C_MasterWrite@pdata,w
  8737  0F8C  00AC               	movwf	??_I2C_MasterWrite
  8738  0F8D  082C               	movf	??_I2C_MasterWrite,w
  8739  0F8E  00A1               	movwf	I2C_MasterWriteTRBBuild@pdata
  8740  0F8F  0828               	movf	I2C_MasterWrite@length,w
  8741  0F90  00AD               	movwf	??_I2C_MasterWrite+1
  8742  0F91  082D               	movf	??_I2C_MasterWrite+1,w
  8743  0F92  00A2               	movwf	I2C_MasterWriteTRBBuild@length
  8744  0F93  082A               	movf	I2C_MasterWrite@address+1,w
  8745  0F94  00A4               	movwf	I2C_MasterWriteTRBBuild@address+1
  8746  0F95  0829               	movf	I2C_MasterWrite@address,w
  8747  0F96  00A3               	movwf	I2C_MasterWriteTRBBuild@address
  8748  0F97  30BE               	movlw	(low (I2C_MasterWrite@trBlock| 0))& (0+255)
  8749  0F98  318F  271A  318F   	fcall	_I2C_MasterWriteTRBBuild
  8750                           
  8751                           ;i2c.c: 610: I2C_MasterTRBInsert(1, &trBlock, pflag);
  8752  0F9B  30BE               	movlw	(low (I2C_MasterWrite@trBlock| 0))& (0+255)
  8753  0F9C  0020               	movlb	0	; select bank0
  8754  0F9D  00AC               	movwf	??_I2C_MasterWrite
  8755  0F9E  082C               	movf	??_I2C_MasterWrite,w
  8756  0F9F  00A1               	movwf	I2C_MasterTRBInsert@ptrb_list
  8757  0FA0  082B               	movf	I2C_MasterWrite@pflag,w
  8758  0FA1  00AD               	movwf	??_I2C_MasterWrite+1
  8759  0FA2  082D               	movf	??_I2C_MasterWrite+1,w
  8760  0FA3  00A2               	movwf	I2C_MasterTRBInsert@pflag
  8761  0FA4  3001               	movlw	1
  8762  0FA5  3187  2713         	fcall	_I2C_MasterTRBInsert
  8763                           
  8764                           ;i2c.c: 611: }
  8765  0FA7  0008               	return
  8766  0FA8                     l3248:	
  8767                           
  8768                           ;i2c.c: 612: else
  8769                           ;i2c.c: 613: {
  8770                           ;i2c.c: 614: *pflag = I2C_MESSAGE_FAIL;
  8771  0FA8  0020               	movlb	0	; select bank0
  8772  0FA9  082B               	movf	I2C_MasterWrite@pflag,w
  8773  0FAA  0086               	movwf	6
  8774  0FAB  0187               	clrf	7
  8775  0FAC  0181               	clrf	1
  8776  0FAD  0A81               	incf	1,f
  8777  0FAE  0008               	return
  8778  0FAF                     __end_of_I2C_MasterWrite:	
  8779                           
  8780                           	psect	text23
  8781  0758                     __ptext23:	
  8782 ;; *************** function _I2CRead *****************
  8783 ;; Defined at:
  8784 ;;		line 35 in file "lib.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;  pdata           1    wreg     PTR unsigned char 
  8787 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
  8788 ;;  registerAddr    1    8[BANK0 ] unsigned char 
  8789 ;;  length          1    9[BANK0 ] unsigned char 
  8790 ;;  address         2   10[BANK0 ] unsigned int 
  8791 ;; Auto vars:     Size  Location     Type
  8792 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  8793 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
  8794 ;;  readTRB         8   16[BANK0 ] struct .[2]
  8795 ;;  status          1   24[BANK0 ] enum E12012
  8796 ;;  readBuffer      1   15[BANK0 ] unsigned char [1]
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  1    wreg      void 
  8799 ;; Registers used:
  8800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8806 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;Total ram usage:       17 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    6
  8813 ;; This function calls:
  8814 ;;		_I2C_MasterReadTRBBuild
  8815 ;;		_I2C_MasterTRBInsert
  8816 ;;		_I2C_MasterWriteTRBBuild
  8817 ;; This function is called by:
  8818 ;;		_Clock_Read
  8819 ;;		_Acc_Initialize
  8820 ;;		_Acc_ProcessClickSrc
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           
  8825                           ;psect for function _I2CRead
  8826  0758                     _I2CRead:	
  8827                           
  8828                           ;incstack = 0
  8829                           ; Regs used in _I2CRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8830                           ;I2CRead@pdata stored from wreg
  8831  0758  0020               	movlb	0	; select bank0
  8832  0759  00AE               	movwf	I2CRead@pdata
  8833                           
  8834                           ;lib.c: 40: I2C_MESSAGE_STATUS status = I2C_MESSAGE_PENDING;
  8835  075A  3002               	movlw	2
  8836  075B  00AC               	movwf	??_I2CRead
  8837  075C  082C               	movf	??_I2CRead,w
  8838  075D  00B8               	movwf	I2CRead@status
  8839                           
  8840                           ;lib.c: 41: I2C_TRANSACTION_REQUEST_BLOCK readTRB[2];
  8841                           ;lib.c: 42: uint8_t readBuffer[1];
  8842                           ;lib.c: 44: readBuffer[0] = registerAddress;
  8843  075E  0828               	movf	I2CRead@registerAddress,w
  8844  075F  00AC               	movwf	??_I2CRead
  8845  0760  082C               	movf	??_I2CRead,w
  8846  0761  00AF               	movwf	I2CRead@readBuffer
  8847                           
  8848                           ;lib.c: 46: I2C_MasterWriteTRBBuild( &readTRB[0],
  8849                           ;lib.c: 47: readBuffer,
  8850                           ;lib.c: 48: 1,
  8851                           ;lib.c: 49: address);
  8852  0762  302F               	movlw	(low (I2CRead@readBuffer| 0))& (0+255)
  8853  0763  00AC               	movwf	??_I2CRead
  8854  0764  082C               	movf	??_I2CRead,w
  8855  0765  00A1               	movwf	I2C_MasterWriteTRBBuild@pdata
  8856  0766  01A2               	clrf	I2C_MasterWriteTRBBuild@length
  8857  0767  0AA2               	incf	I2C_MasterWriteTRBBuild@length,f
  8858  0768  082B               	movf	I2CRead@address+1,w
  8859  0769  00A4               	movwf	I2C_MasterWriteTRBBuild@address+1
  8860  076A  082A               	movf	I2CRead@address,w
  8861  076B  00A3               	movwf	I2C_MasterWriteTRBBuild@address
  8862  076C  3030               	movlw	(low (I2CRead@readTRB| 0))& (0+255)
  8863  076D  318F  271A  3187   	fcall	_I2C_MasterWriteTRBBuild
  8864                           
  8865                           ;lib.c: 51: I2C_MasterReadTRBBuild( &readTRB[1],
  8866                           ;lib.c: 52: pdata,
  8867                           ;lib.c: 53: 2,
  8868                           ;lib.c: 54: address);
  8869  0770  0020               	movlb	0	; select bank0
  8870  0771  082E               	movf	I2CRead@pdata,w
  8871  0772  00AC               	movwf	??_I2CRead
  8872  0773  082C               	movf	??_I2CRead,w
  8873  0774  00A1               	movwf	I2C_MasterReadTRBBuild@pdata
  8874  0775  3002               	movlw	2
  8875  0776  00AD               	movwf	??_I2CRead+1
  8876  0777  082D               	movf	??_I2CRead+1,w
  8877  0778  00A2               	movwf	I2C_MasterReadTRBBuild@length
  8878  0779  082B               	movf	I2CRead@address+1,w
  8879  077A  00A4               	movwf	I2C_MasterReadTRBBuild@address+1
  8880  077B  082A               	movf	I2CRead@address,w
  8881  077C  00A3               	movwf	I2C_MasterReadTRBBuild@address
  8882  077D  3034               	movlw	(low ((I2CRead@readTRB| 0+4)))& (0+255)
  8883  077E  318F  275F  3187   	fcall	_I2C_MasterReadTRBBuild
  8884  0781                     l3210:	
  8885                           ;lib.c: 56: while(status != I2C_MESSAGE_FAIL)
  8886                           
  8887  0781  0020               	movlb	0	; select bank0
  8888  0782  0338               	decf	I2CRead@status,w
  8889  0783  1903               	btfsc	3,2
  8890  0784  0008               	return
  8891                           
  8892                           ;lib.c: 57: {
  8893                           ;lib.c: 58: I2C_MasterTRBInsert(2, readTRB, &status);
  8894  0785  3030               	movlw	(low (I2CRead@readTRB| 0))& (0+255)
  8895  0786  0020               	movlb	0	; select bank0
  8896  0787  00AC               	movwf	??_I2CRead
  8897  0788  082C               	movf	??_I2CRead,w
  8898  0789  00A1               	movwf	I2C_MasterTRBInsert@ptrb_list
  8899  078A  3038               	movlw	(low (I2CRead@status| 0))& (0+255)
  8900  078B  00AD               	movwf	??_I2CRead+1
  8901  078C  082D               	movf	??_I2CRead+1,w
  8902  078D  00A2               	movwf	I2C_MasterTRBInsert@pflag
  8903  078E  3002               	movlw	2
  8904  078F  3187  2713  3187   	fcall	_I2C_MasterTRBInsert
  8905  0792                     l3204:	
  8906                           ;lib.c: 61: while(status == I2C_MESSAGE_PENDING);
  8907                           
  8908  0792  3002               	movlw	2
  8909  0793  0020               	movlb	0	; select bank0
  8910  0794  0638               	xorwf	I2CRead@status,w
  8911  0795  1903               	btfsc	3,2
  8912  0796  2F92               	goto	l3204
  8913                           
  8914                           ;lib.c: 63: if (status == I2C_MESSAGE_COMPLETE)
  8915  0797  0838               	movf	I2CRead@status,w
  8916  0798  1903               	btfsc	3,2
  8917  0799  0008               	return
  8918  079A  2F81               	goto	l3210
  8919  079B                     __end_of_I2CRead:	
  8920                           ;lib.c: 64: break;
  8921                           
  8922                           
  8923                           	psect	text24
  8924  0F1A                     __ptext24:	
  8925 ;; *************** function _I2C_MasterWriteTRBBuild *****************
  8926 ;; Defined at:
  8927 ;;		line 707 in file "mcc_generated_files/i2c.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  ptrb            1    wreg     PTR struct .
  8930 ;;		 -> I2CRead@readTRB(8), I2C_MasterWrite@trBlock(4), 
  8931 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  8932 ;;		 -> Acc_Initialize@writeBuffer(7), I2CRead@readBuffer(1), Clock_Write@writeBuffer(4), Clock_Initialize@writeBuffer(5
      +), 
  8933 ;;		 -> LED_Initialize@writeBuffer(3), LED_Row@writeBuffer(3), 
  8934 ;;  length          1    2[BANK0 ] unsigned char 
  8935 ;;  address         2    3[BANK0 ] unsigned int 
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;  ptrb            1    7[BANK0 ] PTR struct .
  8938 ;;		 -> I2CRead@readTRB(8), I2C_MasterWrite@trBlock(4), 
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      void 
  8941 ;; Registers used:
  8942 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8948 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;Total ram usage:        7 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:    5
  8955 ;; This function calls:
  8956 ;;		Nothing
  8957 ;; This function is called by:
  8958 ;;		_I2C_MasterWrite
  8959 ;;		_I2CRead
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           
  8964                           ;psect for function _I2C_MasterWriteTRBBuild
  8965  0F1A                     _I2C_MasterWriteTRBBuild:	
  8966                           
  8967                           ;incstack = 0
  8968                           ; Regs used in _I2C_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8969                           ;I2C_MasterWriteTRBBuild@ptrb stored from wreg
  8970  0F1A  0020               	movlb	0	; select bank0
  8971  0F1B  00A7               	movwf	I2C_MasterWriteTRBBuild@ptrb
  8972                           
  8973                           ;i2c.c: 713: ptrb->address = address << 1;
  8974  0F1C  0824               	movf	I2C_MasterWriteTRBBuild@address+1,w
  8975  0F1D  00A6               	movwf	??_I2C_MasterWriteTRBBuild+1
  8976  0F1E  0823               	movf	I2C_MasterWriteTRBBuild@address,w
  8977  0F1F  00A5               	movwf	??_I2C_MasterWriteTRBBuild
  8978  0F20  35A5               	lslf	??_I2C_MasterWriteTRBBuild,f
  8979  0F21  0DA6               	rlf	??_I2C_MasterWriteTRBBuild+1,f
  8980  0F22  0827               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8981  0F23  0086               	movwf	6
  8982  0F24  0187               	clrf	7
  8983  0F25  0825               	movf	??_I2C_MasterWriteTRBBuild,w
  8984  0F26  3FC0               	movwi [0]fsr1
  8985  0F27  0826               	movf	??_I2C_MasterWriteTRBBuild+1,w
  8986  0F28  3FC1               	movwi [1]fsr1
  8987                           
  8988                           ;i2c.c: 714: ptrb->length = length;
  8989  0F29  0822               	movf	I2C_MasterWriteTRBBuild@length,w
  8990  0F2A  00A5               	movwf	??_I2C_MasterWriteTRBBuild
  8991  0F2B  0827               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  8992  0F2C  3E02               	addlw	2
  8993  0F2D  0086               	movwf	6
  8994  0F2E  0187               	clrf	7
  8995  0F2F  0825               	movf	??_I2C_MasterWriteTRBBuild,w
  8996  0F30  0081               	movwf	1
  8997                           
  8998                           ;i2c.c: 715: ptrb->pbuffer = pdata;
  8999  0F31  0821               	movf	I2C_MasterWriteTRBBuild@pdata,w
  9000  0F32  00A5               	movwf	??_I2C_MasterWriteTRBBuild
  9001  0F33  0827               	movf	I2C_MasterWriteTRBBuild@ptrb,w
  9002  0F34  3E03               	addlw	3
  9003  0F35  0086               	movwf	6
  9004  0F36  0187               	clrf	7
  9005  0F37  0825               	movf	??_I2C_MasterWriteTRBBuild,w
  9006  0F38  0081               	movwf	1
  9007  0F39  0008               	return
  9008  0F3A                     __end_of_I2C_MasterWriteTRBBuild:	
  9009                           
  9010                           	psect	text25
  9011  0713                     __ptext25:	
  9012 ;; *************** function _I2C_MasterTRBInsert *****************
  9013 ;; Defined at:
  9014 ;;		line 641 in file "mcc_generated_files/i2c.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  count           1    wreg     unsigned char 
  9017 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
  9018 ;;		 -> I2CRead@readTRB(8), I2C_MasterRead@trBlock(4), I2C_MasterWrite@trBlock(4), 
  9019 ;;  pflag           1    2[BANK0 ] PTR enum E11987
  9020 ;;		 -> I2CRead@status(1), I2CWrite@status(1), 
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;  count           1    4[BANK0 ] unsigned char 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  1    wreg      void 
  9025 ;; Registers used:
  9026 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;Total ram usage:        4 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    5
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_I2C_MasterWrite
  9043 ;;		_I2CRead
  9044 ;;		_I2C_MasterRead
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function _I2C_MasterTRBInsert
  9050  0713                     _I2C_MasterTRBInsert:	
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _I2C_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9054                           ;I2C_MasterTRBInsert@count stored from wreg
  9055  0713  0020               	movlb	0	; select bank0
  9056  0714  00A4               	movwf	I2C_MasterTRBInsert@count
  9057                           
  9058                           ;i2c.c: 648: if (i2c_object.trStatus.s.full != 1)
  9059  0715  1850               	btfsc	_i2c_object+2,0
  9060  0716  2F47               	goto	l3186
  9061                           
  9062                           ;i2c.c: 649: {
  9063                           ;i2c.c: 650: *pflag = I2C_MESSAGE_PENDING;
  9064  0717  3002               	movlw	2
  9065  0718  00A3               	movwf	??_I2C_MasterTRBInsert
  9066  0719  0822               	movf	I2C_MasterTRBInsert@pflag,w
  9067  071A  0086               	movwf	6
  9068  071B  0187               	clrf	7
  9069  071C  0823               	movf	??_I2C_MasterTRBInsert,w
  9070  071D  0081               	movwf	1
  9071                           
  9072                           ;i2c.c: 652: i2c_object.pTrTail->ptrb_list = ptrb_list;
  9073  071E  0821               	movf	I2C_MasterTRBInsert@ptrb_list,w
  9074  071F  00A3               	movwf	??_I2C_MasterTRBInsert
  9075  0720  0A4E               	incf	_i2c_object,w
  9076  0721  0086               	movwf	6
  9077  0722  0187               	clrf	7
  9078  0723  0823               	movf	??_I2C_MasterTRBInsert,w
  9079  0724  0081               	movwf	1
  9080                           
  9081                           ;i2c.c: 653: i2c_object.pTrTail->count = count;
  9082  0725  0824               	movf	I2C_MasterTRBInsert@count,w
  9083  0726  00A3               	movwf	??_I2C_MasterTRBInsert
  9084  0727  084E               	movf	_i2c_object,w
  9085  0728  0086               	movwf	6
  9086  0729  0187               	clrf	7
  9087  072A  0823               	movf	??_I2C_MasterTRBInsert,w
  9088  072B  0081               	movwf	1
  9089                           
  9090                           ;i2c.c: 654: i2c_object.pTrTail->pTrFlag = pflag;
  9091  072C  0822               	movf	I2C_MasterTRBInsert@pflag,w
  9092  072D  00A3               	movwf	??_I2C_MasterTRBInsert
  9093  072E  084E               	movf	_i2c_object,w
  9094  072F  3E02               	addlw	2
  9095  0730  0086               	movwf	6
  9096  0731  0187               	clrf	7
  9097  0732  0823               	movf	??_I2C_MasterTRBInsert,w
  9098  0733  0081               	movwf	1
  9099                           
  9100                           ;i2c.c: 655: i2c_object.pTrTail++;
  9101  0734  3003               	movlw	3
  9102  0735  00A3               	movwf	??_I2C_MasterTRBInsert
  9103  0736  0823               	movf	??_I2C_MasterTRBInsert,w
  9104  0737  07CE               	addwf	_i2c_object,f
  9105                           
  9106                           ;i2c.c: 658: if (i2c_object.pTrTail == (i2c_tr_queue + 1))
  9107  0738  084E               	movf	_i2c_object,w
  9108  0739  3AC5               	xorlw	(low ((_i2c_tr_queue| 0+3)))& (0+255)
  9109  073A  1D03               	skipz
  9110  073B  2F40               	goto	l3182
  9111                           
  9112                           ;i2c.c: 659: {
  9113                           ;i2c.c: 661: i2c_object.pTrTail = i2c_tr_queue;
  9114  073C  30C2               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
  9115  073D  00A3               	movwf	??_I2C_MasterTRBInsert
  9116  073E  0823               	movf	??_I2C_MasterTRBInsert,w
  9117  073F  00CE               	movwf	_i2c_object
  9118  0740                     l3182:	
  9119                           
  9120                           ;i2c.c: 662: }
  9121                           ;i2c.c: 666: i2c_object.trStatus.s.empty = 0;
  9122  0740  10D0               	bcf	_i2c_object+2,1
  9123                           
  9124                           ;i2c.c: 669: if (i2c_object.pTrHead == i2c_object.pTrTail)
  9125  0741  084F               	movf	low ((_i2c_object| 0+1)),w
  9126  0742  064E               	xorwf	_i2c_object,w
  9127  0743  1D03               	skipz
  9128  0744  2F4C               	goto	l3188
  9129                           
  9130                           ;i2c.c: 670: {
  9131                           ;i2c.c: 672: i2c_object.trStatus.s.full = 1;
  9132  0745  1450               	bsf	_i2c_object+2,0
  9133                           
  9134                           ;i2c.c: 673: }
  9135                           ;i2c.c: 675: }
  9136  0746  2F4C               	goto	l3188
  9137  0747                     l3186:	
  9138                           
  9139                           ;i2c.c: 676: else
  9140                           ;i2c.c: 677: {
  9141                           ;i2c.c: 678: *pflag = I2C_MESSAGE_FAIL;
  9142  0747  0822               	movf	I2C_MasterTRBInsert@pflag,w
  9143  0748  0086               	movwf	6
  9144  0749  0187               	clrf	7
  9145  074A  0181               	clrf	1
  9146  074B  0A81               	incf	1,f
  9147  074C                     l3188:	
  9148                           
  9149                           ;i2c.c: 679: }
  9150                           ;i2c.c: 682: if (*pflag == I2C_MESSAGE_PENDING)
  9151  074C  0822               	movf	I2C_MasterTRBInsert@pflag,w
  9152  074D  0086               	movwf	6
  9153  074E  0187               	clrf	7
  9154  074F  3002               	movlw	2
  9155  0750  0601               	xorwf	1,w
  9156  0751  1D03               	btfss	3,2
  9157  0752  0008               	return
  9158  0753                     l3192:	
  9159                           ;i2c.c: 683: {
  9160                           ;i2c.c: 684: while(i2c_state != S_MASTER_IDLE);
  9161                           
  9162  0753  0865               	movf	_i2c_state,w
  9163  0754  1D03               	btfss	3,2
  9164  0755  2F53               	goto	l3192
  9165                           
  9166                           ;i2c.c: 685: {
  9167                           ;i2c.c: 688: PIR1bits.SSP1IF = 1;
  9168  0756  1590               	bsf	16,3	;volatile
  9169  0757  0008               	return
  9170  0758                     __end_of_I2C_MasterTRBInsert:	
  9171                           
  9172                           	psect	text26
  9173  0F5F                     __ptext26:	
  9174 ;; *************** function _I2C_MasterReadTRBBuild *****************
  9175 ;; Defined at:
  9176 ;;		line 694 in file "mcc_generated_files/i2c.c"
  9177 ;; Parameters:    Size  Location     Type
  9178 ;;  ptrb            1    wreg     PTR struct .
  9179 ;;		 -> I2CRead@readTRB(8), I2C_MasterRead@trBlock(4), 
  9180 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  9181 ;;		 -> Acc_ProcessClickSrc@dataBuffer(6), Acc_Initialize@dataBuffer(6), Clock_Read@dataBuffer(3), 
  9182 ;;  length          1    2[BANK0 ] unsigned char 
  9183 ;;  address         2    3[BANK0 ] unsigned int 
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  ptrb            1    7[BANK0 ] PTR struct .
  9186 ;;		 -> I2CRead@readTRB(8), I2C_MasterRead@trBlock(4), 
  9187 ;; Return value:  Size  Location     Type
  9188 ;;                  1    wreg      void 
  9189 ;; Registers used:
  9190 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        7 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    5
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_I2CRead
  9207 ;;		_I2C_MasterRead
  9208 ;; This function uses a non-reentrant model
  9209 ;;
  9210                           
  9211                           
  9212                           ;psect for function _I2C_MasterReadTRBBuild
  9213  0F5F                     _I2C_MasterReadTRBBuild:	
  9214                           
  9215                           ;incstack = 0
  9216                           ; Regs used in _I2C_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9217                           ;I2C_MasterReadTRBBuild@ptrb stored from wreg
  9218  0F5F  0020               	movlb	0	; select bank0
  9219  0F60  00A7               	movwf	I2C_MasterReadTRBBuild@ptrb
  9220                           
  9221                           ;i2c.c: 700: ptrb->address = address << 1;
  9222  0F61  0824               	movf	I2C_MasterReadTRBBuild@address+1,w
  9223  0F62  00A6               	movwf	??_I2C_MasterReadTRBBuild+1
  9224  0F63  0823               	movf	I2C_MasterReadTRBBuild@address,w
  9225  0F64  00A5               	movwf	??_I2C_MasterReadTRBBuild
  9226  0F65  35A5               	lslf	??_I2C_MasterReadTRBBuild,f
  9227  0F66  0DA6               	rlf	??_I2C_MasterReadTRBBuild+1,f
  9228  0F67  0827               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9229  0F68  0086               	movwf	6
  9230  0F69  0187               	clrf	7
  9231  0F6A  0825               	movf	??_I2C_MasterReadTRBBuild,w
  9232  0F6B  3FC0               	movwi [0]fsr1
  9233  0F6C  0826               	movf	??_I2C_MasterReadTRBBuild+1,w
  9234  0F6D  3FC1               	movwi [1]fsr1
  9235                           
  9236                           ;i2c.c: 702: ptrb->address |= 0x01;
  9237  0F6E  0827               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9238  0F6F  0086               	movwf	6
  9239  0F70  0187               	clrf	7
  9240  0F71  3001               	movlw	1
  9241  0F72  0481               	iorwf	1,f
  9242  0F73  3141               	addfsr 1,1
  9243  0F74  3000               	movlw	0
  9244  0F75  0481               	iorwf	1,f
  9245                           
  9246                           ;i2c.c: 703: ptrb->length = length;
  9247  0F76  0822               	movf	I2C_MasterReadTRBBuild@length,w
  9248  0F77  00A5               	movwf	??_I2C_MasterReadTRBBuild
  9249  0F78  0827               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9250  0F79  3E02               	addlw	2
  9251  0F7A  0086               	movwf	6
  9252  0F7B  0187               	clrf	7
  9253  0F7C  0825               	movf	??_I2C_MasterReadTRBBuild,w
  9254  0F7D  0081               	movwf	1
  9255                           
  9256                           ;i2c.c: 704: ptrb->pbuffer = pdata;
  9257  0F7E  0821               	movf	I2C_MasterReadTRBBuild@pdata,w
  9258  0F7F  00A5               	movwf	??_I2C_MasterReadTRBBuild
  9259  0F80  0827               	movf	I2C_MasterReadTRBBuild@ptrb,w
  9260  0F81  3E03               	addlw	3
  9261  0F82  0086               	movwf	6
  9262  0F83  0187               	clrf	7
  9263  0F84  0825               	movf	??_I2C_MasterReadTRBBuild,w
  9264  0F85  0081               	movwf	1
  9265  0F86  0008               	return
  9266  0F87                     __end_of_I2C_MasterReadTRBBuild:	
  9267                           
  9268                           	psect	intentry
  9269  0004                     __pintentry:	
  9270 ;; *************** function _INTERRUPT_InterruptManager *****************
  9271 ;; Defined at:
  9272 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;		None
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;		None
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      void 
  9279 ;; Registers used:
  9280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;Total ram usage:        1 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    4
  9293 ;; This function calls:
  9294 ;;		_I2C_BusCollisionISR
  9295 ;;		_I2C_ISR
  9296 ;;		_PIN_MANAGER_IOC
  9297 ;;		_TMR1_ISR
  9298 ;; This function is called by:
  9299 ;;		Interrupt level 1
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303  0004                     _INTERRUPT_InterruptManager:	
  9304                           
  9305                           ;incstack = 0
  9306  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9307                           
  9308                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9309  0005  3180               	pagesel	$
  9310  0006  0020               	movlb	0	; select bank0
  9311  0007  087F               	movf	127,w
  9312  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  9313                           
  9314                           ;interrupt_manager.c: 54: if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
  9315  0009  198B               	btfsc	11,3	;volatile
  9316  000A  1C0B               	btfss	11,0	;volatile
  9317  000B  2810               	goto	i1l291
  9318                           
  9319                           ;interrupt_manager.c: 55: {
  9320                           ;interrupt_manager.c: 56: PIN_MANAGER_IOC();
  9321  000C  318D  25B7  3180   	fcall	_PIN_MANAGER_IOC
  9322                           
  9323                           ;interrupt_manager.c: 57: }
  9324  000F  2832               	goto	i1l299
  9325  0010                     i1l291:	
  9326                           
  9327                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
  9328  0010  1F0B               	btfss	11,6	;volatile
  9329  0011  281C               	goto	i1l293
  9330  0012  0021               	movlb	1	; select bank1
  9331  0013  1D91               	btfss	17,3	;volatile
  9332  0014  281C               	goto	i1l293
  9333  0015  0020               	movlb	0	; select bank0
  9334  0016  1D91               	btfss	17,3	;volatile
  9335  0017  281C               	goto	i1l293
  9336                           
  9337                           ;interrupt_manager.c: 59: {
  9338                           ;interrupt_manager.c: 60: I2C_BusCollisionISR();
  9339  0018  318D  256E  3180   	fcall	_I2C_BusCollisionISR
  9340                           
  9341                           ;interrupt_manager.c: 61: }
  9342  001B  2832               	goto	i1l299
  9343  001C                     i1l293:	
  9344                           
  9345                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9346  001C  1F0B               	btfss	11,6	;volatile
  9347  001D  2828               	goto	i1l295
  9348  001E  0021               	movlb	1	; select bank1
  9349  001F  1D90               	btfss	16,3	;volatile
  9350  0020  2828               	goto	i1l295
  9351  0021  0020               	movlb	0	; select bank0
  9352  0022  1D90               	btfss	16,3	;volatile
  9353  0023  2828               	goto	i1l295
  9354                           
  9355                           ;interrupt_manager.c: 63: {
  9356                           ;interrupt_manager.c: 64: I2C_ISR();
  9357  0024  3182  22F7  3180   	fcall	_I2C_ISR
  9358                           
  9359                           ;interrupt_manager.c: 65: }
  9360  0027  2832               	goto	i1l299
  9361  0028                     i1l295:	
  9362                           
  9363                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
  9364  0028  1F0B               	btfss	11,6	;volatile
  9365  0029  2832               	goto	i1l299
  9366  002A  0021               	movlb	1	; select bank1
  9367  002B  1C10               	btfss	16,0	;volatile
  9368  002C  2832               	goto	i1l299
  9369  002D  0020               	movlb	0	; select bank0
  9370  002E  1C10               	btfss	16,0	;volatile
  9371  002F  2832               	goto	i1l299
  9372                           
  9373                           ;interrupt_manager.c: 67: {
  9374                           ;interrupt_manager.c: 68: TMR1_ISR();
  9375  0030  318E  261C         	fcall	_TMR1_ISR
  9376  0032                     i1l299:	
  9377                           ;interrupt_manager.c: 70: else
  9378                           ;interrupt_manager.c: 71: {
  9379                           
  9380                           ;interrupt_manager.c: 69: }
  9381                           
  9382  0032  0020               	movlb	0	; select bank0
  9383  0033  0820               	movf	??_INTERRUPT_InterruptManager,w
  9384  0034  00FF               	movwf	127
  9385  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9386  0036  0009               	retfie
  9387  0037                     __end_of_INTERRUPT_InterruptManager:	
  9388                           
  9389                           	psect	text28
  9390  0E1C                     __ptext28:	
  9391 ;; *************** function _TMR1_ISR *****************
  9392 ;; Defined at:
  9393 ;;		line 155 in file "mcc_generated_files/tmr1.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;		None
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;		None
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  1    wreg      void 
  9400 ;; Registers used:
  9401 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;Total ram usage:        0 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    3
  9414 ;; This function calls:
  9415 ;;		_TMR1_CallBack
  9416 ;; This function is called by:
  9417 ;;		_INTERRUPT_InterruptManager
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function _TMR1_ISR
  9423  0E1C                     _TMR1_ISR:	
  9424                           
  9425                           ;tmr1.c: 157: static volatile unsigned int CountCallBack = 0;
  9426                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
  9427                           
  9428                           ;incstack = 0
  9429                           ; Regs used in _TMR1_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9430  0E1C  0020               	movlb	0	; select bank0
  9431  0E1D  1010               	bcf	16,0	;volatile
  9432                           
  9433                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
  9434  0E1E  0854               	movf	_timer1ReloadVal+1,w	;volatile
  9435  0E1F  0097               	movwf	23	;volatile
  9436                           
  9437                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
  9438  0E20  0853               	movf	_timer1ReloadVal,w	;volatile
  9439  0E21  0096               	movwf	22	;volatile
  9440                           
  9441                           ;tmr1.c: 166: if (++CountCallBack >= 1)
  9442  0E22  3001               	movlw	1
  9443  0E23  0021               	movlb	1	; select bank1
  9444  0E24  07A0               	addwf	TMR1_ISR@CountCallBack^(0+128),f	;volatile
  9445  0E25  3000               	movlw	0
  9446  0E26  3DA1               	addwfc	(TMR1_ISR@CountCallBack+1)^(0+128),f	;volatile
  9447  0E27  0820               	movf	TMR1_ISR@CountCallBack^(0+128),w	;volatile
  9448  0E28  0421               	iorwf	(TMR1_ISR@CountCallBack+1)^(0+128),w	;volatile
  9449  0E29  1903               	btfsc	3,2
  9450  0E2A  0008               	return
  9451                           
  9452                           ;tmr1.c: 167: {
  9453                           ;tmr1.c: 169: TMR1_CallBack();
  9454  0E2B  318D  25AC         	fcall	_TMR1_CallBack
  9455                           
  9456                           ;tmr1.c: 172: CountCallBack = 0;
  9457  0E2D  0021               	movlb	1	; select bank1
  9458  0E2E  01A0               	clrf	TMR1_ISR@CountCallBack^(0+128)	;volatile
  9459  0E2F  01A1               	clrf	(TMR1_ISR@CountCallBack+1)^(0+128)	;volatile
  9460  0E30  0008               	return
  9461  0E31                     __end_of_TMR1_ISR:	
  9462                           
  9463                           	psect	text29
  9464  0DAC                     __ptext29:	
  9465 ;; *************** function _TMR1_CallBack *****************
  9466 ;; Defined at:
  9467 ;;		line 176 in file "mcc_generated_files/tmr1.c"
  9468 ;; Parameters:    Size  Location     Type
  9469 ;;		None
  9470 ;; Auto vars:     Size  Location     Type
  9471 ;;		None
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      void 
  9474 ;; Registers used:
  9475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;Total ram usage:        0 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    2
  9488 ;; This function calls:
  9489 ;;		Absolute function
  9490 ;;		_TMR1_DefaultInterruptHandler
  9491 ;;		_Tick
  9492 ;; This function is called by:
  9493 ;;		_TMR1_ISR
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           
  9498                           ;psect for function _TMR1_CallBack
  9499  0DAC                     _TMR1_CallBack:	
  9500                           
  9501                           ;tmr1.c: 179: if(TMR1_InterruptHandler)
  9502                           
  9503                           ;incstack = 0
  9504                           ; Regs used in _TMR1_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9505  0DAC  0021               	movlb	1	; select bank1
  9506  0DAD  0822               	movf	_TMR1_InterruptHandler^(0+128),w
  9507  0DAE  0423               	iorwf	(_TMR1_InterruptHandler+1)^(0+128),w
  9508  0DAF  1903               	btfsc	3,2
  9509  0DB0  0008               	return
  9510                           
  9511                           ;tmr1.c: 180: {
  9512                           ;tmr1.c: 181: TMR1_InterruptHandler();
  9513  0DB1  0823               	movf	(_TMR1_InterruptHandler+1)^(0+128),w
  9514  0DB2  008A               	movwf	10
  9515  0DB3  0822               	movf	_TMR1_InterruptHandler^(0+128),w
  9516  0DB4  000A               	callw
  9517  0DB5  318D               	pagesel	$
  9518  0DB6  0008               	return
  9519  0DB7                     __end_of_TMR1_CallBack:	
  9520                           
  9521                           	psect	text30
  9522  07FF                     __ptext30:	
  9523 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  9524 ;; Defined at:
  9525 ;;		line 189 in file "mcc_generated_files/tmr1.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;		None
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;		None
  9530 ;; Return value:  Size  Location     Type
  9531 ;;                  1    wreg      void 
  9532 ;; Registers used:
  9533 ;;		None
  9534 ;; Tracked objects:
  9535 ;;		On entry : 0/0
  9536 ;;		On exit  : 0/0
  9537 ;;		Unchanged: 0/0
  9538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9543 ;;Total ram usage:        0 bytes
  9544 ;; Hardware stack levels used:    1
  9545 ;; This function calls:
  9546 ;;		Nothing
  9547 ;; This function is called by:
  9548 ;;		_TMR1_Initialize
  9549 ;;		_TMR1_CallBack
  9550 ;; This function uses a non-reentrant model
  9551 ;;
  9552                           
  9553                           
  9554                           ;psect for function _TMR1_DefaultInterruptHandler
  9555  07FF                     _TMR1_DefaultInterruptHandler:	
  9556                           
  9557                           ;incstack = 0
  9558                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  9559  07FF  0008               	return
  9560  0800                     __end_of_TMR1_DefaultInterruptHandler:	
  9561                           
  9562                           	psect	text31
  9563  0614                     __ptext31:	
  9564 ;; *************** function _Tick *****************
  9565 ;; Defined at:
  9566 ;;		line 184 in file "main.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;		None
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;		None
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  1    wreg      void 
  9573 ;; Registers used:
  9574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;Total ram usage:        2 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    1
  9587 ;; This function calls:
  9588 ;;		___lwmod
  9589 ;;		___wmul
  9590 ;; This function is called by:
  9591 ;;		_main
  9592 ;;		_TMR1_CallBack
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           
  9597                           ;psect for function _Tick
  9598  0614                     _Tick:	
  9599                           
  9600                           ;main.c: 186: if(action > 0)
  9601                           
  9602                           ;incstack = 0
  9603                           ; Regs used in _Tick: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9604  0614  0020               	movlb	0	; select bank0
  9605  0615  0858               	movf	_action,w
  9606  0616  1D03               	btfss	3,2
  9607  0617  0008               	return
  9608  0618  2E65               	goto	i1l2550
  9609  0619                     i1l2522:	
  9610                           ;main.c: 190: {
  9611                           ;main.c: 191: case STATE_RUNNING:
  9612                           
  9613                           ;main.c: 189: switch(mainState)
  9614                           
  9615                           ;main.c: 187: return;
  9616                           
  9617                           
  9618                           ;main.c: 192: if((tick % (10 * SECOND_MULTIPLIER)) == 0)
  9619  0619  086B               	movf	_SECOND_MULTIPLIER,w
  9620  061A  00FC               	movwf	??_Tick
  9621  061B  01FD               	clrf	??_Tick+1
  9622  061C  087C               	movf	??_Tick,w
  9623  061D  00F0               	movwf	___wmul@multiplier
  9624  061E  087D               	movf	??_Tick+1,w
  9625  061F  00F1               	movwf	___wmul@multiplier+1
  9626  0620  300A               	movlw	10
  9627  0621  00F2               	movwf	___wmul@multiplicand
  9628  0622  3000               	movlw	0
  9629  0623  00F3               	movwf	___wmul@multiplicand+1
  9630  0624  318E  26C1  3186   	fcall	___wmul
  9631  0627  0871               	movf	?___wmul+1,w
  9632  0628  00F7               	movwf	___lwmod@divisor+1
  9633  0629  0870               	movf	?___wmul,w
  9634  062A  00F6               	movwf	___lwmod@divisor
  9635  062B  0021               	movlb	1	; select bank1
  9636  062C  0852               	movf	(_tick+1)^(0+128),w
  9637  062D  00F9               	movwf	___lwmod@dividend+1
  9638  062E  0851               	movf	_tick^(0+128),w
  9639  062F  00F8               	movwf	___lwmod@dividend
  9640  0630  3187  27D3  3186   	fcall	___lwmod
  9641  0633  0876               	movf	?___lwmod,w
  9642  0634  0477               	iorwf	?___lwmod+1,w
  9643  0635  1D03               	btfss	3,2
  9644  0636  2E3A               	goto	i1l2526
  9645                           
  9646                           ;main.c: 193: action = ACTION_GETTIME;
  9647  0637  0020               	movlb	0	; select bank0
  9648  0638  01D8               	clrf	_action
  9649  0639  0AD8               	incf	_action,f
  9650  063A                     i1l2526:	
  9651                           
  9652                           ;main.c: 194: tick++;
  9653  063A  3001               	movlw	1
  9654  063B  0021               	movlb	1	; select bank1
  9655  063C  07D1               	addwf	_tick^(0+128),f
  9656  063D  3000               	movlw	0
  9657  063E  3DD2               	addwfc	(_tick+1)^(0+128),f
  9658                           
  9659                           ;main.c: 195: break;
  9660  063F  0008               	return
  9661  0640                     i1l2528:	
  9662                           ;main.c: 196: case STATE_SET_MINS:
  9663                           
  9664                           
  9665                           ;main.c: 197: blank = (secondaryTick++ & 0x1);
  9666  0640  0020               	movlb	0	; select bank0
  9667  0641  0857               	movf	_secondaryTick,w
  9668  0642  3901               	andlw	1
  9669  0643  00FC               	movwf	??_Tick
  9670  0644  087C               	movf	??_Tick,w
  9671  0645  00D9               	movwf	_blank
  9672  0646  3001               	movlw	1
  9673  0647  00FC               	movwf	??_Tick
  9674  0648  087C               	movf	??_Tick,w
  9675  0649  07D7               	addwf	_secondaryTick,f
  9676                           
  9677                           ;main.c: 198: if(secondaryTick == 41)
  9678  064A  3029               	movlw	41
  9679  064B  0657               	xorwf	_secondaryTick,w
  9680  064C  1D03               	btfss	3,2
  9681  064D  0008               	return
  9682                           
  9683                           ;main.c: 199: {
  9684                           ;main.c: 200: secondaryTick = 0;
  9685  064E  01D7               	clrf	_secondaryTick
  9686                           
  9687                           ;main.c: 201: mainState = STATE_SET_HOURS;
  9688  064F  01DB               	clrf	_mainState
  9689  0650  0ADB               	incf	_mainState,f
  9690                           
  9691                           ;main.c: 202: }
  9692                           ;main.c: 203: break;
  9693  0651  0008               	return
  9694  0652                     i1l2538:	
  9695                           ;main.c: 204: case STATE_SET_HOURS:
  9696                           
  9697                           
  9698                           ;main.c: 205: blank = (secondaryTick++ & 0x1);
  9699  0652  0857               	movf	_secondaryTick,w
  9700  0653  3901               	andlw	1
  9701  0654  00FC               	movwf	??_Tick
  9702  0655  087C               	movf	??_Tick,w
  9703  0656  00D9               	movwf	_blank
  9704  0657  3001               	movlw	1
  9705  0658  00FC               	movwf	??_Tick
  9706  0659  087C               	movf	??_Tick,w
  9707  065A  07D7               	addwf	_secondaryTick,f
  9708                           
  9709                           ;main.c: 206: if(secondaryTick == 41)
  9710  065B  3029               	movlw	41
  9711  065C  0657               	xorwf	_secondaryTick,w
  9712  065D  1D03               	btfss	3,2
  9713  065E  0008               	return
  9714                           
  9715                           ;main.c: 207: {
  9716                           ;main.c: 208: action = ACTION_SETTIME;
  9717  065F  3002               	movlw	2
  9718  0660  00FC               	movwf	??_Tick
  9719  0661  087C               	movf	??_Tick,w
  9720  0662  00D8               	movwf	_action
  9721                           
  9722                           ;main.c: 209: mainState = STATE_RUNNING;
  9723  0663  01DB               	clrf	_mainState
  9724                           
  9725                           ;main.c: 212: }
  9726                           
  9727                           ;main.c: 210: }
  9728                           ;main.c: 211: break;
  9729  0664  0008               	return
  9730  0665                     i1l2550:	
  9731  0665  085B               	movf	_mainState,w
  9732                           
  9733                           ; Switch size 1, requested type "space"
  9734                           ; Number of cases is 3, Range of values is 0 to 2
  9735                           ; switch strategies available:
  9736                           ; Name         Instructions Cycles
  9737                           ; simple_byte           10     6 (average)
  9738                           ; direct_byte           12     6 (fixed)
  9739                           ; jumptable            260     6 (fixed)
  9740                           ;	Chosen strategy is simple_byte
  9741  0666  3A00               	xorlw	0	; case 0
  9742  0667  1903               	skipnz
  9743  0668  2E19               	goto	i1l2522
  9744  0669  3A01               	xorlw	1	; case 1
  9745  066A  1903               	skipnz
  9746  066B  2E52               	goto	i1l2538
  9747  066C  3A03               	xorlw	3	; case 2
  9748  066D  1903               	skipnz
  9749  066E  2E40               	goto	i1l2528
  9750  066F  2E70               	goto	i1l468
  9751  0670                     i1l468:	
  9752  0670  0008               	return
  9753  0671                     __end_of_Tick:	
  9754                           
  9755                           	psect	text32
  9756  0EC1                     __ptext32:	
  9757 ;; *************** function ___wmul *****************
  9758 ;; Defined at:
  9759 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9760 ;; Parameters:    Size  Location     Type
  9761 ;;  multiplier      2    0[COMMON] unsigned int 
  9762 ;;  multiplicand    2    2[COMMON] unsigned int 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  product         2    4[COMMON] unsigned int 
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  2    0[COMMON] unsigned int 
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9774 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;Total ram usage:        6 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; This function calls:
  9781 ;;		Nothing
  9782 ;; This function is called by:
  9783 ;;		_Tick
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           
  9788                           ;psect for function ___wmul
  9789  0EC1                     ___wmul:	
  9790                           
  9791                           ;incstack = 0
  9792                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9793  0EC1  01F4               	clrf	___wmul@product
  9794  0EC2  01F5               	clrf	___wmul@product+1
  9795  0EC3                     i1l2214:	
  9796  0EC3  1C70               	btfss	___wmul@multiplier,0
  9797  0EC4  2EC9               	goto	i1l696
  9798  0EC5  0872               	movf	___wmul@multiplicand,w
  9799  0EC6  07F4               	addwf	___wmul@product,f
  9800  0EC7  0873               	movf	___wmul@multiplicand+1,w
  9801  0EC8  3DF5               	addwfc	___wmul@product+1,f
  9802  0EC9                     i1l696:	
  9803  0EC9  3001               	movlw	1
  9804  0ECA                     u127_25:	
  9805  0ECA  35F2               	lslf	___wmul@multiplicand,f
  9806  0ECB  0DF3               	rlf	___wmul@multiplicand+1,f
  9807  0ECC  0B89               	decfsz	9,f
  9808  0ECD  2ECA               	goto	u127_25
  9809  0ECE  3001               	movlw	1
  9810  0ECF                     u128_25:	
  9811  0ECF  36F1               	lsrf	___wmul@multiplier+1,f
  9812  0ED0  0CF0               	rrf	___wmul@multiplier,f
  9813  0ED1  0B89               	decfsz	9,f
  9814  0ED2  2ECF               	goto	u128_25
  9815  0ED3  0870               	movf	___wmul@multiplier,w
  9816  0ED4  0471               	iorwf	___wmul@multiplier+1,w
  9817  0ED5  1D03               	btfss	3,2
  9818  0ED6  2EC3               	goto	i1l2214
  9819  0ED7  0875               	movf	___wmul@product+1,w
  9820  0ED8  00F1               	movwf	?___wmul+1
  9821  0ED9  0874               	movf	___wmul@product,w
  9822  0EDA  00F0               	movwf	?___wmul
  9823  0EDB  0008               	return
  9824  0EDC                     __end_of___wmul:	
  9825                           
  9826                           	psect	text33
  9827  07D3                     __ptext33:	
  9828 ;; *************** function ___lwmod *****************
  9829 ;; Defined at:
  9830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;  divisor         2    6[COMMON] unsigned int 
  9833 ;;  dividend        2    8[COMMON] unsigned int 
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  counter         1   11[COMMON] unsigned char 
  9836 ;; Return value:  Size  Location     Type
  9837 ;;                  2    6[COMMON] unsigned int 
  9838 ;; Registers used:
  9839 ;;		wreg, status,2, status,0
  9840 ;; Tracked objects:
  9841 ;;		On entry : 0/0
  9842 ;;		On exit  : 0/0
  9843 ;;		Unchanged: 0/0
  9844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9845 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;Total ram usage:        6 bytes
  9850 ;; Hardware stack levels used:    1
  9851 ;; This function calls:
  9852 ;;		Nothing
  9853 ;; This function is called by:
  9854 ;;		_Tick
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           
  9859                           ;psect for function ___lwmod
  9860  07D3                     ___lwmod:	
  9861                           
  9862                           ;incstack = 0
  9863                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9864  07D3  0876               	movf	___lwmod@divisor,w
  9865  07D4  0477               	iorwf	___lwmod@divisor+1,w
  9866  07D5  1903               	btfsc	3,2
  9867  07D6  2FFA               	goto	i1l2244
  9868  07D7  01FB               	clrf	___lwmod@counter
  9869  07D8  0AFB               	incf	___lwmod@counter,f
  9870  07D9                     i1l2234:	
  9871  07D9  1BF7               	btfsc	___lwmod@divisor+1,7
  9872  07DA  2FE5               	goto	i1l2236
  9873  07DB  3001               	movlw	1
  9874  07DC                     u131_25:	
  9875  07DC  35F6               	lslf	___lwmod@divisor,f
  9876  07DD  0DF7               	rlf	___lwmod@divisor+1,f
  9877  07DE  0B89               	decfsz	9,f
  9878  07DF  2FDC               	goto	u131_25
  9879  07E0  3001               	movlw	1
  9880  07E1  00FA               	movwf	??___lwmod
  9881  07E2  087A               	movf	??___lwmod,w
  9882  07E3  07FB               	addwf	___lwmod@counter,f
  9883  07E4  2FD9               	goto	i1l2234
  9884  07E5                     i1l2236:	
  9885  07E5  0877               	movf	___lwmod@divisor+1,w
  9886  07E6  0279               	subwf	___lwmod@dividend+1,w
  9887  07E7  1D03               	skipz
  9888  07E8  2FEB               	goto	u133_25
  9889  07E9  0876               	movf	___lwmod@divisor,w
  9890  07EA  0278               	subwf	___lwmod@dividend,w
  9891  07EB                     u133_25:	
  9892  07EB  1C03               	skipc
  9893  07EC  2FF1               	goto	i1l2240
  9894  07ED  0876               	movf	___lwmod@divisor,w
  9895  07EE  02F8               	subwf	___lwmod@dividend,f
  9896  07EF  0877               	movf	___lwmod@divisor+1,w
  9897  07F0  3BF9               	subwfb	___lwmod@dividend+1,f
  9898  07F1                     i1l2240:	
  9899  07F1  3001               	movlw	1
  9900  07F2                     u134_25:	
  9901  07F2  36F7               	lsrf	___lwmod@divisor+1,f
  9902  07F3  0CF6               	rrf	___lwmod@divisor,f
  9903  07F4  0B89               	decfsz	9,f
  9904  07F5  2FF2               	goto	u134_25
  9905  07F6  3001               	movlw	1
  9906  07F7  02FB               	subwf	___lwmod@counter,f
  9907  07F8  1D03               	btfss	3,2
  9908  07F9  2FE5               	goto	i1l2236
  9909  07FA                     i1l2244:	
  9910  07FA  0879               	movf	___lwmod@dividend+1,w
  9911  07FB  00F7               	movwf	?___lwmod+1
  9912  07FC  0878               	movf	___lwmod@dividend,w
  9913  07FD  00F6               	movwf	?___lwmod
  9914  07FE  0008               	return
  9915  07FF                     __end_of___lwmod:	
  9916                           
  9917                           	psect	text34
  9918  0DB7                     __ptext34:	
  9919 ;; *************** function _PIN_MANAGER_IOC *****************
  9920 ;; Defined at:
  9921 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  1    wreg      void 
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, pclath, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:        0 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    2
  9942 ;; This function calls:
  9943 ;;		_IOCCF2_ISR
  9944 ;;		_IOCCF3_ISR
  9945 ;; This function is called by:
  9946 ;;		_INTERRUPT_InterruptManager
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           
  9951                           ;psect for function _PIN_MANAGER_IOC
  9952  0DB7                     _PIN_MANAGER_IOC:	
  9953                           
  9954                           ;pin_manager.c: 135: if(IOCCFbits.IOCCF2 == 1)
  9955                           
  9956                           ;incstack = 0
  9957                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
  9958  0DB7  0027               	movlb	7	; select bank7
  9959  0DB8  1D19               	btfss	25,2	;volatile
  9960  0DB9  2DBD               	goto	i1l2754
  9961                           
  9962                           ;pin_manager.c: 136: {
  9963                           ;pin_manager.c: 137: IOCCF2_ISR();
  9964  0DBA  318D  25CF  318D   	fcall	_IOCCF2_ISR
  9965  0DBD                     i1l2754:	
  9966                           
  9967                           ;pin_manager.c: 138: }
  9968                           ;pin_manager.c: 141: if(IOCCFbits.IOCCF3 == 1)
  9969  0DBD  0027               	movlb	7	; select bank7
  9970  0DBE  1D99               	btfss	25,3	;volatile
  9971  0DBF  0008               	return
  9972                           
  9973                           ;pin_manager.c: 142: {
  9974                           ;pin_manager.c: 143: IOCCF3_ISR();
  9975  0DC0  318D  25DC         	fcall	_IOCCF3_ISR
  9976  0DC2  0008               	return
  9977  0DC3                     __end_of_PIN_MANAGER_IOC:	
  9978                           
  9979                           	psect	text35
  9980  0DDC                     __ptext35:	
  9981 ;; *************** function _IOCCF3_ISR *****************
  9982 ;; Defined at:
  9983 ;;		line 182 in file "mcc_generated_files/pin_manager.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;		None
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  1    wreg      void 
  9990 ;; Registers used:
  9991 ;;		wreg, status,2, status,0, pclath, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;Total ram usage:        0 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    1
 10004 ;; This function calls:
 10005 ;;		Absolute function
 10006 ;;		_IOCCF3_DefaultInterruptHandler
 10007 ;;		_SetTurn
 10008 ;; This function is called by:
 10009 ;;		_PIN_MANAGER_IOC
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function _IOCCF3_ISR
 10015  0DDC                     _IOCCF3_ISR:	
 10016                           
 10017                           ;pin_manager.c: 187: if(IOCCF3_InterruptHandler)
 10018                           
 10019                           ;incstack = 0
 10020                           ; Regs used in _IOCCF3_ISR: [wreg+status,2+status,0+pclath+cstack]
 10021  0DDC  0021               	movlb	1	; select bank1
 10022  0DDD  085E               	movf	_IOCCF3_InterruptHandler^(0+128),w
 10023  0DDE  045F               	iorwf	(_IOCCF3_InterruptHandler+1)^(0+128),w
 10024  0DDF  1903               	btfsc	3,2
 10025  0DE0  2DE6               	goto	i1l2688
 10026                           
 10027                           ;pin_manager.c: 188: {
 10028                           ;pin_manager.c: 189: IOCCF3_InterruptHandler();
 10029  0DE1  085F               	movf	(_IOCCF3_InterruptHandler+1)^(0+128),w
 10030  0DE2  008A               	movwf	10
 10031  0DE3  085E               	movf	_IOCCF3_InterruptHandler^(0+128),w
 10032  0DE4  000A               	callw
 10033  0DE5  318D               	pagesel	$
 10034  0DE6                     i1l2688:	
 10035                           
 10036                           ;pin_manager.c: 190: }
 10037                           ;pin_manager.c: 191: IOCCFbits.IOCCF3 = 0;
 10038  0DE6  0027               	movlb	7	; select bank7
 10039  0DE7  1199               	bcf	25,3	;volatile
 10040  0DE8  0008               	return
 10041  0DE9                     __end_of_IOCCF3_ISR:	
 10042                           
 10043                           	psect	text36
 10044  0003                     __ptext36:	
 10045 ;; *************** function _IOCCF3_DefaultInterruptHandler *****************
 10046 ;; Defined at:
 10047 ;;		line 204 in file "mcc_generated_files/pin_manager.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      void 
 10054 ;; Registers used:
 10055 ;;		None
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;Total ram usage:        0 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		_PIN_MANAGER_Initialize
 10071 ;;		_IOCCF3_ISR
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _IOCCF3_DefaultInterruptHandler
 10077  0003                     _IOCCF3_DefaultInterruptHandler:	
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _IOCCF3_DefaultInterruptHandler: []
 10081  0003  0008               	return
 10082  0004                     __end_of_IOCCF3_DefaultInterruptHandler:	
 10083                           
 10084                           	psect	text37
 10085  0D89                     __ptext37:	
 10086 ;; *************** function _SetTurn *****************
 10087 ;; Defined at:
 10088 ;;		line 215 in file "main.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;		None
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;		None
 10093 ;; Return value:  Size  Location     Type
 10094 ;;                  1    wreg      void 
 10095 ;; Registers used:
 10096 ;;		wreg, status,2
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10105 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;Total ram usage:        1 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; This function calls:
 10109 ;;		Nothing
 10110 ;; This function is called by:
 10111 ;;		_main
 10112 ;;		_IOCCF3_ISR
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           
 10117                           ;psect for function _SetTurn
 10118  0D89                     _SetTurn:	
 10119                           
 10120                           ;main.c: 217: secondaryTick = 0;
 10121                           
 10122                           ;incstack = 0
 10123                           ; Regs used in _SetTurn: [wreg+status,2]
 10124  0D89  0020               	movlb	0	; select bank0
 10125  0D8A  01D7               	clrf	_secondaryTick
 10126                           
 10127                           ;main.c: 218: action = 0;
 10128  0D8B  01D8               	clrf	_action
 10129                           
 10130                           ;main.c: 219: mainState = STATE_SET_MINS;
 10131  0D8C  3002               	movlw	2
 10132  0D8D  00F0               	movwf	??_SetTurn
 10133  0D8E  0870               	movf	??_SetTurn,w
 10134  0D8F  00DB               	movwf	_mainState
 10135  0D90  0008               	return
 10136  0D91                     __end_of_SetTurn:	
 10137                           
 10138                           	psect	text38
 10139  0DCF                     __ptext38:	
 10140 ;; *************** function _IOCCF2_ISR *****************
 10141 ;; Defined at:
 10142 ;;		line 152 in file "mcc_generated_files/pin_manager.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;		None
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;		None
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  1    wreg      void 
 10149 ;; Registers used:
 10150 ;;		wreg, status,2, status,0, pclath, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        0 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    1
 10163 ;; This function calls:
 10164 ;;		Absolute function
 10165 ;;		_IOCCF2_DefaultInterruptHandler
 10166 ;;		_TapTime
 10167 ;; This function is called by:
 10168 ;;		_PIN_MANAGER_IOC
 10169 ;; This function uses a non-reentrant model
 10170 ;;
 10171                           
 10172                           
 10173                           ;psect for function _IOCCF2_ISR
 10174  0DCF                     _IOCCF2_ISR:	
 10175                           
 10176                           ;pin_manager.c: 157: if(IOCCF2_InterruptHandler)
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _IOCCF2_ISR: [wreg+status,2+status,0+pclath+cstack]
 10180  0DCF  0021               	movlb	1	; select bank1
 10181  0DD0  0860               	movf	_IOCCF2_InterruptHandler^(0+128),w
 10182  0DD1  0461               	iorwf	(_IOCCF2_InterruptHandler+1)^(0+128),w
 10183  0DD2  1903               	btfsc	3,2
 10184  0DD3  2DD9               	goto	i1l2682
 10185                           
 10186                           ;pin_manager.c: 158: {
 10187                           ;pin_manager.c: 159: IOCCF2_InterruptHandler();
 10188  0DD4  0861               	movf	(_IOCCF2_InterruptHandler+1)^(0+128),w
 10189  0DD5  008A               	movwf	10
 10190  0DD6  0860               	movf	_IOCCF2_InterruptHandler^(0+128),w
 10191  0DD7  000A               	callw
 10192  0DD8  318D               	pagesel	$
 10193  0DD9                     i1l2682:	
 10194                           
 10195                           ;pin_manager.c: 160: }
 10196                           ;pin_manager.c: 161: IOCCFbits.IOCCF2 = 0;
 10197  0DD9  0027               	movlb	7	; select bank7
 10198  0DDA  1119               	bcf	25,2	;volatile
 10199  0DDB  0008               	return
 10200  0DDC                     __end_of_IOCCF2_ISR:	
 10201                           
 10202                           	psect	text39
 10203  0D6F                     __ptext39:	
 10204 ;; *************** function _IOCCF2_DefaultInterruptHandler *****************
 10205 ;; Defined at:
 10206 ;;		line 174 in file "mcc_generated_files/pin_manager.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;		None
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;		None
 10211 ;; Return value:  Size  Location     Type
 10212 ;;                  1    wreg      void 
 10213 ;; Registers used:
 10214 ;;		None
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;Total ram usage:        0 bytes
 10225 ;; Hardware stack levels used:    1
 10226 ;; This function calls:
 10227 ;;		Nothing
 10228 ;; This function is called by:
 10229 ;;		_PIN_MANAGER_Initialize
 10230 ;;		_IOCCF2_ISR
 10231 ;; This function uses a non-reentrant model
 10232 ;;
 10233                           
 10234                           
 10235                           ;psect for function _IOCCF2_DefaultInterruptHandler
 10236  0D6F                     _IOCCF2_DefaultInterruptHandler:	
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in _IOCCF2_DefaultInterruptHandler: []
 10240  0D6F  0008               	return
 10241  0D70                     __end_of_IOCCF2_DefaultInterruptHandler:	
 10242                           
 10243                           	psect	text40
 10244  0DFA                     __ptext40:	
 10245 ;; *************** function _TapTime *****************
 10246 ;; Defined at:
 10247 ;;		line 222 in file "main.c"
 10248 ;; Parameters:    Size  Location     Type
 10249 ;;		None
 10250 ;; Auto vars:     Size  Location     Type
 10251 ;;		None
 10252 ;; Return value:  Size  Location     Type
 10253 ;;                  1    wreg      void 
 10254 ;; Registers used:
 10255 ;;		wreg, status,2, status,0
 10256 ;; Tracked objects:
 10257 ;;		On entry : 0/0
 10258 ;;		On exit  : 0/0
 10259 ;;		Unchanged: 0/0
 10260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;Total ram usage:        1 bytes
 10266 ;; Hardware stack levels used:    1
 10267 ;; This function calls:
 10268 ;;		Nothing
 10269 ;; This function is called by:
 10270 ;;		_main
 10271 ;;		_IOCCF2_ISR
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           
 10276                           ;psect for function _TapTime
 10277  0DFA                     _TapTime:	
 10278                           
 10279                           ;main.c: 224: if(mainState != STATE_SET_HOURS && mainState != STATE_SET_MINS)
 10280                           
 10281                           ;incstack = 0
 10282                           ; Regs used in _TapTime: [wreg+status,2+status,0]
 10283  0DFA  0020               	movlb	0	; select bank0
 10284  0DFB  035B               	decf	_mainState,w
 10285  0DFC  1903               	btfsc	3,2
 10286  0DFD  2E02               	goto	i1l2562
 10287  0DFE  3002               	movlw	2
 10288  0DFF  065B               	xorwf	_mainState,w
 10289  0E00  1D03               	btfss	3,2
 10290  0E01  0008               	return
 10291  0E02                     i1l2562:	
 10292                           ;main.c: 225: return;
 10293                           
 10294                           
 10295                           ;main.c: 227: action = ACTION_READ_TAP;
 10296  0E02  3003               	movlw	3
 10297  0E03  00F0               	movwf	??_TapTime
 10298  0E04  0870               	movf	??_TapTime,w
 10299  0E05  00D8               	movwf	_action
 10300                           
 10301                           ;main.c: 228: secondaryTick &= 0x1;
 10302  0E06  3001               	movlw	1
 10303  0E07  00F0               	movwf	??_TapTime
 10304  0E08  0870               	movf	??_TapTime,w
 10305  0E09  05D7               	andwf	_secondaryTick,f
 10306  0E0A  0008               	return
 10307  0E0B                     __end_of_TapTime:	
 10308                           
 10309                           	psect	text41
 10310  02F7                     __ptext41:	
 10311 ;; *************** function _I2C_ISR *****************
 10312 ;; Defined at:
 10313 ;;		line 233 in file "mcc_generated_files/i2c.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;		None
 10316 ;; Auto vars:     Size  Location     Type
 10317 ;;		None
 10318 ;; Return value:  Size  Location     Type
 10319 ;;                  1    wreg      void 
 10320 ;; Registers used:
 10321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;Total ram usage:        4 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    1
 10334 ;; This function calls:
 10335 ;;		_I2C_FunctionComplete
 10336 ;;		_I2C_Stop
 10337 ;; This function is called by:
 10338 ;;		_INTERRUPT_InterruptManager
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           
 10343                           ;psect for function _I2C_ISR
 10344  02F7                     _I2C_ISR:	
 10345                           
 10346                           ;i2c.c: 236: static uint8_t *pi2c_buf_ptr;
 10347                           ;i2c.c: 237: static uint16_t i2c_address = 0;
 10348                           ;i2c.c: 238: static uint8_t i2c_bytes_left = 0;
 10349                           ;i2c.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 10350                           ;i2c.c: 241: PIR1bits.SSP1IF = 0;
 10351                           
 10352                           ;incstack = 0
 10353                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10354  02F7  0020               	movlb	0	; select bank0
 10355  02F8  1190               	bcf	16,3	;volatile
 10356                           
 10357                           ;i2c.c: 245: if(SSP1CON1bits.WCOL)
 10358  02F9  0024               	movlb	4	; select bank4
 10359  02FA  1F95               	btfss	21,7	;volatile
 10360  02FB  2C2A               	goto	i1l2894
 10361                           
 10362                           ;i2c.c: 246: {
 10363                           ;i2c.c: 248: SSP1CON1bits.WCOL = 0;
 10364  02FC  1395               	bcf	21,7	;volatile
 10365                           
 10366                           ;i2c.c: 249: i2c_state = S_MASTER_IDLE;
 10367  02FD  0020               	movlb	0	; select bank0
 10368  02FE  01E5               	clrf	_i2c_state
 10369                           
 10370                           ;i2c.c: 250: *(p_i2c_current->pTrFlag) = I2C_MESSAGE_FAIL;
 10371  02FF  0862               	movf	_p_i2c_current,w
 10372  0300  3E02               	addlw	2
 10373  0301  0086               	movwf	6
 10374  0302  0187               	clrf	7
 10375  0303  0801               	movf	1,w
 10376  0304  0086               	movwf	6
 10377  0305  0187               	clrf	7
 10378  0306  0181               	clrf	1
 10379  0307  0A81               	incf	1,f
 10380                           
 10381                           ;i2c.c: 253: p_i2c_current = (0);
 10382  0308  01E2               	clrf	_p_i2c_current
 10383                           
 10384                           ;i2c.c: 255: return;
 10385  0309  0008               	return
 10386  030A                     i1l181:	
 10387                           ;i2c.c: 260: {
 10388                           ;i2c.c: 261: case S_MASTER_IDLE:
 10389                           
 10390                           ;i2c.c: 256: }
 10391                           ;i2c.c: 259: switch(i2c_state)
 10392                           
 10393                           
 10394                           ;i2c.c: 263: if(i2c_object.trStatus.s.empty != 1)
 10395  030A  18D0               	btfsc	_i2c_object+2,1
 10396  030B  0008               	return
 10397                           
 10398                           ;i2c.c: 264: {
 10399                           ;i2c.c: 266: p_i2c_current = i2c_object.pTrHead;
 10400  030C  084F               	movf	low ((_i2c_object| 0+1)),w
 10401  030D  00F2               	movwf	??_I2C_ISR
 10402  030E  0872               	movf	??_I2C_ISR,w
 10403  030F  00E2               	movwf	_p_i2c_current
 10404                           
 10405                           ;i2c.c: 267: i2c_trb_count = i2c_object.pTrHead->count;
 10406  0310  084F               	movf	low ((_i2c_object| 0+1)),w
 10407  0311  0086               	movwf	6
 10408  0312  0187               	clrf	7
 10409  0313  0801               	movf	1,w
 10410  0314  00F2               	movwf	??_I2C_ISR
 10411  0315  0872               	movf	??_I2C_ISR,w
 10412  0316  00E4               	movwf	_i2c_trb_count
 10413                           
 10414                           ;i2c.c: 268: p_i2c_trb_current = i2c_object.pTrHead->ptrb_list;
 10415  0317  084F               	movf	low ((_i2c_object| 0+1)),w
 10416  0318  0086               	movwf	6
 10417  0319  0187               	clrf	7
 10418  031A  3F41               	moviw [1]fsr1
 10419  031B  00E3               	movwf	_p_i2c_trb_current
 10420                           
 10421                           ;i2c.c: 270: i2c_object.pTrHead++;
 10422  031C  3003               	movlw	3
 10423  031D  00F2               	movwf	??_I2C_ISR
 10424  031E  0872               	movf	??_I2C_ISR,w
 10425  031F  07CF               	addwf	low ((_i2c_object| 0+1)),f
 10426                           
 10427                           ;i2c.c: 273: if(i2c_object.pTrHead == (i2c_tr_queue + 1))
 10428  0320  084F               	movf	low ((_i2c_object| 0+1)),w
 10429  0321  3AC5               	xorlw	(low ((_i2c_tr_queue| 0+3)))& (0+255)
 10430  0322  1D03               	skipz
 10431  0323  2B28               	goto	i1l2782
 10432                           
 10433                           ;i2c.c: 274: {
 10434                           ;i2c.c: 276: i2c_object.pTrHead = i2c_tr_queue;
 10435  0324  30C2               	movlw	(low (_i2c_tr_queue| 0))& (0+255)
 10436  0325  00F2               	movwf	??_I2C_ISR
 10437  0326  0872               	movf	??_I2C_ISR,w
 10438  0327  00CF               	movwf	low ((_i2c_object| 0+1))
 10439  0328                     i1l2782:	
 10440                           
 10441                           ;i2c.c: 277: }
 10442                           ;i2c.c: 281: i2c_object.trStatus.s.full = 0;
 10443  0328  1050               	bcf	_i2c_object+2,0
 10444                           
 10445                           ;i2c.c: 284: if(i2c_object.pTrHead == i2c_object.pTrTail)
 10446  0329  084F               	movf	low ((_i2c_object| 0+1)),w
 10447  032A  064E               	xorwf	_i2c_object,w
 10448  032B  1903               	btfsc	3,2
 10449                           
 10450                           ;i2c.c: 285: {
 10451                           ;i2c.c: 287: i2c_object.trStatus.s.empty = 1;
 10452  032C  14D0               	bsf	_i2c_object+2,1
 10453                           
 10454                           ;i2c.c: 288: }
 10455                           ;i2c.c: 291: SSP1CON2bits.SEN = 1;
 10456  032D  0024               	movlb	4	; select bank4
 10457  032E  1416               	bsf	22,0	;volatile
 10458                           
 10459                           ;i2c.c: 294: i2c_state = S_MASTER_SEND_ADDR;
 10460  032F  3002               	movlw	2
 10461  0330  00F2               	movwf	??_I2C_ISR
 10462  0331  0872               	movf	??_I2C_ISR,w
 10463  0332  0020               	movlb	0	; select bank0
 10464  0333  00E5               	movwf	_i2c_state
 10465                           
 10466                           ;i2c.c: 295: }
 10467                           ;i2c.c: 297: break;
 10468  0334  0008               	return
 10469  0335                     i1l186:	
 10470                           ;i2c.c: 299: case S_MASTER_RESTART:
 10471                           
 10472                           
 10473                           ;i2c.c: 304: SSP1CON2bits.RSEN = 1;
 10474  0335  0024               	movlb	4	; select bank4
 10475  0336  1496               	bsf	22,1	;volatile
 10476                           
 10477                           ;i2c.c: 307: i2c_state = S_MASTER_SEND_ADDR;
 10478  0337  3002               	movlw	2
 10479  0338  00F2               	movwf	??_I2C_ISR
 10480  0339  0872               	movf	??_I2C_ISR,w
 10481  033A  0020               	movlb	0	; select bank0
 10482  033B  00E5               	movwf	_i2c_state
 10483                           
 10484                           ;i2c.c: 309: break;
 10485  033C  0008               	return
 10486  033D                     i1l187:	
 10487                           ;i2c.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 10488                           
 10489                           
 10490                           ;i2c.c: 313: if(SSP1CON2bits.ACKSTAT)
 10491  033D  0024               	movlb	4	; select bank4
 10492  033E  1F16               	btfss	22,6	;volatile
 10493  033F  2B49               	goto	i1l2794
 10494                           
 10495                           ;i2c.c: 314: {
 10496                           ;i2c.c: 315: i2c_object.i2cErrors++;
 10497  0340  3001               	movlw	1
 10498  0341  00F2               	movwf	??_I2C_ISR
 10499  0342  0872               	movf	??_I2C_ISR,w
 10500  0343  0020               	movlb	0	; select bank0
 10501  0344  07D2               	addwf	_i2c_object+4,f
 10502                           
 10503                           ;i2c.c: 316: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 10504  0345  3004               	movlw	4
 10505  0346  318E  265D         	fcall	_I2C_Stop
 10506                           
 10507                           ;i2c.c: 317: }
 10508  0348  0008               	return
 10509  0349                     i1l2794:	
 10510                           
 10511                           ;i2c.c: 318: else
 10512                           ;i2c.c: 319: {
 10513                           ;i2c.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 10514  0349  0020               	movlb	0	; select bank0
 10515  034A  0867               	movf	I2C_ISR@i2c_address+1,w
 10516  034B  00F3               	movwf	??_I2C_ISR+1
 10517  034C  0866               	movf	I2C_ISR@i2c_address,w
 10518  034D  00F2               	movwf	??_I2C_ISR
 10519  034E  36F3               	lsrf	??_I2C_ISR+1,f
 10520  034F  0CF2               	rrf	??_I2C_ISR,f
 10521  0350  0872               	movf	??_I2C_ISR,w
 10522  0351  0024               	movlb	4	; select bank4
 10523  0352  0091               	movwf	17	;volatile
 10524                           
 10525                           ;i2c.c: 324: if(i2c_address & 0x01)
 10526  0353  0020               	movlb	0	; select bank0
 10527  0354  1C66               	btfss	I2C_ISR@i2c_address,0
 10528  0355  2B5B               	goto	i1l2800
 10529                           
 10530                           ;i2c.c: 325: {
 10531                           ;i2c.c: 328: i2c_state = S_MASTER_10BIT_RESTART;
 10532  0356  300B               	movlw	11
 10533  0357  00F2               	movwf	??_I2C_ISR
 10534  0358  0872               	movf	??_I2C_ISR,w
 10535  0359  00E5               	movwf	_i2c_state
 10536                           
 10537                           ;i2c.c: 329: }
 10538  035A  0008               	return
 10539  035B                     i1l2800:	
 10540                           
 10541                           ;i2c.c: 330: else
 10542                           ;i2c.c: 331: {
 10543                           ;i2c.c: 333: i2c_state = S_MASTER_SEND_DATA;
 10544  035B  3003               	movlw	3
 10545  035C  00F2               	movwf	??_I2C_ISR
 10546  035D  0872               	movf	??_I2C_ISR,w
 10547  035E  00E5               	movwf	_i2c_state
 10548                           
 10549                           ;i2c.c: 334: }
 10550                           ;i2c.c: 335: }
 10551                           ;i2c.c: 337: break;
 10552  035F  0008               	return
 10553  0360                     i1l192:	
 10554                           ;i2c.c: 339: case S_MASTER_10BIT_RESTART:
 10555                           
 10556                           
 10557                           ;i2c.c: 341: if(SSP1CON2bits.ACKSTAT)
 10558  0360  0024               	movlb	4	; select bank4
 10559  0361  1F16               	btfss	22,6	;volatile
 10560  0362  2B6C               	goto	i1l193
 10561                           
 10562                           ;i2c.c: 342: {
 10563                           ;i2c.c: 343: i2c_object.i2cErrors++;
 10564  0363  3001               	movlw	1
 10565  0364  00F2               	movwf	??_I2C_ISR
 10566  0365  0872               	movf	??_I2C_ISR,w
 10567  0366  0020               	movlb	0	; select bank0
 10568  0367  07D2               	addwf	_i2c_object+4,f
 10569                           
 10570                           ;i2c.c: 344: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 10571  0368  3004               	movlw	4
 10572  0369  318E  265D         	fcall	_I2C_Stop
 10573                           
 10574                           ;i2c.c: 345: }
 10575  036B  0008               	return
 10576  036C                     i1l193:	
 10577                           
 10578                           ;i2c.c: 346: else
 10579                           ;i2c.c: 347: {
 10580                           ;i2c.c: 350: SSP1CON2bits.RSEN = 1;
 10581  036C  1496               	bsf	22,1	;volatile
 10582                           
 10583                           ;i2c.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 10584  036D  0020               	movlb	0	; select bank0
 10585  036E  0867               	movf	I2C_ISR@i2c_address+1,w
 10586  036F  00F3               	movwf	??_I2C_ISR+1
 10587  0370  0866               	movf	I2C_ISR@i2c_address,w
 10588  0371  00F2               	movwf	??_I2C_ISR
 10589  0372  0873               	movf	??_I2C_ISR+1,w
 10590  0373  00F2               	movwf	??_I2C_ISR
 10591  0374  01F3               	clrf	??_I2C_ISR+1
 10592  0375  3006               	movlw	6
 10593  0376  0572               	andwf	??_I2C_ISR,w
 10594  0377  00F4               	movwf	??_I2C_ISR+2
 10595  0378  3000               	movlw	0
 10596  0379  0573               	andwf	??_I2C_ISR+1,w
 10597  037A  00F5               	movwf	??_I2C_ISR+3
 10598  037B  30F0               	movlw	240
 10599  037C  0474               	iorwf	??_I2C_ISR+2,w
 10600  037D  00E6               	movwf	I2C_ISR@i2c_address
 10601  037E  3000               	movlw	0
 10602  037F  0475               	iorwf	??_I2C_ISR+3,w
 10603  0380  00E7               	movwf	I2C_ISR@i2c_address+1
 10604                           
 10605                           ;i2c.c: 357: i2c_address |= 0x0001;
 10606  0381  1466               	bsf	I2C_ISR@i2c_address,0
 10607                           
 10608                           ;i2c.c: 360: i2c_10bit_address_restart = 1;
 10609  0382  01DF               	clrf	I2C_ISR@i2c_10bit_address_restart
 10610  0383  0ADF               	incf	I2C_ISR@i2c_10bit_address_restart,f
 10611                           
 10612                           ;i2c.c: 363: i2c_state = S_MASTER_SEND_ADDR;
 10613  0384  3002               	movlw	2
 10614  0385  00F2               	movwf	??_I2C_ISR
 10615  0386  0872               	movf	??_I2C_ISR,w
 10616  0387  00E5               	movwf	_i2c_state
 10617                           
 10618                           ;i2c.c: 364: }
 10619                           ;i2c.c: 366: break;
 10620  0388  0008               	return
 10621  0389                     i1l2814:	
 10622                           ;i2c.c: 368: case S_MASTER_SEND_ADDR:
 10623                           
 10624                           
 10625                           ;i2c.c: 381: if(i2c_10bit_address_restart != 1)
 10626  0389  035F               	decf	I2C_ISR@i2c_10bit_address_restart,w
 10627  038A  1903               	btfsc	3,2
 10628  038B  2B9D               	goto	i1l2834
 10629                           
 10630                           ;i2c.c: 382: {
 10631                           ;i2c.c: 384: i2c_address = p_i2c_trb_current->address;
 10632  038C  0863               	movf	_p_i2c_trb_current,w
 10633  038D  0086               	movwf	6
 10634  038E  0187               	clrf	7
 10635  038F  3F40               	moviw [0]fsr1
 10636  0390  00E6               	movwf	I2C_ISR@i2c_address
 10637  0391  3F41               	moviw [1]fsr1
 10638  0392  00E7               	movwf	I2C_ISR@i2c_address+1
 10639                           
 10640                           ;i2c.c: 385: pi2c_buf_ptr = p_i2c_trb_current->pbuffer;
 10641  0393  0863               	movf	_p_i2c_trb_current,w
 10642  0394  0086               	movwf	6
 10643  0395  0187               	clrf	7
 10644  0396  3F43               	moviw [3]fsr1
 10645  0397  00E1               	movwf	I2C_ISR@pi2c_buf_ptr
 10646                           
 10647                           ;i2c.c: 386: i2c_bytes_left = p_i2c_trb_current->length;
 10648  0398  0863               	movf	_p_i2c_trb_current,w
 10649  0399  0086               	movwf	6
 10650  039A  0187               	clrf	7
 10651  039B  3F42               	moviw [2]fsr1
 10652  039C  00E0               	movwf	I2C_ISR@i2c_bytes_left
 10653  039D                     i1l2834:	
 10654                           ;i2c.c: 407: }
 10655                           ;i2c.c: 408: }
 10656                           
 10657                           ;i2c.c: 406: i2c_10bit_address_restart = 0;
 10658                           
 10659                           ;i2c.c: 404: i2c_state = S_MASTER_ACK_ADDR;
 10660                           
 10661                           ;i2c.c: 400: else
 10662                           ;i2c.c: 401: {
 10663                           ;i2c.c: 403: SSP1BUF = i2c_address;
 10664                           
 10665                           ;i2c.c: 399: }
 10666                           
 10667                           ;i2c.c: 398: i2c_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 10668                           
 10669                           ;i2c.c: 393: {
 10670                           ;i2c.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 10671                           
 10672                           ;i2c.c: 391: {
 10673                           ;i2c.c: 392: if (0 == i2c_10bit_address_restart)
 10674                           
 10675                           ;i2c.c: 387: }
 10676                           ;i2c.c: 390: if(!1 && (0x0 != i2c_address))
 10677                           
 10678                           
 10679                           ;i2c.c: 409: else
 10680                           ;i2c.c: 410: {
 10681                           ;i2c.c: 412: SSP1BUF = i2c_address;
 10682  039D  0866               	movf	I2C_ISR@i2c_address,w
 10683  039E  0024               	movlb	4	; select bank4
 10684  039F  0091               	movwf	17	;volatile
 10685                           
 10686                           ;i2c.c: 413: if(i2c_address & 0x01)
 10687  03A0  0020               	movlb	0	; select bank0
 10688  03A1  1C66               	btfss	I2C_ISR@i2c_address,0
 10689  03A2  2BA8               	goto	i1l2840
 10690                           
 10691                           ;i2c.c: 414: {
 10692                           ;i2c.c: 416: i2c_state = S_MASTER_ACK_ADDR;
 10693  03A3  3005               	movlw	5
 10694  03A4  00F2               	movwf	??_I2C_ISR
 10695  03A5  0872               	movf	??_I2C_ISR,w
 10696  03A6  00E5               	movwf	_i2c_state
 10697                           
 10698                           ;i2c.c: 417: }
 10699  03A7  0008               	return
 10700  03A8                     i1l2840:	
 10701                           
 10702                           ;i2c.c: 418: else
 10703                           ;i2c.c: 419: {
 10704                           ;i2c.c: 421: i2c_state = S_MASTER_SEND_DATA;
 10705  03A8  3003               	movlw	3
 10706  03A9  00F2               	movwf	??_I2C_ISR
 10707  03AA  0872               	movf	??_I2C_ISR,w
 10708  03AB  00E5               	movwf	_i2c_state
 10709                           
 10710                           ;i2c.c: 422: }
 10711                           ;i2c.c: 423: }
 10712                           ;i2c.c: 424: break;
 10713  03AC  0008               	return
 10714  03AD                     i1l203:	
 10715                           ;i2c.c: 426: case S_MASTER_SEND_DATA:
 10716                           
 10717                           
 10718                           ;i2c.c: 429: if(SSP1CON2bits.ACKSTAT)
 10719  03AD  0024               	movlb	4	; select bank4
 10720  03AE  1F16               	btfss	22,6	;volatile
 10721  03AF  2BBB               	goto	i1l2848
 10722                           
 10723                           ;i2c.c: 430: {
 10724                           ;i2c.c: 432: i2c_object.i2cErrors++;
 10725  03B0  3001               	movlw	1
 10726  03B1  00F2               	movwf	??_I2C_ISR
 10727  03B2  0872               	movf	??_I2C_ISR,w
 10728  03B3  0020               	movlb	0	; select bank0
 10729  03B4  07D2               	addwf	_i2c_object+4,f
 10730                           
 10731                           ;i2c.c: 435: SSP1CON2bits.ACKSTAT = 0;
 10732  03B5  0024               	movlb	4	; select bank4
 10733  03B6  1316               	bcf	22,6	;volatile
 10734                           
 10735                           ;i2c.c: 438: I2C_Stop(I2C_DATA_NO_ACK);
 10736  03B7  3005               	movlw	5
 10737  03B8  318E  265D         	fcall	_I2C_Stop
 10738                           
 10739                           ;i2c.c: 440: }
 10740  03BA  0008               	return
 10741  03BB                     i1l2848:	
 10742                           
 10743                           ;i2c.c: 441: else
 10744                           ;i2c.c: 442: {
 10745                           ;i2c.c: 444: if(i2c_bytes_left-- == 0U)
 10746  03BB  3001               	movlw	1
 10747  03BC  0020               	movlb	0	; select bank0
 10748  03BD  02E0               	subwf	I2C_ISR@i2c_bytes_left,f
 10749  03BE  0A60               	incf	I2C_ISR@i2c_bytes_left,w
 10750  03BF  1D03               	btfss	3,2
 10751  03C0  2BD5               	goto	i1l2856
 10752                           
 10753                           ;i2c.c: 445: {
 10754                           ;i2c.c: 449: p_i2c_trb_current++;
 10755  03C1  3004               	movlw	4
 10756  03C2  00F2               	movwf	??_I2C_ISR
 10757  03C3  0872               	movf	??_I2C_ISR,w
 10758  03C4  07E3               	addwf	_p_i2c_trb_current,f
 10759                           
 10760                           ;i2c.c: 452: if(--i2c_trb_count == 0)
 10761  03C5  3001               	movlw	1
 10762  03C6  02E4               	subwf	_i2c_trb_count,f
 10763  03C7  1D03               	btfss	3,2
 10764  03C8  2BCD               	goto	i1l207
 10765                           
 10766                           ;i2c.c: 453: {
 10767                           ;i2c.c: 454: I2C_Stop(I2C_MESSAGE_COMPLETE);
 10768  03C9  3000               	movlw	0
 10769  03CA  318E  265D         	fcall	_I2C_Stop
 10770                           
 10771                           ;i2c.c: 455: }
 10772  03CC  0008               	return
 10773  03CD                     i1l207:	
 10774                           
 10775                           ;i2c.c: 456: else
 10776                           ;i2c.c: 457: {
 10777                           ;i2c.c: 464: SSP1CON2bits.RSEN = 1;
 10778  03CD  0024               	movlb	4	; select bank4
 10779  03CE  1496               	bsf	22,1	;volatile
 10780                           
 10781                           ;i2c.c: 467: i2c_state = S_MASTER_SEND_ADDR;
 10782  03CF  3002               	movlw	2
 10783  03D0  00F2               	movwf	??_I2C_ISR
 10784  03D1  0872               	movf	??_I2C_ISR,w
 10785  03D2  0020               	movlb	0	; select bank0
 10786  03D3  00E5               	movwf	_i2c_state
 10787                           
 10788                           ;i2c.c: 469: }
 10789                           ;i2c.c: 470: }
 10790  03D4  0008               	return
 10791  03D5                     i1l2856:	
 10792                           
 10793                           ;i2c.c: 471: else
 10794                           ;i2c.c: 472: {
 10795                           ;i2c.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 10796  03D5  0861               	movf	I2C_ISR@pi2c_buf_ptr,w
 10797  03D6  0086               	movwf	6
 10798  03D7  0187               	clrf	7
 10799  03D8  0801               	movf	1,w
 10800  03D9  0024               	movlb	4	; select bank4
 10801  03DA  0091               	movwf	17	;volatile
 10802  03DB  3001               	movlw	1
 10803  03DC  00F2               	movwf	??_I2C_ISR
 10804  03DD  0872               	movf	??_I2C_ISR,w
 10805  03DE  0020               	movlb	0	; select bank0
 10806  03DF  07E1               	addwf	I2C_ISR@pi2c_buf_ptr,f
 10807                           
 10808                           ;i2c.c: 475: }
 10809                           ;i2c.c: 476: }
 10810                           ;i2c.c: 477: break;
 10811  03E0  0008               	return
 10812  03E1                     i1l210:	
 10813                           ;i2c.c: 479: case S_MASTER_ACK_ADDR:
 10814                           
 10815                           
 10816                           ;i2c.c: 482: if(SSP1CON2bits.ACKSTAT)
 10817  03E1  0024               	movlb	4	; select bank4
 10818  03E2  1F16               	btfss	22,6	;volatile
 10819  03E3  2BEF               	goto	i1l211
 10820                           
 10821                           ;i2c.c: 483: {
 10822                           ;i2c.c: 486: i2c_object.i2cErrors++;
 10823  03E4  3001               	movlw	1
 10824  03E5  00F2               	movwf	??_I2C_ISR
 10825  03E6  0872               	movf	??_I2C_ISR,w
 10826  03E7  0020               	movlb	0	; select bank0
 10827  03E8  07D2               	addwf	_i2c_object+4,f
 10828                           
 10829                           ;i2c.c: 489: I2C_Stop(I2C_MESSAGE_ADDRESS_NO_ACK);
 10830  03E9  3004               	movlw	4
 10831  03EA  318E  265D         	fcall	_I2C_Stop
 10832                           
 10833                           ;i2c.c: 492: SSP1CON2bits.ACKSTAT = 0;
 10834  03EC  0024               	movlb	4	; select bank4
 10835  03ED  1316               	bcf	22,6	;volatile
 10836                           
 10837                           ;i2c.c: 493: }
 10838  03EE  0008               	return
 10839  03EF                     i1l211:	
 10840                           
 10841                           ;i2c.c: 494: else
 10842                           ;i2c.c: 495: {
 10843                           ;i2c.c: 496: SSP1CON2bits.RCEN = 1;
 10844  03EF  1596               	bsf	22,3	;volatile
 10845                           
 10846                           ;i2c.c: 497: i2c_state = S_MASTER_ACK_RCV_DATA;
 10847  03F0  3008               	movlw	8
 10848  03F1  00F2               	movwf	??_I2C_ISR
 10849  03F2  0872               	movf	??_I2C_ISR,w
 10850  03F3  0020               	movlb	0	; select bank0
 10851  03F4  00E5               	movwf	_i2c_state
 10852                           
 10853                           ;i2c.c: 498: }
 10854                           ;i2c.c: 499: break;
 10855  03F5  0008               	return
 10856  03F6                     i1l2868:	
 10857                           ;i2c.c: 501: case S_MASTER_RCV_DATA:
 10858                           
 10859                           
 10860                           ;i2c.c: 506: i2c_state = S_MASTER_ACK_RCV_DATA;
 10861  03F6  3008               	movlw	8
 10862  03F7  00F2               	movwf	??_I2C_ISR
 10863  03F8  0872               	movf	??_I2C_ISR,w
 10864  03F9  00E5               	movwf	_i2c_state
 10865                           
 10866                           ;i2c.c: 509: SSP1CON2bits.RCEN = 1;
 10867  03FA  0024               	movlb	4	; select bank4
 10868  03FB  1596               	bsf	22,3	;volatile
 10869                           
 10870                           ;i2c.c: 511: break;
 10871  03FC  0008               	return
 10872  03FD                     i1l2872:	
 10873                           ;i2c.c: 513: case S_MASTER_ACK_RCV_DATA:
 10874                           
 10875                           
 10876                           ;i2c.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 10877  03FD  0024               	movlb	4	; select bank4
 10878  03FE  0811               	movf	17,w	;volatile
 10879  03FF  00F2               	movwf	??_I2C_ISR
 10880  0400  0020               	movlb	0	; select bank0
 10881  0401  0861               	movf	I2C_ISR@pi2c_buf_ptr,w
 10882  0402  0086               	movwf	6
 10883  0403  0187               	clrf	7
 10884  0404  0872               	movf	??_I2C_ISR,w
 10885  0405  0081               	movwf	1
 10886  0406  3001               	movlw	1
 10887  0407  00F2               	movwf	??_I2C_ISR
 10888  0408  0872               	movf	??_I2C_ISR,w
 10889  0409  07E1               	addwf	I2C_ISR@pi2c_buf_ptr,f
 10890                           
 10891                           ;i2c.c: 519: if(--i2c_bytes_left)
 10892  040A  3001               	movlw	1
 10893  040B  02E0               	subwf	I2C_ISR@i2c_bytes_left,f
 10894  040C  1903               	btfsc	3,2
 10895  040D  2C16               	goto	i1l215
 10896                           
 10897                           ;i2c.c: 520: {
 10898                           ;i2c.c: 526: SSP1CON2bits.ACKDT = 0;
 10899  040E  0024               	movlb	4	; select bank4
 10900  040F  1296               	bcf	22,5	;volatile
 10901                           
 10902                           ;i2c.c: 529: i2c_state = S_MASTER_RCV_DATA;
 10903  0410  3006               	movlw	6
 10904  0411  00F2               	movwf	??_I2C_ISR
 10905  0412  0872               	movf	??_I2C_ISR,w
 10906  0413  0020               	movlb	0	; select bank0
 10907  0414  00E5               	movwf	_i2c_state
 10908                           
 10909                           ;i2c.c: 530: }
 10910  0415  2C1A               	goto	i1l2884
 10911  0416                     i1l215:	
 10912                           
 10913                           ;i2c.c: 531: else
 10914                           ;i2c.c: 532: {
 10915                           ;i2c.c: 536: SSP1CON2bits.ACKDT = 1;
 10916  0416  0024               	movlb	4	; select bank4
 10917  0417  1696               	bsf	22,5	;volatile
 10918                           
 10919                           ;i2c.c: 538: I2C_FunctionComplete();
 10920  0418  318D  25E9         	fcall	_I2C_FunctionComplete
 10921  041A                     i1l2884:	
 10922                           
 10923                           ;i2c.c: 539: }
 10924                           ;i2c.c: 542: SSP1CON2bits.ACKEN = 1;
 10925  041A  0024               	movlb	4	; select bank4
 10926  041B  1616               	bsf	22,4	;volatile
 10927                           
 10928                           ;i2c.c: 543: break;
 10929  041C  0008               	return
 10930  041D                     i1l2886:	
 10931                           ;i2c.c: 545: case S_MASTER_RCV_STOP:
 10932                           
 10933                           
 10934                           ;i2c.c: 546: case S_MASTER_SEND_STOP:
 10935                           ;i2c.c: 549: I2C_Stop(I2C_MESSAGE_COMPLETE);
 10936  041D  3000               	movlw	0
 10937  041E  318E  265D         	fcall	_I2C_Stop
 10938                           
 10939                           ;i2c.c: 550: break;
 10940  0420  0008               	return
 10941  0421                     i1l2888:	
 10942                           ;i2c.c: 552: default:
 10943                           
 10944                           
 10945                           ;i2c.c: 556: i2c_object.i2cErrors++;
 10946  0421  3001               	movlw	1
 10947  0422  00F2               	movwf	??_I2C_ISR
 10948  0423  0872               	movf	??_I2C_ISR,w
 10949  0424  0020               	movlb	0	; select bank0
 10950  0425  07D2               	addwf	_i2c_object+4,f
 10951                           
 10952                           ;i2c.c: 557: I2C_Stop(I2C_LOST_STATE);
 10953  0426  3006               	movlw	6
 10954  0427  318E  265D         	fcall	_I2C_Stop
 10955                           
 10956                           ;i2c.c: 560: }
 10957                           
 10958                           ;i2c.c: 558: break;
 10959  0429  0008               	return
 10960  042A                     i1l2894:	
 10961  042A  0020               	movlb	0	; select bank0
 10962  042B  0865               	movf	_i2c_state,w
 10963                           
 10964                           ; Switch size 1, requested type "space"
 10965                           ; Number of cases is 11, Range of values is 0 to 11
 10966                           ; switch strategies available:
 10967                           ; Name         Instructions Cycles
 10968                           ; direct_byte           30     6 (fixed)
 10969                           ; simple_byte           34    18 (average)
 10970                           ; jumptable            260     6 (fixed)
 10971                           ;	Chosen strategy is direct_byte
 10972  042C  0084               	movwf	4
 10973  042D  300C               	movlw	12
 10974  042E  0204               	subwf	4,w
 10975  042F  1803               	skipnc
 10976  0430  2C21               	goto	i1l2888
 10977  0431  3188               	movlp	high i1S3892
 10978  0432  3504               	lslf	4,w
 10979  0433  3E00               	addlw	low i1S3892
 10980  0434  0082               	movwf	2
 10981  0435  0008               	return
 10982  0436                     __end_of_I2C_ISR:	
 10983                           
 10984                           	psect	swtext1
 10985  0800                     __pswtext1:	
 10986  0800                     i1S3892:	
 10987  0800  3183  2B0A         	ljmp	i1l181
 10988  0802  3183  2B35         	ljmp	i1l186
 10989  0804  3183  2B89         	ljmp	i1l2814
 10990  0806  3183  2BAD         	ljmp	i1l203
 10991  0808  3184  2C1D         	ljmp	i1l2886
 10992  080A  3183  2BE1         	ljmp	i1l210
 10993  080C  3183  2BF6         	ljmp	i1l2868
 10994  080E  3184  2C1D         	ljmp	i1l2886
 10995  0810  3183  2BFD         	ljmp	i1l2872
 10996  0812  3184  2C21         	ljmp	i1l2888
 10997  0814  3183  2B3D         	ljmp	i1l187
 10998  0816  3183  2B60         	ljmp	i1l192
 10999                           
 11000                           	psect	text42
 11001  0E5D                     __ptext42:	
 11002 ;; *************** function _I2C_Stop *****************
 11003 ;; Defined at:
 11004 ;;		line 581 in file "mcc_generated_files/i2c.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;  completion_c    1    wreg     enum E11987
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;  completion_c    1    1[COMMON] enum E11987
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      void 
 11011 ;; Registers used:
 11012 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11022 ;;Total ram usage:        2 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; This function calls:
 11025 ;;		Nothing
 11026 ;; This function is called by:
 11027 ;;		_I2C_ISR
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function _I2C_Stop
 11033  0E5D                     _I2C_Stop:	
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in _I2C_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 11037                           ;I2C_Stop@completion_code stored from wreg
 11038  0E5D  00F1               	movwf	I2C_Stop@completion_code
 11039                           
 11040                           ;i2c.c: 584: SSP1CON2bits.PEN = 1;
 11041  0E5E  0024               	movlb	4	; select bank4
 11042  0E5F  1516               	bsf	22,2	;volatile
 11043                           
 11044                           ;i2c.c: 587: if (p_i2c_current->pTrFlag != (0))
 11045  0E60  0020               	movlb	0	; select bank0
 11046  0E61  0862               	movf	_p_i2c_current,w
 11047  0E62  3E02               	addlw	2
 11048  0E63  0086               	movwf	6
 11049  0E64  0187               	clrf	7
 11050  0E65  0801               	movf	1,w
 11051  0E66  1903               	btfsc	3,2
 11052  0E67  2E73               	goto	i1l2696
 11053                           
 11054                           ;i2c.c: 588: {
 11055                           ;i2c.c: 590: *(p_i2c_current->pTrFlag) = completion_code;
 11056  0E68  0871               	movf	I2C_Stop@completion_code,w
 11057  0E69  00F0               	movwf	??_I2C_Stop
 11058  0E6A  0862               	movf	_p_i2c_current,w
 11059  0E6B  3E02               	addlw	2
 11060  0E6C  0086               	movwf	6
 11061  0E6D  0187               	clrf	7
 11062  0E6E  0801               	movf	1,w
 11063  0E6F  0086               	movwf	6
 11064  0E70  0187               	clrf	7
 11065  0E71  0870               	movf	??_I2C_Stop,w
 11066  0E72  0081               	movwf	1
 11067  0E73                     i1l2696:	
 11068                           
 11069                           ;i2c.c: 591: }
 11070                           ;i2c.c: 594: i2c_state = S_MASTER_IDLE;
 11071  0E73  01E5               	clrf	_i2c_state
 11072  0E74  0008               	return
 11073  0E75                     __end_of_I2C_Stop:	
 11074                           
 11075                           	psect	text43
 11076  0DE9                     __ptext43:	
 11077 ;; *************** function _I2C_FunctionComplete *****************
 11078 ;; Defined at:
 11079 ;;		line 563 in file "mcc_generated_files/i2c.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;		None
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;		None
 11084 ;; Return value:  Size  Location     Type
 11085 ;;                  1    wreg      void 
 11086 ;; Registers used:
 11087 ;;		wreg, status,2, status,0
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;Total ram usage:        1 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; This function calls:
 11100 ;;		Nothing
 11101 ;; This function is called by:
 11102 ;;		_I2C_ISR
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           
 11107                           ;psect for function _I2C_FunctionComplete
 11108  0DE9                     _I2C_FunctionComplete:	
 11109                           
 11110                           ;i2c.c: 567: p_i2c_trb_current++;
 11111                           
 11112                           ;incstack = 0
 11113                           ; Regs used in _I2C_FunctionComplete: [wreg+status,2+status,0]
 11114  0DE9  3004               	movlw	4
 11115  0DEA  00F0               	movwf	??_I2C_FunctionComplete
 11116  0DEB  0870               	movf	??_I2C_FunctionComplete,w
 11117  0DEC  0020               	movlb	0	; select bank0
 11118  0DED  07E3               	addwf	_p_i2c_trb_current,f
 11119                           
 11120                           ;i2c.c: 570: if(--i2c_trb_count == 0)
 11121  0DEE  3001               	movlw	1
 11122  0DEF  02E4               	subwf	_i2c_trb_count,f
 11123  0DF0  1D03               	btfss	3,2
 11124  0DF1  2DF7               	goto	i1l222
 11125                           
 11126                           ;i2c.c: 571: {
 11127                           ;i2c.c: 572: i2c_state = S_MASTER_SEND_STOP;
 11128  0DF2  3004               	movlw	4
 11129  0DF3  00F0               	movwf	??_I2C_FunctionComplete
 11130  0DF4  0870               	movf	??_I2C_FunctionComplete,w
 11131  0DF5  00E5               	movwf	_i2c_state
 11132                           
 11133                           ;i2c.c: 573: }
 11134  0DF6  0008               	return
 11135  0DF7                     i1l222:	
 11136                           
 11137                           ;i2c.c: 574: else
 11138                           ;i2c.c: 575: {
 11139                           ;i2c.c: 576: i2c_state = S_MASTER_RESTART;
 11140  0DF7  01E5               	clrf	_i2c_state
 11141  0DF8  0AE5               	incf	_i2c_state,f
 11142  0DF9  0008               	return
 11143  0DFA                     __end_of_I2C_FunctionComplete:	
 11144                           
 11145                           	psect	text44
 11146  0D6E                     __ptext44:	
 11147 ;; *************** function _I2C_BusCollisionISR *****************
 11148 ;; Defined at:
 11149 ;;		line 728 in file "mcc_generated_files/i2c.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;		None
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  1    wreg      void 
 11156 ;; Registers used:
 11157 ;;		None
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;Total ram usage:        0 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; This function calls:
 11170 ;;		Nothing
 11171 ;; This function is called by:
 11172 ;;		_INTERRUPT_InterruptManager
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           
 11177                           ;psect for function _I2C_BusCollisionISR
 11178  0D6E                     _I2C_BusCollisionISR:	
 11179                           
 11180                           ;incstack = 0
 11181                           ; Regs used in _I2C_BusCollisionISR: []
 11182  0D6E  0008               	return
 11183  0D6F                     __end_of_I2C_BusCollisionISR:	
 11184  007E                     btemp	set	126	;btemp
 11185  007E                     int$flags	set	126
 11186  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        68
    BSS         64
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     46      76
    BANK1            80      4      70
    BANK2            80      0      40
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    I2CRead@readTRB.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    i2c_tr_queue.pTrFlag	PTR enum E11987 size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    i2c_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), 

    I2CRead@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Clock_Read@dataBuffer(BANK0[3]), 

    I2CWrite@pdata	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_Initialize@writeBuffer(BANK0[7]), Clock_Write@writeBuffer(BANK0[4]), Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), 
		 -> LED_Row@writeBuffer(BANK0[3]), 

    Clock_Display@col	PTR unsigned int  size(1) Largest target is 20
		 -> DISPLAYBANK_col(BANK1[20]), 

    Clock_Display@row	PTR char  size(1) Largest target is 11
		 -> DISPLAYBANK_row(BANK1[11]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> Tick(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Tick(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    I2C_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), Clock_Write@writeBuffer(BANK0[4]), Clock_Initialize@writeBuffer(BANK0[5]), 
		 -> LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    I2C_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    I2C_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterWrite@trBlock(BANK1[4]), 

    I2C_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Clock_Read@dataBuffer(BANK0[3]), 

    I2C_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    I2C_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), 

    i2c_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    i2c_object.pTrTail.pTrFlag	PTR enum E11987 size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    i2c_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), 

    I2C_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), 

    I2C_MasterTRBInsert@pflag	PTR enum E11987 size(1) Largest target is 1
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), 

    F12099.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    I2C_MasterWrite@pflag	PTR enum E11987 size(1) Largest target is 1
		 -> I2CWrite@status(BANK0[1]), 

    I2C_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_Initialize@writeBuffer(BANK0[7]), Clock_Write@writeBuffer(BANK0[4]), Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), 
		 -> LED_Row@writeBuffer(BANK0[3]), 

    F12094.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    I2C_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), NULL(NULL[0]), 

    p_i2c_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    p_i2c_trb_current	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c_object.pTrHead.pTrFlag	PTR enum E11987 size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    i2c_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), 

    S281$pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    p_i2c_current.pbuffer	PTR unsigned char  size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    S293$pTrFlag	PTR enum E11987 size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    p_i2c_current.pTrFlag	PTR enum E11987 size(1) Largest target is 7
		 -> Acc_ProcessClickSrc@dataBuffer(BANK0[6]), Acc_Initialize@dataBuffer(BANK0[6]), Acc_Initialize@writeBuffer(BANK0[7]), I2CRead@readBuffer(BANK0[1]), 
		 -> I2CRead@status(BANK0[1]), I2CWrite@status(BANK0[1]), Clock_Read@dataBuffer(BANK0[3]), Clock_Write@writeBuffer(BANK0[4]), 
		 -> Clock_Initialize@writeBuffer(BANK0[5]), LED_Initialize@writeBuffer(BANK0[3]), LED_Row@writeBuffer(BANK0[3]), 

    S293$ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), 

    p_i2c_current.ptrb_list	PTR struct . size(1) Largest target is 10
		 -> I2CRead@readTRB(BANK0[8]), I2C_MasterRead@trBlock(BANK1[4]), I2C_MasterWrite@trBlock(BANK1[4]), 

    p_i2c_current	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S304$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[3]), 

    i2c_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[3]), 

    S304$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[3]), 

    i2c_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c_tr_queue(BANK1[3]), 

    IOCCF3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> SetTurn(), IOCCF3_DefaultInterruptHandler(), 

    IOCCF3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SetTurn(), Absolute function(), IOCCF3_DefaultInterruptHandler(), 

    IOCCF2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TapTime(), IOCCF2_DefaultInterruptHandler(), 

    IOCCF2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TapTime(), Absolute function(), IOCCF2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_CallBack->_Tick
    _Tick->___lwmod
    ___lwmod->___wmul
    _IOCCF3_ISR->_SetTurn
    _IOCCF2_ISR->_TapTime
    _I2C_ISR->_I2C_Stop

Critical Paths under _main in BANK0

    _main->_Acc_ProcessClickSrc
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF3_SetInterruptHandler
    _LED_Row->_I2CWrite
    _LED_Initialize->_I2CWrite
    _Clock_Write->_I2CWrite
    _Clock_Initialize->_Clock_Read
    _Acc_ProcessClickSrc->_Clock_Tap
    _Clock_Tap->_Clock_Display
    _Clock_Display->_Clock_Read
    _Clock_Read->_I2CRead
    _Acc_Initialize->_I2CRead
    _I2CWrite->_I2C_MasterWrite
    _I2C_MasterWrite->_I2C_MasterWriteTRBBuild
    _I2CRead->_I2C_MasterReadTRBBuild
    _I2CRead->_I2C_MasterWriteTRBBuild

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   43612
                                             44 BANK0      2     2      0
                                              0 BANK1      4     4      0
                     _Acc_Initialize
                _Acc_ProcessClickSrc
                      _Clock_Display
                   _Clock_Initialize
                        _Clock_Write
                              _Delay
         _IOCCF2_SetInterruptHandler
         _IOCCF3_SetInterruptHandler
                     _LED_Initialize
                            _LED_Row
                  _SYSTEM_Initialize
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     517
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     161
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     161
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     356
                                              3 BANK0      1     1      0
         _IOCCF2_SetInterruptHandler
         _IOCCF3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF3_SetInterruptHandler                           2     0      2     161
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF2_SetInterruptHandler                           2     0      2     161
                                              1 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LED_Row                                              8     6      2    4787
                                             24 BANK0      8     6      2
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _LED_Initialize                                       5     5      0    4165
                                             24 BANK0      5     5      0
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _Clock_Write                                          6     6      0    4137
                                             24 BANK0      6     6      0
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _Clock_Initialize                                     8     8      0    7606
                                             29 BANK0      8     8      0
                         _Clock_Read
                              _Delay
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (1) _Delay                                                3     3      0      71
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Acc_ProcessClickSrc                                  8     8      0    8435
                                             36 BANK0      8     8      0
                          _Clock_Tap
                            _I2CRead
 ---------------------------------------------------------------------------------
 (2) _Clock_Tap                                            2     2      0    5312
                                             34 BANK0      2     2      0
                      _Clock_Display
                            _IncHour
 ---------------------------------------------------------------------------------
 (1) _Clock_Display                                        5     5      0    5188
                                             29 BANK0      5     5      0
                         _Clock_Read
                            _IncHour
 ---------------------------------------------------------------------------------
 (2) _IncHour                                              1     1      0      93
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Clock_Read                                           4     4      0    3191
                                             25 BANK0      4     4      0
                            _I2CRead
 ---------------------------------------------------------------------------------
 (1) _Acc_Initialize                                      15    15      0    7775
                                             25 BANK0     15    15      0
                            _I2CRead
                           _I2CWrite
 ---------------------------------------------------------------------------------
 (2) _I2CWrite                                             9     6      3    3968
                                             15 BANK0      9     6      3
                    _I2C_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C_MasterWrite                                      7     3      4    1592
                                              8 BANK0      7     3      4
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _I2CRead                                             17    13      4    3040
                                              8 BANK0     17    13      4
             _I2C_MasterReadTRBBuild
                _I2C_MasterTRBInsert
            _I2C_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWriteTRBBuild                              7     3      4     636
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterTRBInsert                                  4     2      2     576
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterReadTRBBuild                               7     3      4     667
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     485
                                              0 BANK0      1     1      0
                _I2C_BusCollisionISR
                            _I2C_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR1_ISR                                             0     0      0     463
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR1_CallBack                                        0     0      0     463
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                               _Tick *
 ---------------------------------------------------------------------------------
 (10) _Tick                                                2     2      0     463
                                             12 COMMON     2     2      0
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     198
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             6     2      4     265
                                              6 COMMON     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF2_ISR
                         _IOCCF3_ISR
 ---------------------------------------------------------------------------------
 (9) _IOCCF3_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF3_DefaultInterruptHandler *
                            _SetTurn *
 ---------------------------------------------------------------------------------
 (10) _SetTurn                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOCCF3_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _IOCCF2_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF2_DefaultInterruptHandler *
                            _TapTime *
 ---------------------------------------------------------------------------------
 (10) _TapTime                                             1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOCCF2_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_ISR                                              4     4      0      22
                                              2 COMMON     4     4      0
               _I2C_FunctionComplete
                           _I2C_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C_Stop                                             2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C_FunctionComplete                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C_BusCollisionISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Acc_Initialize
     _I2CRead
       _I2C_MasterReadTRBBuild
       _I2C_MasterTRBInsert
       _I2C_MasterWriteTRBBuild
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Acc_ProcessClickSrc
     _Clock_Tap
       _Clock_Display
         _Clock_Read
           _I2CRead
             _I2C_MasterReadTRBBuild
             _I2C_MasterTRBInsert
             _I2C_MasterWriteTRBBuild
         _IncHour
       _IncHour
     _I2CRead
       _I2C_MasterReadTRBBuild
       _I2C_MasterTRBInsert
       _I2C_MasterWriteTRBBuild
   _Clock_Display
     _Clock_Read
       _I2CRead
         _I2C_MasterReadTRBBuild
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
     _IncHour
   _Clock_Initialize
     _Clock_Read
       _I2CRead
         _I2C_MasterReadTRBBuild
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
     _Delay
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Clock_Write
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _Delay
   _IOCCF2_SetInterruptHandler
   _IOCCF3_SetInterruptHandler
   _LED_Initialize
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _LED_Row
     _I2CWrite
       _I2C_MasterWrite
         _I2C_MasterTRBInsert
         _I2C_MasterWriteTRBBuild
   _SYSTEM_Initialize
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF2_SetInterruptHandler
       _IOCCF3_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _TMR1_SetInterruptHandler

 _INTERRUPT_InterruptManager (ROOT)
   _I2C_BusCollisionISR
   _I2C_ISR
     _I2C_FunctionComplete
     _I2C_Stop
   _PIN_MANAGER_IOC
     _IOCCF2_ISR
       Absolute function(Fake) *
       _IOCCF2_DefaultInterruptHandler *
       _TapTime *
     _IOCCF3_ISR
       Absolute function(Fake) *
       _IOCCF3_DefaultInterruptHandler *
       _SetTurn *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _Tick *
         ___lwmod
           ___wmul (ARG)
         ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2E      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      4      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      28       9       50.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C8      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C8      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jun 17 23:33:10 2019

                          Clock_Display@row 0041                                           pc 0002  
                     I2C_ISR@i2c_bytes_left 0060                                 __CFG_CP$OFF 0000  
                                        l20 0D86                       Clock_Initialize@start 003F  
                       ___wmul@multiplicand 0072                     ?_I2C_MasterReadTRBBuild 0021  
                               __CFG_LVP$ON 0000                                         _GIE 005F  
                            Clock_Tap@hours 0043                      Clock_Initialize@status 003E  
                           __end_of_I2C_ISR 0436                             _timer1ReloadVal 0053  
                           __end_of_I2CRead 079B                                         _min 0055  
                                       _sec 00A4                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
          ??_IOCCF2_DefaultInterruptHandler 0070             ?_IOCCF2_DefaultInterruptHandler 0070  
        __end_of_IOCCF3_SetInterruptHandler 0DA3                  _IOCCF3_SetInterruptHandler 0D9A  
                              __CFG_ZCD$OFF 0000                             __end_of_LED_Row 0614  
                       __end_of_Clock_Write 0F1A                                        l3210 0781  
                                      l3204 0792                                        l3300 00D6  
                                      l3320 0102                                        l3312 00F1  
                                      l3236 0E19                                        l3228 0E13  
                                      l3500 02BF                                        l3404 01D7  
                                      l3332 011D                                        l3324 010A  
                                      l3308 00E9                                        l3182 0740  
                                      l3430 0215                                        l3422 0202  
                                      l3414 01EF                                        l3406 01DC  
                                      l3350 014A                                        l3192 0753  
                                      l3248 0FA8                                        l3504 02C4  
                                      l3344 0138                                        l3336 0125  
                                      l3186 0747                                        l3506 02ED  
                                      l3290 00BF                                        l3258 0078  
                                      l3188 074C                                        l3470 0274  
                                      l3462 0261                                        l3454 024E  
                                      l3446 023B                                        l3438 0228  
                                      l3366 0170                                        l3358 015A  
                                      l3286 00B7                                        l3278 00A4  
                                      l3702 05F4                                        l3640 0F56  
                                      l3384 01A6                                        l3368 0179  
                                      l3378 0194                                        l3386 01AA  
                                      l3722 06E0                                        l3660 0FF6  
                                      l3652 0FE5                                        l3628 0E4A  
                                      l3724 06E1                                        l3716 06D6  
                                      l3708 060E                                        l3494 02AD  
                                      l3486 029A                                        l3478 0287  
                                      l3398 01C5                                        l3662 0FFC  
                                      l3814 0489                                        l3656 0FEB  
                                      l3824 04AA                                        l3850 04D3  
                                      l3842 04C2                                        l3860 04F8  
                                      l3836 04BC                                        l3862 04FD  
                                      l3870 0518                                        l3846 04CB  
                                      l3688 05C9                                        l3864 0501  
                                      l3856 04DC                                        l3858 04DF  
                                      l3868 050C                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u2600 06C8                      ??_I2C_FunctionComplete 0070  
                                      u2720 05B5                                        u2730 05B6  
                                      u2910 0507                                        u2920 0508  
                                      u2764 05F1                                        u2765 05F0  
                                      u2774 05FA                                        u2775 05F9  
                                      u2937 0E52                                        _PLLR 04D6  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _Tick 0614  
                                      _main 0436                                        _hour 0068  
                                      _tick 00D1                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                          __end_of_I2C_Stop 0E75                               __CFG_BOREN$ON 0000  
                          __end_of_I2CWrite 0F5F                                        start 0037  
                ??_TMR1_SetInterruptHandler 0023                               __CFG_MCLRE$ON 0000  
                           __end_of_IncHour 0E1C                             __end_of_TapTime 0E0B  
                                _Clock_Read 0EDC              __end_of_I2C_MasterReadTRBBuild 0F87  
                           __end_of_SetTurn 0D91                               __CFG_PLLEN$ON 0000  
                I2C_MasterReadTRBBuild@ptrb 0027              __size_of_OSCILLATOR_Initialize 0007  
                          ?_I2C_MasterWrite 0028                                       ?_Tick 0070  
             __end_of_OSCILLATOR_Initialize 0D89                         __size_of_IOCCF2_ISR 000D  
                       __size_of_IOCCF3_ISR 000D                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             _TMR1_StartTimer 0D70  
                                     _T1CON 0018                               _i2c_trb_count 0064  
                                     i1l210 03E1                                       i1l211 03EF  
                                     i1l203 03AD                                       i1l222 0DF7  
                                     i1l215 0416                                       i1l207 03CD  
                                     i1l181 030A                                       i1l192 0360  
                                     i1l193 036C                             __end_of___lwmod 07FF  
                                     i1l186 0335                                       i1l187 033D  
                                     i1l291 0010                                       i1l293 001C  
                                     i1l295 0028                                       i1l299 0032  
                                     i1l468 0670                                       i1l696 0EC9  
                                     _TMR1H 0017                                       _TMR1L 0016  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _Delay 0E46  
                    Clock_Display@fetchTime 003E                            __end_of_TMR1_ISR 0E31  
                                     _blank 0059                     __end_of_PIN_MANAGER_IOC 0DC3  
                                     main@i 00E4                            ??_Acc_Initialize 0039  
                   __end_of_TMR1_Initialize 0EC1                                       pclath 000A  
                               LED_Row@mask 0038                                       status 0003  
                                     wtemp0 007E                    I2C_MasterTRBInsert@count 0024  
                  I2C_MasterTRBInsert@pflag 0022                                  _i2c_object 004E  
                           __initialization 0039                                __end_of_Tick 0671  
                              __end_of_main 051B                   Acc_Initialize@writeBuffer 0041  
                            _LED_Initialize 079B                       __end_of_Clock_Display 02F7  
                                 ??_I2C_ISR 0072                                   ??_I2CRead 002C  
                            __CFG_LPBOR$OFF 0000                 ?_INTERRUPT_InterruptManager 0070  
                                    ??_Tick 007C                                      ??_main 004C  
                            I2CRead@address 002A                         _I2C_MasterTRBInsert 0713  
                        __size_of_Clock_Tap 0029                 I2C_MasterReadTRBBuild@pdata 0021  
                               _Clock_Write 0EFB                                   ??_LED_Row 003A  
                   _IOCCF2_InterruptHandler 00E0                                      ?_Delay 0070  
                  ?_I2C_MasterWriteTRBBuild 0021                              I2CRead@readTRB 0030  
               __end_of_Acc_ProcessClickSrc 0E46                                      i1S3892 0800  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                                      _T1GCON 0019  
                                 I2CWrite@i 0034                                      _RB4PPS 0E9C  
                                    _RB6PPS 0E9E                                      i1l2214 0EC3  
                                    i1l2240 07F1                                      _ODCONA 028C  
                                    i1l2234 07D9                                      _ODCONB 028D  
                                    _ODCONC 028E                                      i1l2236 07E5  
                                    i1l2244 07FA                                      i1l2522 0619  
                                    i1l2526 063A                                      i1l2550 0665  
                                    i1l2800 035B                                      i1l2528 0640  
                                    i1l2562 0E02                                      i1l2538 0652  
                                    i1l2814 0389                                      i1l2840 03A8  
                                    i1l2834 039D                                      i1l2682 0DD9  
                                    i1l2754 0DBD                                      u131_25 07DC  
                                    i1l2782 0328                                      i1l2696 0E73  
                                    i1l2872 03FD                                      i1l2856 03D5  
                                    i1l2848 03BB                                      i1l2688 0DE6  
                                    i1l2794 0349                                      i1l2884 041A  
                                    i1l2868 03F6                                      Delay@i 0023  
                                    i1l2886 041D                                      i1l2894 042A  
                                    i1l2888 0421                                      u133_25 07EB  
                                    u134_25 07F2                                      u127_25 0ECA  
                                    u128_25 0ECF                                      _OSCCON 0099  
                                 ??_IncHour 0021                        ?_I2C_MasterTRBInsert 0021  
                            __CFG_PWRTE$OFF 0000                                   ??_TapTime 0070  
                                 ??_SetTurn 0070        __end_of_TMR1_DefaultInterruptHandler 0800  
     __size_of_TMR1_DefaultInterruptHandler 0001                _TMR1_DefaultInterruptHandler 07FF  
                    __end_of_LED_Initialize 07D3                    __end_of_Clock_Initialize 0713  
                   __end_of_TMR1_StartTimer 0D73                      Clock_Write@writeBuffer 003A  
                                    ___wmul 0EC1                              __CFG_STVREN$ON 0000  
                                    _action 0058                                   ??___lwmod 007A  
                               ?_Clock_Read 0070               I2C_MasterReadTRBBuild@address 0023  
                                    _setDir 005C                     __size_of_I2C_Initialize 0019  
                                 ?_I2C_Stop 0070                                   ?_I2CWrite 002F  
  TMR1_SetInterruptHandler@InterruptHandler 0021  IOCCF3_SetInterruptHandler@InterruptHandler 0021  
IOCCF2_SetInterruptHandler@InterruptHandler 0021                            ?_PIN_MANAGER_IOC 0070  
                              ??_IOCCF2_ISR 0071                                ??_IOCCF3_ISR 0071  
                     __end_of_TMR1_CallBack 0DB7                            ?_TMR1_Initialize 0070  
                         _SYSTEM_Initialize 0DC3                     __end_of__initialization 006C  
                     ??_I2C_MasterTRBInsert 0023                          ?_SYSTEM_Initialize 0070  
                         __end_of_Clock_Tap 1000                               __end_of_Delay 0E5D  
                           ?_LED_Initialize 0070                              __pcstackCOMMON 0070  
                              __pidataBANK0 0D73                                __pidataBANK1 0E8E  
                              __pidataBANK2 0FAF                         ??_SYSTEM_Initialize 0024  
                                 ?_TMR1_ISR 0070               ?_TMR1_DefaultInterruptHandler 0070  
           __end_of_I2C_MasterWriteTRBBuild 0F3A                          __end_of_IOCCF2_ISR 0DDC  
                        __end_of_IOCCF3_ISR 0DE9                                I2CRead@pdata 002E  
                            _OPTION_REGbits 0095                                  ??_I2C_Stop 0070  
                                   ??_Delay 0021                                  ??_I2CWrite 0032  
               ?_IOCCF3_SetInterruptHandler 0021                   __end_of_SYSTEM_Initialize 0DCF  
                                _checkClock 006A                          LED_Row@writeBuffer 003C  
                                __pbssBANK0 004E                                  __pbssBANK1 00A0  
                       __size_of_Clock_Read 001F                I2C_MasterReadTRBBuild@length 0022  
    __end_of_IOCCF2_DefaultInterruptHandler 0D70     __size_of_IOCCF2_DefaultInterruptHandler 0001  
            _IOCCF2_DefaultInterruptHandler 0D6F                __size_of_I2C_BusCollisionISR 0001  
                   _IOCCF3_InterruptHandler 00DE                                  __pmaintext 0436  
                                   ?___wmul 0070                            ?_TMR1_StartTimer 0070  
                                ??_TMR1_ISR 007E                             __CFG_PPS1WAY$ON 0000  
                                __pintentry 0004                                     _I2C_ISR 02F7  
                                   _I2CRead 0758                           I2CRead@readBuffer 002F  
               I2C_MasterWriteTRBBuild@ptrb 0027                             __CFG_WDTCCS$SWC 0000  
                                   _LED_Row 05A9                                     _OSCTUNE 0098  
                   I2C_Stop@completion_code 0071                                     _SSP1ADD 0212  
                                   _PPSLOCK 0E0F                                     _SSP1BUF 0211  
          ??_IOCCF3_DefaultInterruptHandler 0070             ?_IOCCF3_DefaultInterruptHandler 0070  
             __size_of_I2C_FunctionComplete 0011                                     _IncHour 0E0B  
                                   _TapTime 0DFA                                     _SetTurn 0D89  
                         _DISPLAYBANK_col_l 0120                           _DISPLAYBANK_row_l 00C5  
                           __size_of___wmul 001B                                     ___lwmod 07D3  
                            _I2C_Initialize 0E75                                     __ptext1 0DC3  
                                   __ptext2 0EA7                                     __ptext3 0D70  
                                   __ptext4 0DA3                                     __ptext5 0671  
                                   __ptext6 0D9A                                     __ptext7 0D91  
                                   __ptext8 0D82                                     __ptext9 0E75  
            ??_TMR1_DefaultInterruptHandler 0070                        Acc_Initialize@status 0040  
                                 _T1CONbits 0018                                ?_Clock_Write 0070  
                     _OSCILLATOR_Initialize 0D82           __size_of_TMR1_SetInterruptHandler 0009  
                  ??_PIN_MANAGER_Initialize 0023                   ?_TMR1_SetInterruptHandler 0021  
                                 _IOCCFbits 0399                                   _IOCCNbits 0398  
                                   _prevRow 0069                                   _IOCCPbits 0397  
                  __size_of_I2C_MasterWrite 0028                  __size_of_SYSTEM_Initialize 000C  
                                   clrloop0 0D77                                     main@row 00E5  
                           I2CWrite@address 0030                        end_of_initialization 006C  
                                   init_ram 0D7C                                     initloop 0D7D  
          __size_of_I2C_MasterWriteTRBBuild 0020                           ?_Clock_Initialize 0070  
                    __end_of_I2C_Initialize 0E8E                       I2C_MasterWrite@length 0028  
                              ??_Clock_Read 0039                          ??_Clock_Initialize 003D  
                                 IncHour@in 0021                          I2C_ISR@i2c_address 0066  
                                 _SSPDATPPS 0E21                                   _SSPCLKPPS 0E20  
                          __CFG_FOSC$INTOSC 0000                           __size_of_I2C_Stop 0018  
                         __size_of_I2CWrite 0025                ??_IOCCF2_SetInterruptHandler 0023  
          I2C_ISR@i2c_10bit_address_restart 005F                           _SECOND_MULTIPLIER 006B  
                    __size_of_Clock_Display 0287                          __end_of_Clock_Read 0EFB  
                          ??_LED_Initialize 0038                __size_of_Acc_ProcessClickSrc 0015  
                  Clock_Display@hourDisplay 003F                    ??_I2C_MasterReadTRBBuild 0025  
                         _p_i2c_trb_current 0063                     __size_of_Acc_Initialize 008E  
                                 _Clock_Tap 0FD7                    Acc_Initialize@dataBuffer 003A  
                           ?_I2C_Initialize 0070                                  _writeClock 005E  
                            __end_of___wmul 0EDC                                _i2c_tr_queue 00C2  
                         __size_of_TMR1_ISR 0015                      ?_OSCILLATOR_Initialize 0070  
       __size_of_IOCCF2_SetInterruptHandler 0009                                  LED_Row@row 003F  
             Acc_ProcessClickSrc@dataBuffer 0045                         _I2C_BusCollisionISR 0D6E  
                       start_initialization 0039             __size_of_PIN_MANAGER_Initialize 0059  
                                 _i2c_state 0065                 __end_of_I2C_MasterTRBInsert 0758  
                             _secondaryTick 0057                               I2CRead@length 0029  
                         ??_I2C_MasterWrite 002C                               I2CRead@status 0038  
                      ?_I2C_BusCollisionISR 0070                    __size_of_PIN_MANAGER_IOC 000C  
                           _DISPLAYBANK_col 00A6                    __size_of_TMR1_Initialize 001A  
                           _DISPLAYBANK_row 00D3                                  ?_Clock_Tap 0070  
                                  ??___wmul 0074                                 __pdataBANK0 0069  
                               __pdataBANK1 00C5                                 __pdataBANK2 0120  
                                  ?_I2C_ISR 0070                                    ?_I2CRead 0028  
                             _Clock_Display 0070                      __size_of_TMR1_CallBack 000B  
                 LED_Initialize@writeBuffer 003A                       TMR1_ISR@CountCallBack 00A0  
                                  ?_LED_Row 0038                                   ___latbits 0002  
                             __pcstackBANK0 0020                               __pcstackBANK1 00E2  
                    I2CRead@registerAddress 0028                        __size_of_Clock_Write 001F  
                  Acc_ProcessClickSrc@hours 004B                                    ?_IncHour 0070  
                   _I2C_MasterWriteTRBBuild 0F1A                       ??_I2C_BusCollisionISR 0070  
                                 __pnvBANK1 00DE                                    ?_TapTime 0070  
                    _PIN_MANAGER_Initialize 0671             __size_of_I2C_MasterReadTRBBuild 0028  
                                  ?_SetTurn 0070      __end_of_IOCCF3_DefaultInterruptHandler 0004  
   __size_of_IOCCF3_DefaultInterruptHandler 0001              _IOCCF3_DefaultInterruptHandler 0003  
          __end_of_TMR1_SetInterruptHandler 0DAC                                    ?___lwmod 0076  
                            ?_Clock_Display 0070                __end_of_I2C_FunctionComplete 0DFA  
              ??_INTERRUPT_InterruptManager 0020                                   __pswtext1 0800  
                                 _mainState 005B                           Clock_Write@status 0039  
                  __size_of_TMR1_StartTimer 0003                                    _I2C_Stop 0E5D  
                            __size_of_Delay 0017                                    _I2CWrite 0F3A  
        __end_of_IOCCF2_SetInterruptHandler 0D9A                  _IOCCF2_SetInterruptHandler 0D91  
              I2C_MasterWriteTRBBuild@pdata 0021                                   _localHour 0056  
                                 _localMins 00A5                               _p_i2c_current 0062  
                             _TMR1_CallBack 0DAC                              ___wmul@product 0074  
                                 clear_ram0 0D76                                    _PIE1bits 0090  
                                  _PIE2bits 0091                              I2CWrite@length 002F  
       __size_of_INTERRUPT_InterruptManager 0033                                    _PIR1bits 0010  
                                  _PIR2bits 0011                              _Acc_Initialize 051B  
                            I2CWrite@status 0037                        I2C_MasterWrite@pdata 002E  
                               ??_Clock_Tap 0042                        I2C_MasterWrite@pflag 002B  
                      __CFG_WDTCPS$WDTCPS1F 0000                                    _SSP1CON1 0215  
                                  _SSP1CON3 0217                                    _TMR1_ISR 0E1C  
                       I2C_ISR@pi2c_buf_ptr 0061                                    _SSP1STAT 0214  
                         ??_PIN_MANAGER_IOC 0071                        LED_Initialize@status 0039  
                          __size_of_I2C_ISR 013F                            __size_of_I2CRead 0043  
                         ??_TMR1_Initialize 0023                           ___wmul@multiplier 0070  
                       _Acc_ProcessClickSrc 0E31                      _I2C_MasterReadTRBBuild 0F5F  
                          __size_of_LED_Row 006B                   __size_of_Clock_Initialize 0049  
                               Delay@length 0022                              ?_TMR1_CallBack 0070  
                 ??_I2C_MasterWriteTRBBuild 0025                        ?_Acc_ProcessClickSrc 0070  
                          __size_of_IncHour 0011                      __end_of_Acc_Initialize 05A9  
                          ??_I2C_Initialize 0021                 Clock_Initialize@writeBuffer 0040  
                          __size_of_TapTime 0011                            __size_of_SetTurn 0008  
                           ??_Clock_Display 003D                     ??_OSCILLATOR_Initialize 0021  
                          __size_of___lwmod 002C                    _TMR1_SetInterruptHandler 0DA3  
                     _TMR1_InterruptHandler 00A2                             _I2C_MasterWrite 0F87  
                                  __ptext10 05A9                                    __ptext11 079B  
                                  __ptext20 051B                                    __ptext12 0EFB  
                                  __ptext21 0F3A                                    __ptext13 06CA  
                                _T1GCONbits 0019                                    __ptext30 07FF  
                                  __ptext22 0F87                                    __ptext14 0E46  
                                  __ptext31 0614                                    __ptext23 0758  
                                  __ptext15 0E31                                    __ptext40 0DFA  
                                  __ptext32 0EC1                                    __ptext24 0F1A  
                                  __ptext16 0FD7                                    __ptext41 02F7  
                                  __ptext33 07D3                                    __ptext25 0713  
                                  __ptext17 0070                                    __ptext42 0E5D  
                                  __ptext34 0DB7                                    __ptext26 0F5F  
                                  __ptext18 0E0B                                    __ptext43 0DE9  
                                  __ptext35 0DDC                                    __ptext19 0EDC  
                                  __ptext44 0D6E                                    __ptext36 0003  
                                  __ptext28 0E1C                                    __ptext37 0D89  
                                  __ptext29 0DAC                                    __ptext38 0DCF  
                                  __ptext39 0D6F                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                ??_IOCCF3_SetInterruptHandler 0023  
                         ??_TMR1_StartTimer 0021                I2C_MasterTRBInsert@ptrb_list 0021  
                                _IOCCF2_ISR 0DCF                                  _IOCCF3_ISR 0DDC  
                             __size_of_Tick 005D                               __size_of_main 00E5  
                      _I2C_FunctionComplete 0DE9                       ??_Acc_ProcessClickSrc 0044  
                           ?_Acc_Initialize 0070                                    _setClock 005D  
                      __CFG_WDTCWS$WDTCWSSW 0000                               I2CWrite@pdata 0036  
                                  int$flags 007E          __end_of_INTERRUPT_InterruptManager 0037  
                _INTERRUPT_InterruptManager 0004                                    main@mask 00E2  
               PIN_MANAGER_Initialize@state 0023         __size_of_IOCCF3_SetInterruptHandler 0009  
                                _INTCONbits 000B                             ??_TMR1_CallBack 007E  
                                  intlevel1 0000                        Clock_Read@dataBuffer 003A  
                     ?_I2C_FunctionComplete 0070                            ___lwmod@dividend 0078  
                   ?_PIN_MANAGER_Initialize 0070                       I2C_MasterRead@trBlock 00BA  
                         __CFG_CLKOUTEN$OFF 0000                __size_of_I2C_MasterTRBInsert 0045  
                               _PPSLOCKbits 0E0F                      I2C_MasterWrite@address 0029  
                   __size_of_LED_Initialize 0038                     __end_of_I2C_MasterWrite 0FAF  
                              _settingHours 005A                      I2C_MasterWrite@trBlock 00BE  
                             ??_Clock_Write 0038                             ___lwmod@divisor 0076  
                           ___lwmod@counter 007B                            _Clock_Initialize 06CA  
               ?_IOCCF2_SetInterruptHandler 0021                 __end_of_I2C_BusCollisionISR 0D6F  
                               ?_IOCCF2_ISR 0070                                 ?_IOCCF3_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 06CA              I2C_MasterWriteTRBBuild@address 0023  
                           _PIN_MANAGER_IOC 0DB7                             _TMR1_Initialize 0EA7  
             I2C_MasterWriteTRBBuild@length 0022                            Clock_Display@col 0040  
